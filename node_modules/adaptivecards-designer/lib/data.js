"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ValueKind;
(function (ValueKind) {
    ValueKind[ValueKind["String"] = 0] = "String";
    ValueKind[ValueKind["Boolean"] = 1] = "Boolean";
    ValueKind[ValueKind["Number"] = 2] = "Number";
})(ValueKind = exports.ValueKind || (exports.ValueKind = {}));
var DataType = /** @class */ (function () {
    function DataType(owner) {
        this.owner = owner;
    }
    DataType.create = function (parent, value) {
        if (typeof value === "string") {
            return new ValueData(parent, ValueKind.String);
        }
        else if (typeof value === "boolean") {
            return new ValueData(parent, ValueKind.Boolean);
        }
        else if (typeof value === "number") {
            return new ValueData(parent, ValueKind.Number);
        }
        else if (typeof value === "object") {
            if (Array.isArray(value)) {
                return ArrayData.create(parent, value);
            }
            else {
                return ObjectData.create(parent, value);
            }
        }
        else {
            throw new Error("Unsupported data type: " + typeof value);
        }
    };
    DataType.prototype.getChildFields = function () {
        return null;
    };
    DataType.prototype.qualifyFieldName = function (fieldName, fieldIsLeaf) {
        return fieldName;
    };
    Object.defineProperty(DataType.prototype, "isCollection", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return DataType;
}());
exports.DataType = DataType;
var ValueData = /** @class */ (function (_super) {
    __extends(ValueData, _super);
    function ValueData(owner, valueKind) {
        var _this = _super.call(this, owner) || this;
        _this.owner = owner;
        _this.valueKind = valueKind;
        return _this;
    }
    Object.defineProperty(ValueData.prototype, "typeName", {
        get: function () {
            return ValueKind[this.valueKind];
        },
        enumerable: true,
        configurable: true
    });
    return ValueData;
}(DataType));
exports.ValueData = ValueData;
var ArrayData = /** @class */ (function (_super) {
    __extends(ArrayData, _super);
    function ArrayData(owner) {
        var _this = _super.call(this, owner) || this;
        _this.owner = owner;
        _this.dataType = undefined;
        return _this;
    }
    ArrayData.create = function (parent, input) {
        if (!Array.isArray(input)) {
            throw new Error("Input is not an array.");
        }
        var result = new ArrayData(parent);
        if (input.length > 0) {
            result.dataType = DataType.create(parent, input[0]);
        }
        return result;
    };
    ArrayData.prototype.getChildFields = function () {
        return this.dataType.getChildFields();
    };
    ArrayData.prototype.qualifyFieldName = function (fieldName, fieldIsLeaf) {
        if (!fieldIsLeaf) {
            return fieldName + "[0]";
        }
        else {
            return _super.prototype.qualifyFieldName.call(this, fieldName, fieldIsLeaf);
        }
    };
    Object.defineProperty(ArrayData.prototype, "isCollection", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayData.prototype, "typeName", {
        get: function () {
            return "Array";
        },
        enumerable: true,
        configurable: true
    });
    return ArrayData;
}(DataType));
exports.ArrayData = ArrayData;
var ObjectData = /** @class */ (function (_super) {
    __extends(ObjectData, _super);
    function ObjectData(owner) {
        var _this = _super.call(this, owner) || this;
        _this.owner = owner;
        _this.fields = [];
        return _this;
    }
    ObjectData.create = function (parent, input) {
        var result = new ObjectData(parent);
        for (var _i = 0, _a = Object.keys(input); _i < _a.length; _i++) {
            var key = _a[_i];
            var field = new FieldDefinition(parent);
            field.dataType = DataType.create(field, input[key]);
            field.name = key;
            result.fields.push(field);
        }
        return result;
    };
    ObjectData.prototype.getChildFields = function () {
        return this.fields;
    };
    Object.defineProperty(ObjectData.prototype, "typeName", {
        get: function () {
            return "Object";
        },
        enumerable: true,
        configurable: true
    });
    return ObjectData;
}(DataType));
exports.ObjectData = ObjectData;
var FieldDefinition = /** @class */ (function () {
    function FieldDefinition(parent) {
        this.parent = parent;
    }
    FieldDefinition.create = function (input) {
        var field = new FieldDefinition(null);
        field.name = "$root";
        field.dataType = DataType.create(field, input);
        return field;
    };
    FieldDefinition.prototype.getPath = function (asLeaf) {
        if (asLeaf === void 0) { asLeaf = true; }
        var result = this.qualifiedName(asLeaf);
        var currentField = this.parent;
        while (currentField) {
            result = currentField.qualifiedName(false) + "." + result;
            currentField = currentField.parent;
        }
        return result;
    };
    FieldDefinition.prototype.qualifiedName = function (asLeaf) {
        return this.dataType.qualifyFieldName(this.name, asLeaf);
    };
    Object.defineProperty(FieldDefinition.prototype, "children", {
        get: function () {
            return this.dataType.getChildFields();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldDefinition.prototype, "isCollection", {
        get: function () {
            return this.dataType.isCollection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldDefinition.prototype, "typeName", {
        get: function () {
            return this.dataType.typeName;
        },
        enumerable: true,
        configurable: true
    });
    return FieldDefinition;
}());
exports.FieldDefinition = FieldDefinition;
//# sourceMappingURL=data.js.map
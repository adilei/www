"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var catalogue_1 = require("./catalogue");
var ACData = require("adaptivecards-templating");
var Adaptive = require("adaptivecards");
var dialog_1 = require("./dialog");
var miscellaneous_1 = require("./miscellaneous");
var downloader_1 = require("./downloader");
var SamplePickerDialog = /** @class */ (function (_super) {
    __extends(SamplePickerDialog, _super);
    function SamplePickerDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SamplePickerDialog.prototype.renderMessage = function (message) {
        var _this = this;
        var templatePayload = {
            type: "AdaptiveCard",
            version: "1.0",
            body: [
                {
                    type: "TextBlock",
                    text: "**{title}**",
                    size: "large"
                },
                {
                    type: "Container",
                    verticalContentAlignment: "center",
                    height: "stretch",
                    items: [
                        {
                            type: "TextBlock",
                            text: "{message}",
                            horizontalAlignment: "center",
                            wrap: true
                        }
                    ]
                },
                {
                    type: "ActionSet",
                    horizontalAlignment: "right",
                    actions: [
                        {
                            type: "Action.Submit",
                            id: "cancel",
                            title: "Cancel"
                        }
                    ]
                }
            ]
        };
        var template = new ACData.Template(templatePayload);
        var context = new ACData.EvaluationContext();
        context.$root = {
            title: this.title,
            message: message
        };
        var expandedCardPayload = template.expand(context);
        var card = new Adaptive.AdaptiveCard();
        card.hostConfig = miscellaneous_1.defaultHostConfig;
        card.onExecuteAction = function (action) {
            if (action.id == "cancel") {
                _this.close();
            }
        };
        card.parse(expandedCardPayload);
        var renderedCard = card.render();
        renderedCard.style.height = "100%";
        this._renderedElement.innerHTML = "";
        this._renderedElement.appendChild(renderedCard);
    };
    SamplePickerDialog.prototype.renderCatalogue = function (catalogue) {
        var _this = this;
        var templatePayload = {
            type: "AdaptiveCard",
            version: "1.0",
            body: [
                {
                    type: "TextBlock",
                    text: "**{title}**",
                    size: "large"
                },
                {
                    type: "Container",
                    height: "stretch",
                    allowVerticalOverflow: true,
                    items: [
                        {
                            type: "Container",
                            $data: "{catalogue}",
                            minHeight: "36px",
                            verticalContentAlignment: "center",
                            selectAction: {
                                type: "Action.Submit",
                                data: {
                                    catalogueIndex: "{$index}"
                                }
                            },
                            spacing: "none",
                            items: [
                                {
                                    type: "TextBlock",
                                    text: "{displayName}",
                                    size: "medium"
                                }
                            ]
                        }
                    ]
                },
                {
                    type: "ActionSet",
                    horizontalAlignment: "right",
                    actions: [
                        {
                            type: "Action.Submit",
                            id: "cancel",
                            title: "Cancel"
                        }
                    ]
                }
            ]
        };
        var template = new ACData.Template(templatePayload);
        var context = new ACData.EvaluationContext();
        context.$root = {
            title: this.title,
            catalogue: catalogue
        };
        var expandedCardPayload = template.expand(context);
        var card = new Adaptive.AdaptiveCard();
        card.hostConfig = miscellaneous_1.defaultHostConfig;
        card.onExecuteAction = function (action) {
            if (action.id == "cancel") {
                _this.close();
            }
            else if (action instanceof Adaptive.SubmitAction) {
                _this._selectedSample = catalogue[action.data["catalogueIndex"]];
                _this.close();
            }
        };
        card.onParseElement = function (element, json, errors) {
            if (element instanceof Adaptive.CardElementContainer) {
                element.allowVerticalOverflow = Adaptive.getBoolValue(json["allowVerticalOverflow"], false);
            }
        };
        card.parse(expandedCardPayload);
        var renderedCard = card.render();
        renderedCard.style.height = "100%";
        this._renderedElement.innerHTML = "";
        this._renderedElement.appendChild(renderedCard);
    };
    SamplePickerDialog.prototype.renderContent = function () {
        var _this = this;
        this._renderedElement = document.createElement("div");
        this._renderedElement.style.overflow = "auto";
        this.renderMessage("Loading sample catalogue...");
        var downloader = new downloader_1.Downloader(this.catalogueUrl);
        downloader.onError = function () { _this.renderMessage("The catalogue couldn't be loaded. Please try again later."); };
        downloader.onSuccess = function () {
            if (!Adaptive.isNullOrEmpty(downloader.data)) {
                try {
                    var catalogue = catalogue_1.parseCatalogue(JSON.parse(downloader.data));
                    _this.renderCatalogue(catalogue);
                }
                catch (e) {
                    _this.renderMessage("The catalogue couldn't be loaded. Please try again later.");
                }
            }
        };
        downloader.download();
        return this._renderedElement;
    };
    Object.defineProperty(SamplePickerDialog.prototype, "selectedSample", {
        get: function () {
            return this._selectedSample;
        },
        enumerable: true,
        configurable: true
    });
    return SamplePickerDialog;
}(dialog_1.Dialog));
exports.SamplePickerDialog = SamplePickerDialog;
//# sourceMappingURL=sample-picker-dialog.js.map
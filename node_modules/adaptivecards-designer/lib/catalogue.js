"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Adaptive = require("adaptivecards");
var downloader_1 = require("./downloader");
var CatalogueEntry = /** @class */ (function () {
    function CatalogueEntry(displayName, cardPayloadUrl, sampleDataUrl) {
        this.displayName = displayName;
        this.cardPayloadUrl = cardPayloadUrl;
        this._cardPayloadDownloaded = false;
        this._sampleDataDownloaded = false;
        this.onDownloaded = null;
        this.sampleDataUrl = sampleDataUrl;
    }
    CatalogueEntry.prototype.downloadCompleted = function () {
        if (this._cardPayloadDownloaded && this._sampleDataDownloaded && this.onDownloaded) {
            this.onDownloaded(this);
        }
    };
    CatalogueEntry.prototype.download = function () {
        var _this = this;
        var payloadDownloader = new downloader_1.Downloader(this.cardPayloadUrl);
        payloadDownloader.onSuccess = function () {
            _this._cardPayload = payloadDownloader.data;
            _this._cardPayloadDownloaded = true;
            _this.downloadCompleted();
        };
        payloadDownloader.onError = function () {
            _this._cardPayloadDownloaded = true;
            _this.downloadCompleted();
        };
        payloadDownloader.download();
        if (!Adaptive.isNullOrEmpty(this.sampleDataUrl)) {
            var sampleDataDownloader_1 = new downloader_1.Downloader(this.sampleDataUrl);
            sampleDataDownloader_1.onSuccess = function () {
                _this._sampleData = sampleDataDownloader_1.data;
                _this._sampleDataDownloaded = true;
                _this.downloadCompleted();
            };
            sampleDataDownloader_1.onError = function () {
                _this._sampleDataDownloaded = true;
                _this.downloadCompleted();
            };
            sampleDataDownloader_1.download();
        }
        else {
            this._sampleDataDownloaded = true;
            this.downloadCompleted();
        }
    };
    Object.defineProperty(CatalogueEntry.prototype, "cardPayload", {
        get: function () {
            return this._cardPayload;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CatalogueEntry.prototype, "sampleData", {
        get: function () {
            return this._sampleData;
        },
        enumerable: true,
        configurable: true
    });
    return CatalogueEntry;
}());
exports.CatalogueEntry = CatalogueEntry;
function parseCatalogue(input) {
    var entries = null;
    if (Array.isArray(input)) {
        entries = input;
    }
    else {
        entries = Array.isArray(input["entries"]) ? input["entried"] : null;
    }
    var result = [];
    if (entries != null) {
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
            var entry = entries_1[_i];
            if (typeof entry === "object") {
                var displayName = Adaptive.getStringValue(entry["displayName"]);
                var cardPayloadUrl = Adaptive.getStringValue(entry["cardPayloadUrl"]);
                if (!Adaptive.isNullOrEmpty(displayName) && !Adaptive.isNullOrEmpty(cardPayloadUrl)) {
                    result.push(new CatalogueEntry(displayName, cardPayloadUrl, Adaptive.getStringValue(entry["dataSampleUrl"])));
                }
            }
        }
    }
    return result;
}
exports.parseCatalogue = parseCatalogue;
//# sourceMappingURL=catalogue.js.map
export declare enum ValueKind {
    String = 0,
    Boolean = 1,
    Number = 2
}
export declare abstract class DataType {
    readonly owner: FieldDefinition;
    static create(parent: FieldDefinition, value: any): DataType;
    constructor(owner: FieldDefinition);
    getChildFields(): FieldDefinition[];
    qualifyFieldName(fieldName: string, fieldIsLeaf: boolean): string;
    abstract readonly typeName: string;
    readonly isCollection: boolean;
}
export declare class ValueData extends DataType {
    readonly owner: FieldDefinition;
    readonly valueKind: ValueKind;
    constructor(owner: FieldDefinition, valueKind: ValueKind);
    readonly typeName: string;
}
export declare class ArrayData extends DataType {
    readonly owner: FieldDefinition;
    static create(parent: FieldDefinition, input: Object): ArrayData;
    dataType: DataType;
    constructor(owner: FieldDefinition);
    getChildFields(): FieldDefinition[];
    qualifyFieldName(fieldName: string, fieldIsLeaf: boolean): string;
    readonly isCollection: boolean;
    readonly typeName: string;
}
export declare class ObjectData extends DataType {
    readonly owner: FieldDefinition;
    static create(parent: FieldDefinition, input: Object): ObjectData;
    readonly fields: FieldDefinition[];
    constructor(owner: FieldDefinition);
    getChildFields(): FieldDefinition[];
    readonly typeName: string;
}
export declare class FieldDefinition {
    readonly parent: FieldDefinition;
    static create(input: any): FieldDefinition;
    name: string;
    displayName: string;
    dataType: DataType;
    constructor(parent: FieldDefinition);
    getPath(asLeaf?: boolean): string;
    qualifiedName(asLeaf: boolean): string;
    readonly children: FieldDefinition[];
    readonly isCollection: boolean;
    readonly typeName: string;
}

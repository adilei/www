"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Clipboard = require("clipboard");
var Adaptive = require("adaptivecards");
var Constants = require("./constants");
var Designer = require("./card-designer-surface");
var sample_picker_dialog_1 = require("./sample-picker-dialog");
var adaptive_card_schema_1 = require("./adaptive-card-schema");
var fullscreen_handler_1 = require("./fullscreen-handler");
var toolbar_1 = require("./toolbar");
var miscellaneous_1 = require("./miscellaneous");
var tool_palette_1 = require("./tool-palette");
var default_container_1 = require("./containers/default/default-container");
var side_panel_1 = require("./side-panel");
var tool_box_1 = require("./tool-box");
var data_1 = require("./data");
var data_treeitem_1 = require("./data-treeitem");
var strings_1 = require("./strings");
var Shared = require("./shared");
var CardDesigner = /** @class */ (function () {
    function CardDesigner(hostContainers) {
        if (hostContainers === void 0) { hostContainers = null; }
        this._isAttached = false;
        this._isMonacoEditorLoaded = false;
        this._undoStack = [];
        this._undoStackIndex = -1;
        this.preventCardUpdate = false;
        this._cardEditorUpdateCounter = 0;
        this.preventJsonUpdate = false;
        this._fullScreenHandler = new fullscreen_handler_1.FullScreenHandler();
        this.toolbar = new toolbar_1.Toolbar();
        this.sampleCatalogueUrl = undefined;
        Adaptive.AdaptiveCard.enableFullJsonRoundTrip = true;
        Adaptive.AdaptiveCard.onProcessMarkdown = function (text, result) {
            CardDesigner.internalProcessMarkdown(text, result);
        };
        this._hostContainers = hostContainers ? hostContainers : [];
        this.prepareToolbar();
    }
    CardDesigner.internalProcessMarkdown = function (text, result) {
        if (CardDesigner.onProcessMarkdown) {
            CardDesigner.onProcessMarkdown(text, result);
        }
        else {
            // Check for markdownit
            if (window["markdownit"]) {
                result.outputHtml = window["markdownit"]().render(text);
                result.didProcess = true;
            }
        }
    };
    CardDesigner.prototype.togglePreview = function () {
        this._designerSurface.isPreviewMode = !this._designerSurface.isPreviewMode;
        if (this._designerSurface.isPreviewMode) {
            this._togglePreviewButton.toolTip = "Return to Design mode";
        }
        else {
            this._togglePreviewButton.toolTip = "Switch to Preview mode";
            this._designerSurface.updateLayout();
        }
        this.buildTreeView();
    };
    CardDesigner.prototype.buildTreeView = function () {
        if (this._treeViewToolbox.content) {
            this._treeViewToolbox.content.innerHTML = "";
            if (this.designerSurface.isPreviewMode) {
                this.treeViewToolbox.content.innerHTML =
                    '<div style="padding: 8px; display: flex; justify-content: center;">' +
                        '<div>The Card Structure isn\'t available in Preview mode.</div>' +
                        '</div>';
            }
            else {
                this._treeViewToolbox.content.appendChild(this.designerSurface.rootPeer.treeItem.render());
            }
        }
    };
    CardDesigner.prototype.setupDataTreeItemEvents = function (treeItem) {
        var _this = this;
        treeItem.onStartDrag = function (sender) {
            _this._draggedPaletteItem = new tool_palette_1.DataPaletteItem(treeItem.field);
            _this._draggedElement = _this._draggedPaletteItem.renderDragVisual();
            _this._draggedElement.style.position = "absolute";
            _this._draggedElement.style.left = _this._currentMousePosition.x + "px";
            _this._draggedElement.style.top = _this._currentMousePosition.y + "px";
            document.body.appendChild(_this._draggedElement);
            treeItem.endDrag();
        };
        for (var i = 0; i < treeItem.getChildCount(); i++) {
            this.setupDataTreeItemEvents(treeItem.getChildAt(i));
        }
    };
    CardDesigner.prototype.buildDataExplorer = function () {
        if (this._dataToolbox && this._dataToolbox.content) {
            this._dataToolbox.content.innerHTML = "";
            if (this._dataStructure) {
                var treeItem = new data_treeitem_1.DataTreeItem(this._dataStructure);
                this._dataToolbox.content.appendChild(treeItem.render());
                this.setupDataTreeItemEvents(treeItem);
            }
        }
    };
    CardDesigner.prototype.buildPropertySheet = function (peer) {
        if (this._propertySheetToolbox.content) {
            this._propertySheetToolbox.content.innerHTML = "";
            var card = void 0;
            if (peer) {
                card = peer.buildPropertySheetCard(this.currentTargetVersion);
            }
            else {
                card = new Adaptive.AdaptiveCard();
                card.parse({
                    type: "AdaptiveCard",
                    version: "1.0",
                    body: [
                        {
                            type: "TextBlock",
                            wrap: true,
                            text: "**Nothing is selected**"
                        },
                        {
                            type: "TextBlock",
                            wrap: true,
                            text: "Select an element in the card to modify its properties."
                        }
                    ]
                });
                card.padding = new Adaptive.PaddingDefinition(Adaptive.Spacing.Small, Adaptive.Spacing.Small, Adaptive.Spacing.Small, Adaptive.Spacing.Small);
            }
            // card.hostConfig = this._propertySheetHostConfig;
            card.hostConfig = miscellaneous_1.defaultHostConfig;
            this._propertySheetToolbox.content.appendChild(card.render());
        }
    };
    CardDesigner.prototype.addPaletteItem = function (paletteItem, hostElement) {
        var _this = this;
        paletteItem.render();
        paletteItem.onStartDrag = function (sender) {
            _this._draggedPaletteItem = sender;
            _this._draggedElement = sender.renderDragVisual();
            _this._draggedElement.style.position = "absolute";
            _this._draggedElement.style.left = _this._currentMousePosition.x + "px";
            _this._draggedElement.style.top = _this._currentMousePosition.y + "px";
            document.body.appendChild(_this._draggedElement);
        };
        hostElement.appendChild(paletteItem.renderedElement);
    };
    CardDesigner.prototype.buildPalette = function () {
        if (!this._isAttached) {
            return;
        }
        this._toolPaletteToolbox.content.innerHTML = "";
        var categorizedTypes = {};
        for (var i_1 = 0; i_1 < Adaptive.AdaptiveCard.elementTypeRegistry.getItemCount(); i_1++) {
            var dummyCardElement = Adaptive.AdaptiveCard.elementTypeRegistry.getItemAt(i_1).createInstance();
            var peerRegistration = Designer.CardDesignerSurface.cardElementPeerRegistry.findTypeRegistration(dummyCardElement.constructor);
            if (peerRegistration) {
                if (!categorizedTypes.hasOwnProperty(peerRegistration.category)) {
                    categorizedTypes[peerRegistration.category] = [];
                }
                var paletteItem = new tool_palette_1.ElementPaletteItem(Adaptive.AdaptiveCard.elementTypeRegistry.getItemAt(i_1), peerRegistration);
                categorizedTypes[peerRegistration.category].push(paletteItem);
            }
        }
        if (this.customPaletteItems) {
            for (var _i = 0, _a = this.customPaletteItems; _i < _a.length; _i++) {
                var item = _a[_i];
                if (!categorizedTypes.hasOwnProperty(item.category)) {
                    categorizedTypes[item.category] = [];
                }
                categorizedTypes[item.category].push(item);
            }
        }
        for (var category in categorizedTypes) {
            var node = document.createElement('div');
            node.innerText = category;
            node.className = "acd-palette-category";
            this._toolPaletteToolbox.content.appendChild(node);
            for (var i = 0; i < categorizedTypes[category].length; i++) {
                this.addPaletteItem(categorizedTypes[category][i], this._toolPaletteToolbox.content);
            }
        }
    };
    CardDesigner.prototype.endDrag = function () {
        if (this._draggedPaletteItem) {
            this._draggedPaletteItem.endDrag();
            this._draggedElement.remove();
            this._draggedPaletteItem = null;
            this._draggedElement = null;
        }
    };
    CardDesigner.prototype.renderErrorPaneElement = function (message, cardObject) {
        var _this = this;
        var errorElement = document.createElement("div");
        errorElement.className = "acd-error-pane-message";
        if (cardObject) {
            errorElement.classList.add("selectable");
            errorElement.title = "Click to select this element";
            errorElement.onclick = function (e) {
                var peer = _this.designerSurface.findPeer(cardObject);
                if (peer) {
                    peer.isSelected = true;
                    peer.scrollIntoView();
                }
            };
        }
        errorElement.innerText = message;
        return errorElement;
    };
    CardDesigner.prototype.recreateDesignerSurface = function () {
        var _this = this;
        var styleSheetLinkElement = document.getElementById("adaptiveCardStylesheet");
        if (styleSheetLinkElement == null) {
            styleSheetLinkElement = document.createElement("link");
            styleSheetLinkElement.id = "adaptiveCardStylesheet";
            document.getElementsByTagName("head")[0].appendChild(styleSheetLinkElement);
        }
        styleSheetLinkElement.rel = "stylesheet";
        styleSheetLinkElement.type = "text/css";
        if (miscellaneous_1.Utils.isAbsoluteUrl(this.activeHostContainer.styleSheet)) {
            styleSheetLinkElement.href = this.activeHostContainer.styleSheet;
        }
        else {
            styleSheetLinkElement.href = miscellaneous_1.Utils.joinPaths(this._assetPath, this.activeHostContainer.styleSheet);
        }
        var _cardArea = document.getElementById("cardArea");
        if (_cardArea) {
            _cardArea.style.backgroundColor = this.activeHostContainer.getBackgroundColor();
        }
        this.activeHostContainer.initialize();
        this._designerHostElement.innerHTML = "";
        this.activeHostContainer.renderTo(this._designerHostElement);
        var wasInPreviewMode = this._designerSurface ? this._designerSurface.isPreviewMode : false;
        this._designerSurface = new Designer.CardDesignerSurface(this.activeHostContainer.cardHost);
        this._designerSurface.fixedHeightCard = this.activeHostContainer.isFixedHeight;
        this._designerSurface.onSelectedPeerChanged = function (peer) {
            _this.buildPropertySheet(peer);
        };
        this._designerSurface.onLayoutUpdated = function (isFullRefresh) {
            if (isFullRefresh) {
                _this.scheduleUpdateJsonFromCard();
            }
            _this.buildTreeView();
        };
        this._designerSurface.onCardValidated = function (parseErrors, validationResults) {
            var errorPane = document.getElementById("errorPane");
            errorPane.innerHTML = "";
            if (parseErrors.length > 0) {
                var errorMessages = [];
                for (var _i = 0, parseErrors_1 = parseErrors; _i < parseErrors_1.length; _i++) {
                    var error = parseErrors_1[_i];
                    if (errorMessages.indexOf(error.message) < 0) {
                        errorMessages.push(error.message);
                    }
                }
                for (var _a = 0, errorMessages_1 = errorMessages; _a < errorMessages_1.length; _a++) {
                    var message = errorMessages_1[_a];
                    errorPane.appendChild(_this.renderErrorPaneElement("[Error] " + message));
                }
            }
            if (validationResults.failures.length > 0) {
                for (var _b = 0, _c = validationResults.failures; _b < _c.length; _b++) {
                    var failure = _c[_b];
                    for (var _d = 0, _e = failure.errors; _d < _e.length; _d++) {
                        var error = _e[_d];
                        errorPane.appendChild(_this.renderErrorPaneElement("[" + failure.cardObject.getJsonTypeName() + "] " + error.message, failure.cardObject));
                    }
                }
            }
            if (errorPane.childElementCount > 0) {
                errorPane.classList.remove("acd-hidden");
            }
            else {
                errorPane.classList.add("acd-hidden");
            }
        };
        this.buildPalette();
        this.buildPropertySheet(null);
        if (this._card) {
            this._card.hostConfig = this.activeHostContainer.getHostConfig();
        }
        this._designerSurface.card = this._card;
        this.updateSampleData();
        this._designerSurface.isPreviewMode = wasInPreviewMode;
        this.updateFullLayout();
    };
    CardDesigner.prototype.activeHostContainerChanged = function () {
        this.recreateDesignerSurface();
        if (this.onActiveHostContainerChanged) {
            this.onActiveHostContainerChanged(this);
        }
    };
    CardDesigner.prototype.updateToolboxLayout = function (toolbox, hostPanelRect) {
        if (toolbox) {
            var jsonEditorHeaderRect = toolbox.getHeaderBoundingRect();
            toolbox.content.style.height = (hostPanelRect.height - jsonEditorHeaderRect.height) + "px";
        }
    };
    CardDesigner.prototype.updateJsonEditorsLayout = function () {
        if (this._isMonacoEditorLoaded) {
            var jsonEditorsPaneRect = this._jsonEditorsPanel.contentHost.getBoundingClientRect();
            this.updateToolboxLayout(this._cardEditorToolbox, jsonEditorsPaneRect);
            this._cardEditor.layout();
            if (this._sampleDataEditorToolbox) {
                this.updateToolboxLayout(this._sampleDataEditorToolbox, jsonEditorsPaneRect);
                this._sampleDataEditor.layout();
            }
        }
    };
    CardDesigner.prototype.updateFullLayout = function () {
        this.scheduleLayoutUpdate();
        this.updateJsonEditorsLayout();
    };
    CardDesigner.prototype.cardPayloadChanged = function () {
        if (this.onCardPayloadChanged) {
            this.onCardPayloadChanged(this);
        }
    };
    CardDesigner.prototype.beginCardEditorUpdate = function () {
        this._cardEditorUpdateCounter++;
    };
    CardDesigner.prototype.endCardEditorUpdate = function () {
        if (this._cardEditorUpdateCounter > 0) {
            this._cardEditorUpdateCounter--;
        }
    };
    CardDesigner.prototype.setCardPayload = function (payload, addToUndoStack) {
        if (this._isMonacoEditorLoaded) {
            this.beginCardEditorUpdate();
            try {
                this._cardEditor.setValue(JSON.stringify(payload, null, 4));
                this.updateCardFromJson(addToUndoStack);
            }
            finally {
                this.endCardEditorUpdate();
            }
        }
        this.cardPayloadChanged();
    };
    CardDesigner.prototype.setSampleDataPayload = function (payload) {
        if (this._isMonacoEditorLoaded && this._sampleDataEditor) {
            this._sampleDataEditor.setValue(JSON.stringify(payload, null, 4));
        }
    };
    CardDesigner.prototype.updateJsonFromCard = function (addToUndoStack) {
        if (addToUndoStack === void 0) { addToUndoStack = true; }
        try {
            this.preventCardUpdate = true;
            if (!this.preventJsonUpdate && this._isMonacoEditorLoaded) {
                var cardPayload = this.card.toJSON();
                this.setCardPayload(cardPayload, addToUndoStack);
            }
        }
        finally {
            this.preventCardUpdate = false;
        }
    };
    CardDesigner.prototype.scheduleUpdateJsonFromCard = function () {
        var _this = this;
        clearTimeout(this.jsonUpdateTimer);
        if (!this.preventJsonUpdate) {
            this.jsonUpdateTimer = setTimeout(function () { _this.updateJsonFromCard(); }, 100);
        }
    };
    CardDesigner.prototype.getCurrentCardEditorPayload = function () {
        return this._isMonacoEditorLoaded ? this._cardEditor.getValue() : Constants.defaultPayload;
    };
    CardDesigner.prototype.getCurrentSampleDataEditorPayload = function () {
        return this._isMonacoEditorLoaded && this._sampleDataEditor ? this._sampleDataEditor.getValue() : "";
    };
    CardDesigner.prototype.updateCardFromJson = function (addToUndoStack) {
        try {
            this.preventJsonUpdate = true;
            var currentEditorPayload = this.getCurrentCardEditorPayload();
            if (addToUndoStack) {
                try {
                    var parsed = JSON.parse(currentEditorPayload);
                    this.addToUndoStack(parsed);
                }
                catch (_a) {
                    // do nothing
                }
            }
            if (!this.preventCardUpdate) {
                this.designerSurface.setCardPayloadAsString(currentEditorPayload);
                this.cardPayloadChanged();
            }
        }
        finally {
            this.preventJsonUpdate = false;
        }
    };
    CardDesigner.prototype.scheduleUpdateCardFromJson = function () {
        var _this = this;
        clearTimeout(this.cardUpdateTimer);
        if (!this.preventCardUpdate) {
            this.cardUpdateTimer = setTimeout(function () { _this.updateCardFromJson(true); }, 300);
        }
    };
    CardDesigner.prototype.scheduleLayoutUpdate = function () {
        var _this = this;
        clearTimeout(this.updateLayoutTimer);
        this.updateLayoutTimer = setTimeout(function () { _this.designerSurface.updateLayout(false); }, 50);
    };
    CardDesigner.prototype.prepareToolbar = function () {
        var _this = this;
        if (Shared.GlobalSettings.showVersionPicker) {
            this._versionChoicePicker = new toolbar_1.ToolbarChoicePicker(CardDesigner.ToolbarCommands.VersionPicker);
            this._versionChoicePicker.label = "Target version:";
            this._versionChoicePicker.width = 80;
            this._versionChoicePicker.alignment = toolbar_1.ToolbarElementAlignment.Right;
            this._versionChoicePicker.separator = true;
            for (var i = 0; i < Shared.SupportedTargetVersions.length; i++) {
                this._versionChoicePicker.choices.push({
                    name: Shared.SupportedTargetVersions[i].label,
                    value: i.toString()
                });
            }
            this.toolbar.addElement(this._versionChoicePicker);
        }
        this._fullScreenButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.FullScreen, "Enter Full Screen", "acd-icon-fullScreen", function (sender) { _this._fullScreenHandler.toggleFullScreen(); });
        this._fullScreenButton.displayCaption = false;
        this._fullScreenButton.toolTip = "Enter full screen";
        this._fullScreenButton.alignment = toolbar_1.ToolbarElementAlignment.Right;
        // Hide full screen button by default. This button is useless
        // and should really be plain and simple removed in a future version
        this._fullScreenButton.isVisible = false;
        this.toolbar.addElement(this._fullScreenButton);
        var openSampleButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.OpenPayload, "Open Sample", "acd-icon-open", function (sender) {
            var dialog = new sample_picker_dialog_1.SamplePickerDialog();
            dialog.title = "Pick a sample";
            dialog.width = "30%";
            dialog.height = "60%";
            dialog.catalogueUrl = _this.sampleCatalogueUrl;
            dialog.onClose = function (d) {
                if (dialog.selectedSample) {
                    dialog.selectedSample.onDownloaded = function () {
                        try {
                            var cardPayload = JSON.parse(dialog.selectedSample.cardPayload);
                            _this.setCardPayload(cardPayload, true);
                        }
                        catch (_a) {
                            alert("The sample could not be loaded.");
                        }
                        if (!Adaptive.isNullOrEmpty(dialog.selectedSample.sampleData)) {
                            try {
                                var sampleDataPayload = JSON.parse(dialog.selectedSample.sampleData);
                                _this.setSampleDataPayload(sampleDataPayload);
                                _this.dataStructure = data_1.FieldDefinition.create(sampleDataPayload);
                            }
                            catch (_b) {
                                alert("The sample could not be loaded.");
                            }
                        }
                    };
                    dialog.selectedSample.download();
                }
            };
            dialog.open();
        });
        this.toolbar.addElement(openSampleButton);
        if (this._hostContainers && this._hostContainers.length > 0) {
            this._hostContainerChoicePicker = new toolbar_1.ToolbarChoicePicker(CardDesigner.ToolbarCommands.HostAppPicker);
            this._hostContainerChoicePicker.separator = true;
            this._hostContainerChoicePicker.label = "Select host app:";
            this._hostContainerChoicePicker.width = 350;
            for (var i = 0; i < this._hostContainers.length; i++) {
                this._hostContainerChoicePicker.choices.push({
                    name: this._hostContainers[i].name,
                    value: i.toString(),
                });
            }
            this._hostContainerChoicePicker.onChanged = function (sender) {
                _this.activeHostContainer = _this._hostContainers[Number.parseInt(_this._hostContainerChoicePicker.value)];
                _this.activeHostContainerChanged();
            };
            this.toolbar.addElement(this._hostContainerChoicePicker);
        }
        this._undoButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.Undo, "Undo", "acd-icon-undo", function (sender) { _this.undo(); });
        this._undoButton.separator = true;
        this._undoButton.toolTip = "Undo your last change";
        this._undoButton.isEnabled = false;
        this._undoButton.displayCaption = false;
        this.toolbar.addElement(this._undoButton);
        this._redoButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.Redo, "Redo", "acd-icon-redo", function (sender) { _this.redo(); });
        this._redoButton.toolTip = "Redo your last changes";
        this._redoButton.isEnabled = false;
        this._redoButton.displayCaption = false;
        this.toolbar.addElement(this._redoButton);
        this._newCardButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.NewCard, "New card", "acd-icon-newCard", function (sender) { _this.newCard(); });
        this._newCardButton.separator = true;
        this.toolbar.addElement(this._newCardButton);
        this._copyJSONButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.CopyJSON, "Copy card JSON", "acd-icon-copy");
        this.toolbar.addElement(this._copyJSONButton);
        this._togglePreviewButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.TogglePreview, "Preview mode", "acd-icon-preview", function (sender) { _this.togglePreview(); });
        this._togglePreviewButton.separator = true;
        this._togglePreviewButton.allowToggle = true;
        this._togglePreviewButton.isVisible = Shared.GlobalSettings.enableDataBindingSupport;
        this.toolbar.addElement(this._togglePreviewButton);
        this._fullScreenHandler = new fullscreen_handler_1.FullScreenHandler();
        this._fullScreenHandler.onFullScreenChanged = function (isFullScreen) {
            _this._fullScreenButton.toolTip = isFullScreen ? "Exit full screen" : "Enter full screen";
            _this.updateFullLayout();
        };
    };
    CardDesigner.prototype.onResize = function () {
        this._cardEditor.layout();
        if (this._sampleDataEditor) {
            this._sampleDataEditor.layout();
        }
    };
    CardDesigner.prototype.updateSampleData = function () {
        try {
            this._sampleData = JSON.parse(this.getCurrentSampleDataEditorPayload());
            this.designerSurface.sampleData = this._sampleData;
        }
        catch (_a) {
            // Swallow expression, the payload isn't a valid JSON document
        }
    };
    CardDesigner.prototype.monacoModuleLoaded = function (monaco) {
        var _this = this;
        if (monaco === void 0) { monaco = null; }
        if (!monaco) {
            monaco = window["monaco"];
        }
        var monacoConfiguration = {
            schemas: [
                {
                    uri: "http://adaptivecards.io/schemas/adaptive-card.json",
                    schema: adaptive_card_schema_1.adaptiveCardSchema,
                    fileMatch: ["*"],
                }
            ],
            validate: false,
            allowComments: true
        };
        // TODO: set this in our editor instead of defaults
        monaco.languages.json.jsonDefaults.setDiagnosticsOptions(monacoConfiguration);
        // Setup card JSON editor
        this._cardEditorToolbox.content = document.createElement("div");
        this._cardEditorToolbox.content.style.overflow = "hidden";
        this._cardEditor = monaco.editor.create(this._cardEditorToolbox.content, {
            folding: true,
            fontSize: 13.5,
            language: 'json',
            minimap: {
                enabled: false
            }
        });
        this._cardEditor.onDidChangeModelContent(function () {
            if (_this._cardEditorUpdateCounter == 0) {
                _this.scheduleUpdateCardFromJson();
            }
        });
        if (this._sampleDataEditorToolbox) {
            // Setup sample data JSON editor
            this._sampleDataEditorToolbox.content = document.createElement("div");
            this._sampleDataEditorToolbox.content.style.overflow = "hidden";
            this._sampleDataEditor = monaco.editor.create(this._sampleDataEditorToolbox.content, {
                folding: true,
                fontSize: 13.5,
                language: 'json',
                minimap: {
                    enabled: false
                }
            });
            this._sampleDataEditor.onDidChangeModelContent(function () {
                _this.updateSampleData();
            });
        }
        window.addEventListener('resize', function () { _this.onResize(); });
        this._isMonacoEditorLoaded = true;
        this.updateJsonEditorsLayout();
        this.updateJsonFromCard(false);
    };
    CardDesigner.prototype.updateToolbar = function () {
        this._undoButton.isEnabled = this.canUndo;
        this._redoButton.isEnabled = this.canRedo;
    };
    CardDesigner.prototype.addToUndoStack = function (payload) {
        var doAdd = true;
        if (this._undoStack.length > 0) {
            doAdd = this._undoStack[this._undoStack.length - 1] != payload;
        }
        if (doAdd) {
            var undoPayloadsToDiscard = this._undoStack.length - (this._undoStackIndex + 1);
            if (undoPayloadsToDiscard > 0) {
                this._undoStack.splice(this._undoStackIndex + 1, undoPayloadsToDiscard);
            }
            this._undoStack.push(payload);
            if (this._undoStack.length > CardDesigner.MAX_UNDO_STACK_SIZE) {
                this._undoStack.splice(0, 1);
            }
            this._undoStackIndex = this._undoStack.length - 1;
            this.updateToolbar();
        }
    };
    CardDesigner.prototype.handlePointerUp = function (e) {
        this.endDrag();
        this.designerSurface.endDrag();
    };
    CardDesigner.prototype.handlePointerMove = function (e) {
        this._currentMousePosition = { x: e.x, y: e.y };
        var isPointerOverDesigner = this.designerSurface.isPointerOver(this._currentMousePosition.x, this._currentMousePosition.y);
        var peerDropped = false;
        if (this._draggedPaletteItem && isPointerOverDesigner) {
            var peer = this._draggedPaletteItem.createPeer(this.designerSurface);
            var clientCoordinates = this.designerSurface.pageToClientCoordinates(this._currentMousePosition.x, this._currentMousePosition.y);
            if (this.designerSurface.tryDrop(clientCoordinates, peer)) {
                this.endDrag();
                this.designerSurface.startDrag(peer);
                peerDropped = true;
            }
        }
        if (!peerDropped && this._draggedElement) {
            this._draggedElement.style.left = this._currentMousePosition.x - 10 + "px";
            this._draggedElement.style.top = this._currentMousePosition.y - 10 + "px";
        }
    };
    CardDesigner.prototype.attachTo = function (root) {
        var _this = this;
        var styleSheetLinkElement = document.createElement("link");
        styleSheetLinkElement.id = "__ac-designer";
        styleSheetLinkElement.rel = "stylesheet";
        styleSheetLinkElement.type = "text/css";
        styleSheetLinkElement.href = miscellaneous_1.Utils.joinPaths(this._assetPath, "adaptivecards-designer.css");
        document.getElementsByTagName("head")[0].appendChild(styleSheetLinkElement);
        if (this._hostContainers && this._hostContainers.length > 0) {
            this._activeHostContainer = this._hostContainers[0];
        }
        else {
            this._activeHostContainer = new default_container_1.DefaultContainer("Default", "adaptivecards-defaulthost.css");
        }
        root.style.flex = "1 1 auto";
        root.style.display = "flex";
        root.style.flexDirection = "column";
        root.style.overflow = "hidden";
        root.innerHTML =
            '<div id="toolbarHost"></div>' +
                '<div class="content" style="display: flex; flex: 1 1 auto; overflow-y: hidden;">' +
                '<div id="leftCollapsedPaneTabHost" class="acd-verticalCollapsedTabContainer acd-dockedLeft" style="border-right: 1px solid #D2D2D2;"></div>' +
                '<div id="toolPalettePanel" class="acd-toolPalette-pane"></div>' +
                '<div style="display: flex; flex-direction: column; flex: 1 1 100%; overflow: hidden;">' +
                '<div style="display: flex; flex: 1 1 100%; overflow: hidden;">' +
                '<div id="cardArea" class="acd-designer-cardArea">' +
                '<div style="flex: 1 1 100%; overflow: auto;">' +
                '<div id="designerHost" style="margin: 20px 40px 20px 20px;"></div>' +
                '</div>' +
                '<div id="errorPane" class="acd-error-pane acd-hidden"></div>' +
                '</div>' +
                '<div id="treeViewPanel" class="acd-treeView-pane"></div>' +
                '<div id="propertySheetPanel" class="acd-propertySheet-pane"></div>' +
                '</div>' +
                '<div id="jsonEditorPanel" class="acd-json-editor-pane"></div>' +
                '<div id="bottomCollapsedPaneTabHost" class="acd-horizontalCollapsedTabContainer" style="border-top: 1px solid #D2D2D2;"></div>' +
                '</div>' +
                '<div id="rightCollapsedPaneTabHost" class="acd-verticalCollapsedTabContainer acd-dockedRight" style="border-left: 1px solid #D2D2D2;"></div>' +
                '</div>';
        this.toolbar.attachTo(document.getElementById("toolbarHost"));
        if (this._versionChoicePicker) {
            this._versionChoicePicker.selectedIndex = Shared.SupportedTargetVersions.indexOf(Shared.Versions.v1_2);
            this._versionChoicePicker.onChanged = function (sender) {
                _this.buildPropertySheet(_this._designerSurface.selectedPeer);
            };
        }
        if (this._copyJSONButton.isVisible) {
            new Clipboard(this._copyJSONButton.renderedElement, {
                text: function (trigger) { return JSON.stringify(_this.card.toJSON(), null, 4); }
            });
        }
        // Tool palette panel
        var toolPaletteHost = document.createElement("div");
        toolPaletteHost.className = "acd-dockedPane";
        this._toolPaletteToolbox = new tool_box_1.Toolbox("toolPalette", strings_1.Strings.toolboxes.toolPalette.title);
        this._toolPaletteToolbox.content = toolPaletteHost;
        var toolPalettePanel = new side_panel_1.SidePanel("toolPalettePanel", side_panel_1.SidePanelAlignment.Left, document.getElementById("leftCollapsedPaneTabHost"));
        toolPalettePanel.addToolbox(this._toolPaletteToolbox);
        toolPalettePanel.isResizable = false;
        toolPalettePanel.attachTo(document.getElementById("toolPalettePanel"));
        // JSON editors panel
        this._cardEditorToolbox = new tool_box_1.Toolbox("cardEditor", strings_1.Strings.toolboxes.cardEditor.title);
        this._cardEditorToolbox.content = document.createElement("div");
        this._cardEditorToolbox.content.style.padding = "8px";
        this._cardEditorToolbox.content.innerText = strings_1.Strings.loadingEditor;
        this._jsonEditorsPanel = new side_panel_1.SidePanel("jsonEditorPanel", side_panel_1.SidePanelAlignment.Bottom, document.getElementById("bottomCollapsedPaneTabHost"));
        this._jsonEditorsPanel.onResized = function (sender) {
            _this.updateJsonEditorsLayout();
        };
        this._jsonEditorsPanel.onToolboxResized = function (sender) {
            _this.updateJsonEditorsLayout();
        };
        this._jsonEditorsPanel.onToolboxExpandedOrCollapsed = function (sender) {
            _this.updateJsonEditorsLayout();
        };
        this._jsonEditorsPanel.addToolbox(this._cardEditorToolbox);
        if (Shared.GlobalSettings.enableDataBindingSupport && Shared.GlobalSettings.showSampleDataEditorToolbox) {
            this._sampleDataEditorToolbox = new tool_box_1.Toolbox("sampleDataEditor", strings_1.Strings.toolboxes.sampleDataEditor.title);
            this._sampleDataEditorToolbox.content = document.createElement("div");
            this._sampleDataEditorToolbox.content.style.padding = "8px";
            this._sampleDataEditorToolbox.content.innerText = strings_1.Strings.loadingEditor;
            this._sampleDataEditorToolbox.commands = [
                {
                    title: "Copy the structure of this data into the Data Structure toolbox",
                    iconClass: "acd-icon-dataStructure",
                    execute: function (sender) {
                        _this.dataStructure = data_1.FieldDefinition.create(JSON.parse(_this.getCurrentSampleDataEditorPayload()));
                    }
                }
            ];
            this._jsonEditorsPanel.addToolbox(this._sampleDataEditorToolbox);
        }
        this._jsonEditorsPanel.attachTo(document.getElementById("jsonEditorPanel"));
        // Property sheet panel
        var propertySheetHost = document.createElement("div");
        propertySheetHost.className = "acd-propertySheet-host";
        this._propertySheetToolbox = new tool_box_1.Toolbox("propertySheet", strings_1.Strings.toolboxes.propertySheet.title);
        this._propertySheetToolbox.content = propertySheetHost;
        var propertySheetPanel = new side_panel_1.SidePanel("propertySheetPanel", side_panel_1.SidePanelAlignment.Right, document.getElementById("rightCollapsedPaneTabHost"));
        propertySheetPanel.addToolbox(this._propertySheetToolbox);
        propertySheetPanel.onResized = function (sender) {
            _this.scheduleLayoutUpdate();
        };
        propertySheetPanel.attachTo(document.getElementById("propertySheetPanel"));
        // Tree view panel
        var treeViewHost = document.createElement("div");
        treeViewHost.className = "acd-treeView-host";
        this._treeViewToolbox = new tool_box_1.Toolbox("treeView", strings_1.Strings.toolboxes.cardStructure.title);
        this._treeViewToolbox.content = treeViewHost;
        var treeViewPanel = new side_panel_1.SidePanel("treeViewPanel", side_panel_1.SidePanelAlignment.Right, document.getElementById("rightCollapsedPaneTabHost"));
        treeViewPanel.addToolbox(this._treeViewToolbox);
        treeViewPanel.onResized = function (sender) {
            _this.scheduleLayoutUpdate();
        };
        if (Shared.GlobalSettings.enableDataBindingSupport && Shared.GlobalSettings.showDataStructureToolbox) {
            var dataExplorerHost = document.createElement("div");
            dataExplorerHost.className = "acd-treeView-host";
            this._dataToolbox = new tool_box_1.Toolbox("data", strings_1.Strings.toolboxes.dataStructure.title);
            this._dataToolbox.content = dataExplorerHost;
            treeViewPanel.addToolbox(this._dataToolbox);
        }
        treeViewPanel.attachTo(document.getElementById("treeViewPanel"));
        this._designerHostElement = document.getElementById("designerHost");
        window.addEventListener("pointermove", function (e) { _this.handlePointerMove(e); });
        window.addEventListener("resize", function () { _this.scheduleLayoutUpdate(); });
        window.addEventListener("pointerup", function (e) { _this.handlePointerUp(e); });
        this._isAttached = true;
        this.recreateDesignerSurface();
        var card = new Adaptive.AdaptiveCard();
        card.onImageLoaded = function (image) {
            _this.scheduleLayoutUpdate();
        };
        this.card = card;
    };
    CardDesigner.prototype.undo = function () {
        if (this.canUndo) {
            this._undoStackIndex--;
            var card = this._undoStack[this._undoStackIndex];
            this.setCardPayload(card, false);
            this.updateToolbar();
        }
    };
    CardDesigner.prototype.redo = function () {
        if (this._undoStackIndex < this._undoStack.length - 1) {
            this._undoStackIndex++;
            var card = this._undoStack[this._undoStackIndex];
            this.setCardPayload(card, false);
            this.updateToolbar();
        }
    };
    CardDesigner.prototype.newCard = function () {
        var card = {
            type: "AdaptiveCard",
            version: "1.0",
            body: []
        };
        this.setCardPayload(card, true);
    };
    CardDesigner.prototype.setCard = function (payload) {
        try {
            this.preventJsonUpdate = true;
            if (!this.preventCardUpdate) {
                this.designerSurface.setCardPayloadAsObject(payload);
            }
        }
        finally {
            this.preventJsonUpdate = false;
        }
        this.updateJsonFromCard();
    };
    CardDesigner.prototype.getCard = function () {
        return this.designerSurface.card.toJSON();
    };
    Object.defineProperty(CardDesigner.prototype, "currentTargetVersion", {
        get: function () {
            if (this._versionChoicePicker) {
                return Shared.SupportedTargetVersions[parseInt(this._versionChoicePicker.value)];
            }
            else {
                return Shared.Versions.latest;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "dataStructure", {
        get: function () {
            return this._dataStructure;
        },
        set: function (value) {
            this._dataStructure = value;
            this.buildDataExplorer();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "sampleData", {
        get: function () {
            return this._sampleData;
        },
        set: function (value) {
            this._sampleData = value;
            this.setSampleDataPayload(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "activeHostContainer", {
        get: function () {
            return this._activeHostContainer;
        },
        set: function (value) {
            if (this._activeHostContainer !== value) {
                this._activeHostContainer = value;
                this.activeHostContainerChanged();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "canUndo", {
        get: function () {
            return this._undoStackIndex >= 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "canRedo", {
        get: function () {
            return this._undoStackIndex < this._undoStack.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "card", {
        get: function () {
            return this._card;
        },
        set: function (value) {
            if (this._card != value) {
                if (this._card) {
                    this._card.designMode = false;
                }
                this._card = value;
                if (this._card) {
                    this._card.designMode = true;
                    this._card.hostConfig = this.activeHostContainer.getHostConfig();
                }
                this.recreateDesignerSurface();
                this.updateCardFromJson(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "designerSurface", {
        get: function () {
            return this._designerSurface;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "treeViewToolbox", {
        get: function () {
            return this._treeViewToolbox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "propertySheetToolbox", {
        get: function () {
            return this._propertySheetToolbox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "jsonEditorToolbox", {
        get: function () {
            return this._cardEditorToolbox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "toolPaletteToolbox", {
        get: function () {
            return this._toolPaletteToolbox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "dataToolbox", {
        get: function () {
            return this._dataToolbox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "assetPath", {
        get: function () {
            return this._assetPath;
        },
        set: function (value) {
            this._assetPath = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "customPaletteItems", {
        get: function () {
            return this._customPeletteItems;
        },
        set: function (value) {
            this._customPeletteItems = value;
            this.buildPalette();
        },
        enumerable: true,
        configurable: true
    });
    CardDesigner.onProcessMarkdown = null;
    CardDesigner.MAX_UNDO_STACK_SIZE = 50;
    return CardDesigner;
}());
exports.CardDesigner = CardDesigner;
(function (CardDesigner) {
    var ToolbarCommands = /** @class */ (function () {
        function ToolbarCommands() {
        }
        ToolbarCommands.FullScreen = "__fullScreenButton";
        ToolbarCommands.OpenPayload = "__openPayload";
        ToolbarCommands.HostAppPicker = "__hostAppPicker";
        ToolbarCommands.VersionPicker = "__versionPicker";
        ToolbarCommands.Undo = "__undoButton";
        ToolbarCommands.Redo = "__redoButton";
        ToolbarCommands.NewCard = "__newCardButton";
        ToolbarCommands.CopyJSON = "__copyJsonButton";
        ToolbarCommands.TogglePreview = "__togglePreviewButton";
        return ToolbarCommands;
    }());
    CardDesigner.ToolbarCommands = ToolbarCommands;
})(CardDesigner = exports.CardDesigner || (exports.CardDesigner = {}));
exports.CardDesigner = CardDesigner;
//# sourceMappingURL=card-designer.js.map
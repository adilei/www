export declare enum ToolbarElementAlignment {
    Left = 0,
    Right = 1
}
export declare abstract class ToolbarElement {
    private _renderedElement;
    protected abstract internalRender(): HTMLElement;
    protected internalUpdateLayout(): void;
    readonly id: string;
    isVisible: boolean;
    separator: boolean;
    label: string;
    alignment: ToolbarElementAlignment;
    constructor(id: string);
    updateLayout(): void;
    render(): HTMLElement;
    readonly renderedElement: HTMLElement;
}
export declare class ToolbarButton extends ToolbarElement {
    private _caption;
    private _displayCaption;
    private _iconClass;
    private _toolTip;
    private _isEnabled;
    private _allowToggle;
    private _isToggled;
    protected clicked(): void;
    protected internalUpdateLayout(): void;
    protected internalRender(): HTMLElement;
    onClick: (sender: ToolbarButton) => void;
    constructor(id: string, caption: string, iconClass: string, onClick?: (sender: ToolbarButton) => void);
    allowToggle: boolean;
    isToggled: boolean;
    caption: string;
    displayCaption: boolean;
    iconClass: string;
    toolTip: string;
    isEnabled: boolean;
}
export interface IChoicePickerItem {
    name: string;
    value: string;
}
export declare class ToolbarChoicePicker extends ToolbarElement {
    private _dropDown;
    protected internalRender(): HTMLElement;
    onChanged: (sender: ToolbarChoicePicker) => void;
    label: string;
    choices: Array<IChoicePickerItem>;
    width?: number;
    readonly value: string;
    selectedIndex: number;
}
export declare class Toolbar {
    private _elements;
    private _attachedTo;
    private createSeparatorElement;
    private renderElementsInto;
    attachTo(element: HTMLElement): void;
    addElement(element: ToolbarElement): void;
    getElementById(elementId: string): ToolbarElement;
    insertElementAfter(element: ToolbarElement, afterElementId: string): void;
    insertElementBefore(element: ToolbarElement, beforeElementId: string): void;
}

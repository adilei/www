import * as Adaptive from "adaptivecards";
import * as Designer from "./card-designer-surface";
import { HostContainer } from "./containers/host-container";
import { Toolbar } from "./toolbar";
import { CustomPaletteItem } from "./tool-palette";
import { Toolbox } from "./tool-box";
import { FieldDefinition } from "./data";
import * as Shared from "./shared";
export declare class CardDesigner {
    private static internalProcessMarkdown;
    static onProcessMarkdown: (text: string, result: Adaptive.IMarkdownProcessingResult) => void;
    private static MAX_UNDO_STACK_SIZE;
    private _isAttached;
    private _cardEditor;
    private _sampleDataEditor;
    private _hostContainers;
    private _isMonacoEditorLoaded;
    private _designerSurface;
    private _designerHostElement;
    private _draggedPaletteItem;
    private _draggedElement;
    private _currentMousePosition;
    private _card;
    private _activeHostContainer;
    private _undoStack;
    private _undoStackIndex;
    private _toolPaletteToolbox;
    private _propertySheetToolbox;
    private _treeViewToolbox;
    private _jsonEditorsPanel;
    private _cardEditorToolbox;
    private _sampleDataEditorToolbox;
    private _dataToolbox;
    private _assetPath;
    private _dataStructure;
    private _sampleData;
    private _customPeletteItems;
    private togglePreview;
    private buildTreeView;
    private setupDataTreeItemEvents;
    private buildDataExplorer;
    private buildPropertySheet;
    private addPaletteItem;
    private buildPalette;
    private endDrag;
    private renderErrorPaneElement;
    private recreateDesignerSurface;
    private activeHostContainerChanged;
    private updateToolboxLayout;
    updateJsonEditorsLayout(): void;
    private updateFullLayout;
    private jsonUpdateTimer;
    private cardUpdateTimer;
    private updateLayoutTimer;
    private preventCardUpdate;
    private cardPayloadChanged;
    private _cardEditorUpdateCounter;
    private beginCardEditorUpdate;
    private endCardEditorUpdate;
    private setCardPayload;
    private setSampleDataPayload;
    private updateJsonFromCard;
    private scheduleUpdateJsonFromCard;
    private preventJsonUpdate;
    private getCurrentCardEditorPayload;
    private getCurrentSampleDataEditorPayload;
    private updateCardFromJson;
    private scheduleUpdateCardFromJson;
    private scheduleLayoutUpdate;
    private _fullScreenHandler;
    private _fullScreenButton;
    private _hostContainerChoicePicker;
    private _versionChoicePicker;
    private _undoButton;
    private _redoButton;
    private _newCardButton;
    private _copyJSONButton;
    private _togglePreviewButton;
    private prepareToolbar;
    private onResize;
    private updateSampleData;
    monacoModuleLoaded(monaco?: any): void;
    private updateToolbar;
    private addToUndoStack;
    private handlePointerUp;
    private handlePointerMove;
    readonly toolbar: Toolbar;
    sampleCatalogueUrl: string;
    constructor(hostContainers?: Array<HostContainer>);
    attachTo(root: HTMLElement): void;
    undo(): void;
    redo(): void;
    newCard(): void;
    setCard(payload: object): void;
    getCard(): object;
    onCardPayloadChanged: (designer: CardDesigner) => void;
    onActiveHostContainerChanged: (designer: CardDesigner) => void;
    readonly currentTargetVersion: Shared.TargetVersion;
    dataStructure: FieldDefinition;
    sampleData: any;
    activeHostContainer: HostContainer;
    readonly canUndo: boolean;
    readonly canRedo: boolean;
    card: Adaptive.AdaptiveCard;
    readonly designerSurface: Designer.CardDesignerSurface;
    readonly treeViewToolbox: Toolbox;
    readonly propertySheetToolbox: Toolbox;
    readonly jsonEditorToolbox: Toolbox;
    readonly toolPaletteToolbox: Toolbox;
    readonly dataToolbox: Toolbox;
    assetPath: string;
    customPaletteItems: CustomPaletteItem[];
}
export declare module CardDesigner {
    class ToolbarCommands {
        static FullScreen: string;
        static OpenPayload: string;
        static HostAppPicker: string;
        static VersionPicker: string;
        static Undo: string;
        static Redo: string;
        static NewCard: string;
        static CopyJSON: string;
        static TogglePreview: string;
    }
}

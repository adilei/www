var ACDesigner =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/adaptivecards-designer.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../adaptivecards-controls/lib/adaptivecards-controls.js":
/*!***************************************************************!*\
  !*** ../adaptivecards-controls/lib/adaptivecards-controls.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
__export(__webpack_require__(/*! ./constants */ "../adaptivecards-controls/lib/constants.js"));
__export(__webpack_require__(/*! ./enums */ "../adaptivecards-controls/lib/enums.js"));
__export(__webpack_require__(/*! ./utils */ "../adaptivecards-controls/lib/utils.js"));
__export(__webpack_require__(/*! ./collection */ "../adaptivecards-controls/lib/collection.js"));
__export(__webpack_require__(/*! ./inputcontrol */ "../adaptivecards-controls/lib/inputcontrol.js"));
__export(__webpack_require__(/*! ./inputwithpopup */ "../adaptivecards-controls/lib/inputwithpopup.js"));
__export(__webpack_require__(/*! ./calendar */ "../adaptivecards-controls/lib/calendar.js"));
__export(__webpack_require__(/*! ./dropdown */ "../adaptivecards-controls/lib/dropdown.js"));
__export(__webpack_require__(/*! ./datepicker */ "../adaptivecards-controls/lib/datepicker.js"));
__export(__webpack_require__(/*! ./checkbox */ "../adaptivecards-controls/lib/checkbox.js"));
__export(__webpack_require__(/*! ./radiobutton */ "../adaptivecards-controls/lib/radiobutton.js"));
__export(__webpack_require__(/*! ./textbox */ "../adaptivecards-controls/lib/textbox.js"));
__export(__webpack_require__(/*! ./popupmenu */ "../adaptivecards-controls/lib/popupmenu.js"));
//# sourceMappingURL=adaptivecards-controls.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/calendar.js":
/*!*************************************************!*\
  !*** ../adaptivecards-controls/lib/calendar.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Utils = __webpack_require__(/*! ./utils */ "../adaptivecards-controls/lib/utils.js");
var Constants = __webpack_require__(/*! ./constants */ "../adaptivecards-controls/lib/constants.js");
var inputcontrol_1 = __webpack_require__(/*! ./inputcontrol */ "../adaptivecards-controls/lib/inputcontrol.js");
var DayCell = /** @class */ (function () {
    function DayCell(date) {
        this._isSubdued = false;
        this._isSelected = false;
        this.date = date;
    }
    DayCell.prototype.selected = function () {
        if (this.onSelected) {
            this.onSelected(this);
        }
    };
    DayCell.prototype.render = function () {
        var _this = this;
        this._element = document.createElement("div");
        this._element.className = "ms-ctrl ms-ctrl-calendarDay";
        this._element.innerText = this.date.getDate().toString();
        this._element.tabIndex = 0;
        this._element.onclick = function (e) { _this.selected(); };
        this._element.onkeydown = function (e) {
            if (e.keyCode == Constants.KEY_ENTER) {
                _this.selected();
                return false;
            }
        };
        return this._element;
    };
    DayCell.prototype.focus = function () {
        this._element.focus();
    };
    Object.defineProperty(DayCell.prototype, "isSubdued", {
        get: function () {
            return this._isSubdued;
        },
        set: function (value) {
            this._isSubdued = value;
            if (this._isSubdued) {
                this._element.classList.add("subdued");
            }
            else {
                this._element.classList.remove("subdued");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DayCell.prototype, "isSelected", {
        get: function () {
            return this._isSelected;
        },
        set: function (value) {
            this._isSelected = value;
            if (this._isSelected) {
                this._element.classList.add("selected");
            }
            else {
                this._element.classList.remove("selected");
            }
        },
        enumerable: true,
        configurable: true
    });
    return DayCell;
}());
exports.DayCell = DayCell;
var Calendar = /** @class */ (function (_super) {
    __extends(Calendar, _super);
    function Calendar() {
        var _this = _super.call(this) || this;
        _this._selectedDay = null;
        _this._miniCalendarElement = document.createElement("table");
        _this._miniCalendarElement.className = "ms-ctrl ms-ctrl-slide";
        _this._miniCalendarElement.cellPadding = "0px";
        _this._miniCalendarElement.cellSpacing = "0px";
        var miniCalendarHeader = document.createElement("div");
        miniCalendarHeader.className = "ms-ctrl ms-ctrl-calendarHeader";
        miniCalendarHeader.style.display = "flex";
        _this._monthYearLabelElement = document.createElement("div");
        _this._monthYearLabelElement.style.flex = "1 1 100%";
        miniCalendarHeader.appendChild(_this._monthYearLabelElement);
        var navButtons = document.createElement("div");
        navButtons.style.flex = "0 0 auto";
        var button = document.createElement("i");
        button.className = "ms-icon ms-ctrl-calendarNavButton ms-icon-chevronLeft";
        button.tabIndex = 0;
        button.onclick = function (e) {
            _this.date = Utils.addMonths(_this.date, -1);
        };
        button.onkeydown = function (e) {
            if (e.keyCode == Constants.KEY_ENTER) {
                _this.date = Utils.addMonths(_this.date, -1);
                return false;
            }
        };
        navButtons.appendChild(button);
        button = document.createElement("i");
        button.className = "ms-icon ms-ctrl-calendarNavButton ms-icon-chevronRight";
        button.tabIndex = 0;
        button.onclick = function (e) {
            _this.date = Utils.addMonths(_this.date, 1);
        };
        button.onkeydown = function (e) {
            if (e.keyCode == Constants.KEY_ENTER) {
                _this.date = Utils.addMonths(_this.date, 1);
                return false;
            }
        };
        navButtons.appendChild(button);
        miniCalendarHeader.appendChild(navButtons);
        _this._rootContainerElement = document.createElement("div");
        _this._rootContainerElement.className = "ms-ctrl ms-ctrl-calendar";
        _this._rootContainerElement.appendChild(miniCalendarHeader);
        _this._rootContainerElement.appendChild(_this._miniCalendarElement);
        _this.date = new Date();
        return _this;
    }
    Calendar.prototype.generateDayCells = function (baseDate) {
        var _this = this;
        this._days = [];
        var inputMonth = baseDate.getMonth();
        var inputYear = baseDate.getFullYear();
        var start = new Date(inputYear, inputMonth, 1);
        var end = new Date(inputYear, inputMonth, Utils.daysInMonth(inputYear, inputMonth));
        var startDateDayOfWeek = start.getDay();
        if ((startDateDayOfWeek - Utils.CalendarSettings.firstDayOfWeek) > 0) {
            start = Utils.addDays(start, Utils.CalendarSettings.firstDayOfWeek - startDateDayOfWeek);
        }
        var endDateDayOfWeek = end.getDay();
        var lastDayOfWeek = Utils.CalendarSettings.firstDayOfWeek + 6;
        if ((lastDayOfWeek - endDateDayOfWeek) > 0) {
            end = Utils.addDays(end, lastDayOfWeek - endDateDayOfWeek);
        }
        var endDate = end.getDate();
        var endMonth = end.getMonth();
        var endYear = end.getFullYear();
        do {
            var dayCell = new DayCell(start);
            dayCell.onSelected = function (clickedCell) {
                _this.selectedDayCell = clickedCell;
                if (_this.onDateChanged) {
                    _this.onDateChanged(_this);
                }
            };
            this._days.push(dayCell);
            var done = start.getDate() == endDate && start.getMonth() == endMonth && start.getFullYear() == endYear;
            start = Utils.addDays(start, 1);
        } while (!done);
    };
    Object.defineProperty(Calendar.prototype, "selectedDayCell", {
        get: function () {
            return this._selectedDay;
        },
        set: function (value) {
            if (this._selectedDay) {
                this._selectedDay.isSelected = false;
            }
            this._selectedDay = value;
            if (this._selectedDay) {
                this._selectedDay.isSelected = true;
                this._date = this._selectedDay.date;
            }
        },
        enumerable: true,
        configurable: true
    });
    Calendar.prototype.initializeSelection = function () {
        if (this._date) {
            for (var i = 0; i < this._days.length; i++) {
                if (Utils.areDatesEqual(this._days[i].date, this.date)) {
                    this.selectedDayCell = this._days[i];
                    break;
                }
            }
        }
    };
    Calendar.prototype.rebuildMiniCalendar = function (newDate, oldDate) {
        this.generateDayCells(newDate);
        var month = newDate.getMonth();
        this._miniCalendarElement.innerHTML = "";
        this._miniCalendarElement.classList.remove("ms-ctrl-slide", "ms-ctrl-slideLeftToRight", "ms-ctrl-slideRightToLeft");
        var row = document.createElement("tr");
        var dayIndex = Utils.CalendarSettings.firstDayOfWeek;
        for (var i = 0; i < Utils.CalendarSettings.daysInWeek; i++) {
            var cell = document.createElement("td");
            cell.className = "ms-ctrl ms-ctrl-calendarDayHeader";
            cell.innerText = Utils.CalendarSettings.getInitialDayName(dayIndex);
            row.appendChild(cell);
            dayIndex++;
            if (dayIndex >= Utils.CalendarSettings.daysInWeek) {
                dayIndex = 0;
            }
        }
        this._miniCalendarElement.appendChild(row);
        for (var i = 0; i < this._days.length; i++) {
            if (i % 7 == 0) {
                row = document.createElement("tr");
                this._miniCalendarElement.appendChild(row);
            }
            var tableCell = document.createElement("td");
            tableCell.appendChild(this._days[i].render());
            if (this._days[i].date.getMonth() != month) {
                this._days[i].isSubdued = true;
            }
            row.appendChild(tableCell);
        }
        if (oldDate) {
            var timeDelta = newDate.getTime() - oldDate.getTime();
            if (timeDelta > 0) {
                this._miniCalendarElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideRightToLeft");
            }
            else if (timeDelta < 0) {
                this._miniCalendarElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideLeftToRight");
            }
        }
    };
    Calendar.prototype.attach = function (rootElement) {
        _super.prototype.attach.call(this, rootElement);
        rootElement.innerHTML = "";
        rootElement.appendChild(this._rootContainerElement);
    };
    Calendar.prototype.focus = function () {
        if (this._selectedDay) {
            this._selectedDay.focus();
        }
    };
    Object.defineProperty(Calendar.prototype, "date", {
        get: function () {
            return this._date;
        },
        set: function (value) {
            var rebuildNeeded = true;
            var timeDelta = 0;
            var newDate = value ? value : new Date();
            if (this._date) {
                rebuildNeeded = !this._days || newDate.getFullYear() != this._date.getFullYear() || newDate.getMonth() != this._date.getMonth();
            }
            if (rebuildNeeded) {
                this.rebuildMiniCalendar(newDate, this._date);
            }
            this._date = newDate;
            this.initializeSelection();
            this._monthYearLabelElement.innerText = Utils.CalendarSettings.getLongMonthName(this._date.getMonth()) + " " + this._date.getFullYear();
        },
        enumerable: true,
        configurable: true
    });
    return Calendar;
}(inputcontrol_1.InputControl));
exports.Calendar = Calendar;
//# sourceMappingURL=calendar.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/checkbox.js":
/*!*************************************************!*\
  !*** ../adaptivecards-controls/lib/checkbox.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Constants = __webpack_require__(/*! ./constants */ "../adaptivecards-controls/lib/constants.js");
var inputcontrol_1 = __webpack_require__(/*! ./inputcontrol */ "../adaptivecards-controls/lib/inputcontrol.js");
var CheckBox = /** @class */ (function (_super) {
    __extends(CheckBox, _super);
    function CheckBox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._label = "";
        _this._checkboxElement = null;
        _this._spanElement = null;
        return _this;
    }
    CheckBox.createId = function () {
        var result = CheckBox.creationIndex;
        CheckBox.creationIndex++;
        return result;
    };
    CheckBox.prototype.changed = function () {
        if (this.onChange) {
            this.onChange(this);
        }
    };
    CheckBox.prototype.keyDown = function (e) {
        switch (e.keyCode) {
            case Constants.KEY_ENTER:
                this.isChecked = !this.isChecked;
                break;
        }
    };
    CheckBox.prototype.attach = function (rootElement) {
        var _this = this;
        _super.prototype.attach.call(this, rootElement);
        rootElement.className = "ms-ctrl ms-ctrl-checkbox";
        rootElement.tabIndex = 0;
        var labelAttribute = rootElement.attributes["label"];
        if (labelAttribute) {
            this._label = labelAttribute.value;
        }
        var isCheckedAttribute = rootElement.attributes["ischecked"];
        if (isCheckedAttribute) {
            this._isChecked = isCheckedAttribute.value === "true";
        }
        this._checkboxElement = document.createElement("input");
        this._checkboxElement.id = "ms-ctrl-checkbox-" + CheckBox.createId();
        this._checkboxElement.type = "checkbox";
        this._checkboxElement.style.position = "absolute";
        this._checkboxElement.checked = this.isChecked;
        this._checkboxElement.onchange = function (e) { _this.changed(); };
        var labelElement = document.createElement("label");
        labelElement.htmlFor = this._checkboxElement.id;
        this._spanElement = document.createElement("span");
        this._spanElement.innerText = this._label;
        labelElement.appendChild(this._spanElement);
        rootElement.innerHTML = "";
        rootElement.appendChild(this._checkboxElement);
        rootElement.appendChild(labelElement);
    };
    Object.defineProperty(CheckBox.prototype, "label", {
        get: function () {
            return this._label;
        },
        set: function (value) {
            this._label = value;
            if (this._spanElement) {
                this._spanElement.innerText = this._label;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckBox.prototype, "isChecked", {
        get: function () {
            return this._isChecked;
        },
        set: function (value) {
            if (this._isChecked != value) {
                this._isChecked = value;
                if (this._checkboxElement) {
                    this._checkboxElement.checked = this._isChecked;
                }
                this.changed();
            }
        },
        enumerable: true,
        configurable: true
    });
    // Used to generate unique Ids
    CheckBox.creationIndex = 0;
    return CheckBox;
}(inputcontrol_1.InputControl));
exports.CheckBox = CheckBox;
//# sourceMappingURL=checkbox.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/collection.js":
/*!***************************************************!*\
  !*** ../adaptivecards-controls/lib/collection.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Collection = /** @class */ (function () {
    function Collection() {
        this._items = [];
        this.onItemAdded = null;
        this.onItemRemoved = null;
    }
    Collection.prototype.get = function (index) {
        return this._items[index];
    };
    Collection.prototype.add = function (item) {
        this._items.push(item);
        if (this.onItemAdded) {
            this.onItemAdded(item);
        }
    };
    Collection.prototype.remove = function (item) {
        var i = this._items.indexOf(item);
        if (i >= 0) {
            this._items = this._items.splice(i, 1);
            if (this.onItemRemoved) {
                this.onItemRemoved(item);
            }
        }
    };
    Collection.prototype.indexOf = function (item) {
        return this._items.indexOf(item);
    };
    Object.defineProperty(Collection.prototype, "length", {
        get: function () {
            return this._items.length;
        },
        enumerable: true,
        configurable: true
    });
    return Collection;
}());
exports.Collection = Collection;
//# sourceMappingURL=collection.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/constants.js":
/*!**************************************************!*\
  !*** ../adaptivecards-controls/lib/constants.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
exports.KEY_TAB = 9;
exports.KEY_ENTER = 13;
exports.KEY_ESCAPE = 27;
exports.KEY_UP = 38;
exports.KEY_DOWN = 40;
exports.KEY_DELETE = 46;
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/datepicker.js":
/*!***************************************************!*\
  !*** ../adaptivecards-controls/lib/datepicker.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var inputwithpopup_1 = __webpack_require__(/*! ./inputwithpopup */ "../adaptivecards-controls/lib/inputwithpopup.js");
var calendar_1 = __webpack_require__(/*! ./calendar */ "../adaptivecards-controls/lib/calendar.js");
var CalendarPopupControl = /** @class */ (function (_super) {
    __extends(CalendarPopupControl, _super);
    function CalendarPopupControl(owner) {
        var _this = _super.call(this) || this;
        _this._owner = owner;
        return _this;
    }
    CalendarPopupControl.prototype.renderContent = function () {
        var _this = this;
        var element = document.createElement("div");
        element.className = "ms-ctrl ms-calendarPopup";
        this._calendar = new calendar_1.Calendar();
        this._calendar.date = this._owner.value;
        this._calendar.onDateChanged = function (c) {
            _this._owner.value = c.date;
            _this.close();
        };
        this._calendar.attach(element);
        return element;
    };
    CalendarPopupControl.prototype.focus = function () {
        if (this._calendar) {
            this._calendar.focus();
        }
    };
    return CalendarPopupControl;
}(inputwithpopup_1.PopupControl));
exports.CalendarPopupControl = CalendarPopupControl;
var DatePicker = /** @class */ (function (_super) {
    __extends(DatePicker, _super);
    function DatePicker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DatePicker.prototype.validateRootElement = function (rootElement) {
        if (!(rootElement instanceof HTMLDivElement)) {
            throw new Error("DatePicker requires a DIV element as its root.");
        }
    };
    DatePicker.prototype.createPopupControl = function () {
        return new CalendarPopupControl(this);
    };
    DatePicker.prototype.getValueAsString = function () {
        return this.value.toLocaleDateString();
    };
    DatePicker.prototype.getCssClassName = function () {
        return "ms-ctrl ms-ctrl-datePicker";
    };
    DatePicker.prototype.getButtonIconCssClassName = function () {
        return "ms-icon-calendar";
    };
    DatePicker.prototype.popup = function () {
        _super.prototype.popup.call(this);
        if (this.isOpen) {
            this.popupControl.focus();
        }
    };
    return DatePicker;
}(inputwithpopup_1.InputWithPopup));
exports.DatePicker = DatePicker;
//# sourceMappingURL=datepicker.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/dropdown.js":
/*!*************************************************!*\
  !*** ../adaptivecards-controls/lib/dropdown.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Constants = __webpack_require__(/*! ./constants */ "../adaptivecards-controls/lib/constants.js");
var collection_1 = __webpack_require__(/*! ./collection */ "../adaptivecards-controls/lib/collection.js");
var inputwithpopup_1 = __webpack_require__(/*! ./inputwithpopup */ "../adaptivecards-controls/lib/inputwithpopup.js");
var DropDownItem = /** @class */ (function () {
    function DropDownItem(key, value) {
        this.key = key;
        this._value = value;
    }
    DropDownItem.prototype.click = function () {
        if (this.onClick) {
            this.onClick(this);
        }
    };
    DropDownItem.prototype.toString = function () {
        return this.value;
    };
    DropDownItem.prototype.render = function () {
        var _this = this;
        if (!this._element) {
            this._element = document.createElement("span");
            this._element.className = "ms-ctrl ms-ctrl-dropdown-item";
            this._element.innerText = this.value;
            this._element.onmouseup = function (e) { _this.click(); };
        }
        return this._element;
    };
    Object.defineProperty(DropDownItem.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (newValue) {
            this._value = newValue;
            if (this._element) {
                this._element.innerText = newValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    return DropDownItem;
}());
exports.DropDownItem = DropDownItem;
var DropDownPopupControl = /** @class */ (function (_super) {
    __extends(DropDownPopupControl, _super);
    function DropDownPopupControl(owner) {
        var _this = _super.call(this) || this;
        _this._renderedItems = [];
        _this._selectedIndex = -1;
        _this._owner = owner;
        return _this;
    }
    DropDownPopupControl.prototype.renderContent = function () {
        var element = document.createElement("div");
        element.className = "ms-ctrl ms-popup";
        var selectedIndex = this._owner.selectedIndex;
        for (var i = 0; i < this._owner.items.length; i++) {
            var renderedItem = this._owner.items.get(i).render();
            renderedItem.tabIndex = 0;
            element.appendChild(renderedItem);
            if (i == selectedIndex) {
                renderedItem.focus();
            }
            this._renderedItems.push(renderedItem);
        }
        return element;
    };
    DropDownPopupControl.prototype.keyDown = function (e) {
        _super.prototype.keyDown.call(this, e);
        var selectedItemIndex = this._selectedIndex;
        switch (e.keyCode) {
            case Constants.KEY_TAB:
                this.close();
                break;
            case Constants.KEY_ENTER:
                if (this.selectedIndex >= 0) {
                    this._owner.selectedIndex = this.selectedIndex;
                    this.close();
                }
                break;
            case Constants.KEY_UP:
                if (selectedItemIndex <= 0) {
                    selectedItemIndex = this._renderedItems.length - 1;
                }
                else {
                    selectedItemIndex--;
                    if (selectedItemIndex < 0) {
                        selectedItemIndex = this._renderedItems.length - 1;
                    }
                }
                this.selectedIndex = selectedItemIndex;
                e.cancelBubble = true;
                break;
            case Constants.KEY_DOWN:
                if (selectedItemIndex < 0) {
                    selectedItemIndex = 0;
                }
                else {
                    selectedItemIndex++;
                    if (selectedItemIndex >= this._renderedItems.length) {
                        selectedItemIndex = 0;
                    }
                }
                this.selectedIndex = selectedItemIndex;
                e.cancelBubble = true;
                break;
        }
    };
    DropDownPopupControl.prototype.render = function (rootElementBounds) {
        var renderedElement = _super.prototype.render.call(this, rootElementBounds);
        renderedElement.style.minWidth = (rootElementBounds.width / 2) + "px";
        renderedElement.style.maxWidth = rootElementBounds.width + "px";
        return renderedElement;
    };
    Object.defineProperty(DropDownPopupControl.prototype, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (index) {
            if (index >= 0 && index < this._renderedItems.length) {
                this._renderedItems[index].focus();
                this._selectedIndex = index;
            }
        },
        enumerable: true,
        configurable: true
    });
    return DropDownPopupControl;
}(inputwithpopup_1.PopupControl));
exports.DropDownPopupControl = DropDownPopupControl;
var DropDown = /** @class */ (function (_super) {
    __extends(DropDown, _super);
    function DropDown() {
        var _this = _super.call(this) || this;
        _this._items = new collection_1.Collection();
        _this._items.onItemAdded = function (item) { item.onClick = function (clickedItem) { _this.itemClicked(clickedItem); }; };
        _this._items.onItemRemoved = function (item) { item.onClick = null; };
        return _this;
    }
    DropDown.prototype.itemClicked = function (item) {
        this.selectedItem = item;
        this.closePopup();
        this.rootElement.focus();
    };
    DropDown.prototype.validateRootElement = function (rootElement) {
        if (!(rootElement instanceof HTMLDivElement)) {
            throw new Error("DropDown requires a DIV element as its root.");
        }
    };
    DropDown.prototype.createPopupControl = function () {
        return new DropDownPopupControl(this);
    };
    DropDown.prototype.getCssClassName = function () {
        return "ms-ctrl ms-ctrl-dropdown";
    };
    DropDown.prototype.attach = function (rootElement) {
        _super.prototype.attach.call(this, rootElement);
        for (var i = 0; i < this.rootElement.children.length; i++) {
            var childElement = this.rootElement.children[i];
            if (childElement.tagName.toLowerCase() == "ms-dropdown-item") {
                var item = new DropDownItem(childElement.attributes.getNamedItem("key").value, childElement.attributes.getNamedItem("value").value);
                this._items.add(item);
            }
        }
    };
    DropDown.prototype.popup = function () {
        _super.prototype.popup.call(this);
        this.popupControl.selectedIndex = this.selectedIndex;
    };
    Object.defineProperty(DropDown.prototype, "items", {
        get: function () {
            return this._items;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDown.prototype, "selectedItem", {
        get: function () {
            return this.value;
        },
        set: function (newValue) {
            this.value = newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DropDown.prototype, "selectedIndex", {
        get: function () {
            return this.items.indexOf(this.value);
        },
        set: function (index) {
            if (index >= 0 && this.items.length > index) {
                this.selectedItem = this.items.get(index);
            }
        },
        enumerable: true,
        configurable: true
    });
    return DropDown;
}(inputwithpopup_1.InputWithPopup));
exports.DropDown = DropDown;
//# sourceMappingURL=dropdown.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/enums.js":
/*!**********************************************!*\
  !*** ../adaptivecards-controls/lib/enums.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var DayOfWeek;
(function (DayOfWeek) {
    DayOfWeek[DayOfWeek["Sunday"] = 0] = "Sunday";
    DayOfWeek[DayOfWeek["Monday"] = 1] = "Monday";
    DayOfWeek[DayOfWeek["Tuesday"] = 2] = "Tuesday";
    DayOfWeek[DayOfWeek["Wednesday"] = 3] = "Wednesday";
    DayOfWeek[DayOfWeek["Thursday"] = 4] = "Thursday";
    DayOfWeek[DayOfWeek["Friday"] = 5] = "Friday";
    DayOfWeek[DayOfWeek["Saturday"] = 6] = "Saturday";
})(DayOfWeek = exports.DayOfWeek || (exports.DayOfWeek = {}));
//# sourceMappingURL=enums.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/inputcontrol.js":
/*!*****************************************************!*\
  !*** ../adaptivecards-controls/lib/inputcontrol.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var InputControl = /** @class */ (function () {
    function InputControl() {
    }
    InputControl.prototype.validateRootElement = function (rootElement) {
        // Do nothing - all root element types are valid.
    };
    InputControl.prototype.keyDown = function (e) {
        // Do nothing in base implementation
    };
    Object.defineProperty(InputControl.prototype, "rootElement", {
        get: function () {
            return this._rootElement;
        },
        enumerable: true,
        configurable: true
    });
    InputControl.prototype.attach = function (rootElement) {
        var _this = this;
        this.validateRootElement(rootElement);
        this._rootElement = rootElement;
        this._rootElement.onkeydown = function (e) { _this.keyDown(e); };
    };
    return InputControl;
}());
exports.InputControl = InputControl;
//# sourceMappingURL=inputcontrol.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/inputwithpopup.js":
/*!*******************************************************!*\
  !*** ../adaptivecards-controls/lib/inputwithpopup.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Constants = __webpack_require__(/*! ./constants */ "../adaptivecards-controls/lib/constants.js");
var Utils = __webpack_require__(/*! ./utils */ "../adaptivecards-controls/lib/utils.js");
var inputcontrol_1 = __webpack_require__(/*! ./inputcontrol */ "../adaptivecards-controls/lib/inputcontrol.js");
var PopupControl = /** @class */ (function () {
    function PopupControl() {
    }
    PopupControl.prototype.close = function () {
        if (this.onClose) {
            this.onClose(this);
        }
    };
    PopupControl.prototype.keyDown = function (e) {
        switch (e.keyCode) {
            case Constants.KEY_ESCAPE:
                this.close();
                break;
        }
    };
    PopupControl.prototype.render = function (rootElementBounds) {
        var _this = this;
        this._popupElement = document.createElement("div");
        this._popupElement.tabIndex = 0;
        this._popupElement.className = "ms-ctrl ms-ctrl-popup-container";
        this._popupElement.onkeydown = function (e) {
            _this.keyDown(e);
            return !e.cancelBubble;
        };
        this._popupElement.appendChild(this.renderContent());
        return this._popupElement;
    };
    PopupControl.prototype.focus = function () {
        if (this._popupElement) {
            this._popupElement.firstElementChild.focus();
        }
    };
    return PopupControl;
}());
exports.PopupControl = PopupControl;
var InputWithPopup = /** @class */ (function (_super) {
    __extends(InputWithPopup, _super);
    function InputWithPopup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InputWithPopup.prototype.keyDown = function (e) {
        switch (e.keyCode) {
            case Constants.KEY_ENTER:
                this.popup();
                break;
        }
    };
    InputWithPopup.prototype.updateLabel = function () {
        if (this._labelElement) {
            if (this._value) {
                this._labelElement.innerHTML = this.getValueAsString();
                this._labelElement.classList.remove("placeholder");
            }
            else {
                this._labelElement.innerText = this._placeholderText ? this._placeholderText : "";
                this._labelElement.classList.add("placeholder");
            }
        }
    };
    Object.defineProperty(InputWithPopup.prototype, "popupControl", {
        get: function () {
            return this._popupControl;
        },
        enumerable: true,
        configurable: true
    });
    InputWithPopup.prototype.getButtonIconCssClassName = function () {
        return "ms-icon-chevronDown";
    };
    InputWithPopup.prototype.getValueAsString = function () {
        return this._value.toString();
    };
    InputWithPopup.prototype.valueChanged = function () {
        if (this.onValueChanged) {
            this.onValueChanged(this);
        }
    };
    InputWithPopup.prototype.attach = function (rootElement) {
        var _this = this;
        _super.prototype.attach.call(this, rootElement);
        rootElement.tabIndex = 0;
        rootElement.className = this.getCssClassName();
        window.addEventListener("resize", function (e) { _this.closePopup(); });
        this.rootElement.onclick = function (e) {
            if (_this._isOpen) {
                _this.closePopup();
            }
            else {
                _this.popup();
            }
        };
        var placeHolderDomItem = this.rootElement.attributes.getNamedItem("placeholder");
        if (placeHolderDomItem) {
            this._placeholderText = placeHolderDomItem.value;
        }
        this._labelElement = document.createElement("span");
        this._labelElement.className = "ms-ctrl ms-dropdown-label";
        this._dropDownButtonElement = document.createElement("i");
        this._dropDownButtonElement.className = "ms-icon ms-ctrl-dropdown-button " + this.getButtonIconCssClassName();
        ;
        this.rootElement.appendChild(this._labelElement);
        this.rootElement.appendChild(this._dropDownButtonElement);
        this.updateLabel();
    };
    InputWithPopup.prototype.popup = function () {
        var _this = this;
        if (!this._isOpen) {
            this._overlayElement = document.createElement("div");
            this._overlayElement.className = "ms-ctrl-overlay";
            this._overlayElement.tabIndex = 0;
            this._overlayElement.style.width = document.documentElement.scrollWidth + "px";
            this._overlayElement.style.height = document.documentElement.scrollHeight + "px";
            this._overlayElement.onfocus = function (e) { _this.closePopup(); };
            document.body.appendChild(this._overlayElement);
            this._popupControl = this.createPopupControl();
            this._popupControl.onClose = function (sender) {
                _this.closePopup();
                _this.rootElement.focus();
            };
            var rootElementBounds = this.rootElement.getBoundingClientRect();
            this._popupControlElement = this._popupControl.render(rootElementBounds);
            this._popupControlElement.classList.remove("ms-ctrl-slide", "ms-ctrl-slideLeftToRight", "ms-ctrl-slideRightToLeft", "ms-ctrl-slideTopToBottom", "ms-ctrl-slideRightToLeft");
            this._overlayElement.appendChild(this._popupControlElement);
            var popupElementBounds = this._popupControlElement.getBoundingClientRect();
            var availableSpaceBelow = window.innerHeight - rootElementBounds.bottom;
            var availableSpaceAbove = rootElementBounds.top;
            var left = rootElementBounds.left + Utils.getScrollX();
            var top;
            if (availableSpaceAbove < popupElementBounds.height && availableSpaceBelow < popupElementBounds.height) {
                // Not enough space above or below root element
                var actualPopupHeight = Math.min(popupElementBounds.height, window.innerHeight);
                this._popupControlElement.style.maxHeight = actualPopupHeight + "px";
                if (actualPopupHeight < popupElementBounds.height) {
                    top = Utils.getScrollY();
                }
                else {
                    top = Utils.getScrollY() + rootElementBounds.top + (rootElementBounds.height - actualPopupHeight) / 2;
                }
                var availableSpaceRight = window.innerWidth - rootElementBounds.right;
                var availableSpaceLeft = rootElementBounds.left;
                if (availableSpaceLeft < popupElementBounds.width && availableSpaceRight < popupElementBounds.width) {
                    // Not enough space left or right of root element
                    var actualPopupWidth = Math.min(popupElementBounds.width, window.innerWidth);
                    this._popupControlElement.style.maxWidth = actualPopupWidth + "px";
                    if (actualPopupWidth < popupElementBounds.width) {
                        left = Utils.getScrollX();
                    }
                    else {
                        left = Utils.getScrollX() + rootElementBounds.left + (rootElementBounds.width - actualPopupWidth) / 2;
                    }
                }
                else {
                    // Enough space on the left or right of the root element
                    if (availableSpaceRight >= popupElementBounds.width) {
                        left = Utils.getScrollX() + rootElementBounds.right;
                        this._popupControlElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideLeftToRight");
                    }
                    else {
                        left = Utils.getScrollX() + rootElementBounds.left - popupElementBounds.width;
                        this._popupControlElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideRightToLeft");
                    }
                }
            }
            else {
                // Enough space above or below root element
                if (availableSpaceBelow >= popupElementBounds.height) {
                    top = Utils.getScrollY() + rootElementBounds.bottom;
                    this._popupControlElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideTopToBottom");
                }
                else {
                    top = Utils.getScrollY() + rootElementBounds.top - popupElementBounds.height;
                    this._popupControlElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideBottomToTop");
                }
            }
            this._popupControlElement.style.left = left + "px";
            this._popupControlElement.style.top = top + "px";
            this._popupControlElement.focus();
            this._isOpen = true;
        }
    };
    InputWithPopup.prototype.closePopup = function () {
        if (this._isOpen) {
            document.body.removeChild(this._overlayElement);
            this._isOpen = false;
        }
    };
    Object.defineProperty(InputWithPopup.prototype, "isOpen", {
        get: function () {
            return this._isOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputWithPopup.prototype, "placeholderText", {
        get: function () {
            return this._placeholderText;
        },
        set: function (value) {
            this._placeholderText = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputWithPopup.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (newValue) {
            if (this._value != newValue) {
                this._value = newValue;
                this.updateLabel();
                this.valueChanged();
            }
        },
        enumerable: true,
        configurable: true
    });
    return InputWithPopup;
}(inputcontrol_1.InputControl));
exports.InputWithPopup = InputWithPopup;
//# sourceMappingURL=inputwithpopup.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/popupmenu.js":
/*!**************************************************!*\
  !*** ../adaptivecards-controls/lib/popupmenu.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Utils = __webpack_require__(/*! ./utils */ "../adaptivecards-controls/lib/utils.js");
var Constants = __webpack_require__(/*! ./constants */ "../adaptivecards-controls/lib/constants.js");
var collection_1 = __webpack_require__(/*! ./collection */ "../adaptivecards-controls/lib/collection.js");
var inputwithpopup_1 = __webpack_require__(/*! ./inputwithpopup */ "../adaptivecards-controls/lib/inputwithpopup.js");
var PopupMenu = /** @class */ (function (_super) {
    __extends(PopupMenu, _super);
    function PopupMenu() {
        var _this = _super.call(this) || this;
        _this._items = new collection_1.Collection();
        _this._renderedItems = [];
        _this._selectedIndex = -1;
        return _this;
    }
    PopupMenu.prototype.renderContent = function () {
        var element = document.createElement("div");
        element.className = "ms-ctrl ms-popup";
        for (var i = 0; i < this._items.length; i++) {
            var renderedItem = this._items.get(i).render();
            renderedItem.tabIndex = 0;
            element.appendChild(renderedItem);
            if (i == this.selectedIndex) {
                renderedItem.focus();
            }
            this._renderedItems.push(renderedItem);
        }
        return element;
    };
    PopupMenu.prototype.keyDown = function (e) {
        _super.prototype.keyDown.call(this, e);
        var selectedItemIndex = this._selectedIndex;
        switch (e.keyCode) {
            case Constants.KEY_TAB:
                this.close();
                break;
            /*
            case Constants.KEY_ENTER:
                if (this.selectedIndex >= 0) {
                    this.selectedIndex = this.selectedIndex;

                    this.close();
                }

                break;
            */
            case Constants.KEY_UP:
                if (selectedItemIndex <= 0) {
                    selectedItemIndex = this._renderedItems.length - 1;
                }
                else {
                    selectedItemIndex--;
                    if (selectedItemIndex < 0) {
                        selectedItemIndex = this._renderedItems.length - 1;
                    }
                }
                this.selectedIndex = selectedItemIndex;
                e.cancelBubble = true;
                break;
            case Constants.KEY_DOWN:
                if (selectedItemIndex < 0) {
                    selectedItemIndex = 0;
                }
                else {
                    selectedItemIndex++;
                    if (selectedItemIndex >= this._renderedItems.length) {
                        selectedItemIndex = 0;
                    }
                }
                this.selectedIndex = selectedItemIndex;
                e.cancelBubble = true;
                break;
        }
    };
    PopupMenu.prototype.popup = function (rootElement) {
        var _this = this;
        if (!this._isOpen) {
            this._overlayElement = document.createElement("div");
            this._overlayElement.className = "ms-ctrl-overlay";
            this._overlayElement.tabIndex = 0;
            this._overlayElement.style.width = document.documentElement.scrollWidth + "px";
            this._overlayElement.style.height = document.documentElement.scrollHeight + "px";
            this._overlayElement.onfocus = function (e) { _this.closePopup(); };
            document.body.appendChild(this._overlayElement);
            var rootElementBounds = rootElement.getBoundingClientRect();
            this._popupControlElement = this.render(rootElementBounds);
            this._popupControlElement.classList.remove("ms-ctrl-slide", "ms-ctrl-slideLeftToRight", "ms-ctrl-slideRightToLeft", "ms-ctrl-slideTopToBottom", "ms-ctrl-slideRightToLeft");
            this._overlayElement.appendChild(this._popupControlElement);
            var popupElementBounds = this._popupControlElement.getBoundingClientRect();
            var availableSpaceBelow = window.innerHeight - rootElementBounds.bottom;
            var availableSpaceAbove = rootElementBounds.top;
            var left = rootElementBounds.left + Utils.getScrollX();
            var top;
            if (availableSpaceAbove < popupElementBounds.height && availableSpaceBelow < popupElementBounds.height) {
                // Not enough space above or below root element
                var maxPopupHeight = window.innerHeight;
                this._popupControlElement.style.maxHeight = maxPopupHeight + "px";
                if (maxPopupHeight < popupElementBounds.height) {
                    top = Utils.getScrollY();
                }
                else {
                    top = Utils.getScrollY() + rootElementBounds.top + (rootElementBounds.height - maxPopupHeight) / 2;
                }
                var availableSpaceRight = window.innerWidth - rootElementBounds.right;
                var availableSpaceLeft = rootElementBounds.left;
                if (availableSpaceLeft < popupElementBounds.width && availableSpaceRight < popupElementBounds.width) {
                    // Not enough space left or right of root element
                    var maxPopupWidth = window.innerWidth;
                    this._popupControlElement.style.maxWidth = maxPopupWidth + "px";
                    if (maxPopupWidth < popupElementBounds.width) {
                        left = Utils.getScrollX();
                    }
                    else {
                        left = Utils.getScrollX() + rootElementBounds.left + (rootElementBounds.width - maxPopupWidth) / 2;
                    }
                }
                else {
                    // Enough space on the left or right of the root element
                    if (availableSpaceRight >= popupElementBounds.width) {
                        left = Utils.getScrollX() + rootElementBounds.right;
                        this._popupControlElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideLeftToRight");
                    }
                    else {
                        left = Utils.getScrollX() + rootElementBounds.left - popupElementBounds.width;
                        this._popupControlElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideRightToLeft");
                    }
                }
            }
            else {
                // Enough space above or below root element
                if (availableSpaceBelow >= popupElementBounds.height) {
                    top = Utils.getScrollY() + rootElementBounds.bottom;
                    this._popupControlElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideTopToBottom");
                }
                else {
                    top = Utils.getScrollY() + rootElementBounds.top - popupElementBounds.height;
                    this._popupControlElement.classList.add("ms-ctrl-slide", "ms-ctrl-slideBottomToTop");
                }
            }
            this._popupControlElement.style.left = left + "px";
            this._popupControlElement.style.top = top + "px";
            this._popupControlElement.focus();
            this._isOpen = true;
        }
    };
    PopupMenu.prototype.closePopup = function () {
        if (this._isOpen) {
            document.body.removeChild(this._overlayElement);
            this._isOpen = false;
        }
    };
    Object.defineProperty(PopupMenu.prototype, "isOpen", {
        get: function () {
            return this._isOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PopupMenu.prototype, "items", {
        get: function () {
            return this._items;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PopupMenu.prototype, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (index) {
            if (index >= 0 && index < this._renderedItems.length) {
                this._renderedItems[index].focus();
                this._selectedIndex = index;
            }
        },
        enumerable: true,
        configurable: true
    });
    return PopupMenu;
}(inputwithpopup_1.PopupControl));
exports.PopupMenu = PopupMenu;
//# sourceMappingURL=popupmenu.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/radiobutton.js":
/*!****************************************************!*\
  !*** ../adaptivecards-controls/lib/radiobutton.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Constants = __webpack_require__(/*! ./constants */ "../adaptivecards-controls/lib/constants.js");
var inputcontrol_1 = __webpack_require__(/*! ./inputcontrol */ "../adaptivecards-controls/lib/inputcontrol.js");
var RadioButton = /** @class */ (function (_super) {
    __extends(RadioButton, _super);
    function RadioButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._label = "";
        _this._checkboxElement = null;
        _this._spanElement = null;
        return _this;
    }
    RadioButton.createId = function () {
        var result = RadioButton.creationIndex;
        RadioButton.creationIndex++;
        return result;
    };
    RadioButton.prototype.changed = function () {
        if (this.onChange) {
            this.onChange(this);
        }
    };
    RadioButton.prototype.keyDown = function (e) {
        switch (e.keyCode) {
            case Constants.KEY_ENTER:
                this.isChecked = !this.isChecked;
                break;
        }
    };
    RadioButton.prototype.attach = function (rootElement) {
        var _this = this;
        _super.prototype.attach.call(this, rootElement);
        rootElement.className = "ms-ctrl ms-ctrl-radiobutton";
        rootElement.tabIndex = 0;
        var labelAttribute = rootElement.attributes["label"];
        if (labelAttribute) {
            this._label = labelAttribute.value;
        }
        var isCheckedAttribute = rootElement.attributes["ischecked"];
        if (isCheckedAttribute) {
            this._isChecked = isCheckedAttribute.value === "true";
        }
        this._checkboxElement = document.createElement("input");
        this._checkboxElement.id = "ms-ctrl-radio-" + RadioButton.createId();
        this._checkboxElement.type = "radio";
        this._checkboxElement.style.position = "absolute";
        this._checkboxElement.checked = this.isChecked;
        this._checkboxElement.onchange = function (e) { _this.changed(); };
        var groupNameAttribute = rootElement.attributes["groupname"];
        if (groupNameAttribute) {
            this._checkboxElement.name = groupNameAttribute.value;
        }
        var labelElement = document.createElement("label");
        labelElement.htmlFor = this._checkboxElement.id;
        this._spanElement = document.createElement("span");
        this._spanElement.innerText = this._label;
        labelElement.appendChild(this._spanElement);
        rootElement.innerHTML = "";
        rootElement.appendChild(this._checkboxElement);
        rootElement.appendChild(labelElement);
    };
    Object.defineProperty(RadioButton.prototype, "label", {
        get: function () {
            return this._label;
        },
        set: function (value) {
            this._label = value;
            if (this._spanElement) {
                this._spanElement.innerText = this._label;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButton.prototype, "isChecked", {
        get: function () {
            return this._isChecked;
        },
        set: function (value) {
            if (this._isChecked != value) {
                this._isChecked = value;
                if (this._checkboxElement) {
                    this._checkboxElement.checked = this._isChecked;
                }
                this.changed();
            }
        },
        enumerable: true,
        configurable: true
    });
    // Used to generate unique Ids
    RadioButton.creationIndex = 0;
    return RadioButton;
}(inputcontrol_1.InputControl));
exports.RadioButton = RadioButton;
//# sourceMappingURL=radiobutton.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/textbox.js":
/*!************************************************!*\
  !*** ../adaptivecards-controls/lib/textbox.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = __webpack_require__(/*! ./utils */ "../adaptivecards-controls/lib/utils.js");
var inputcontrol_1 = __webpack_require__(/*! ./inputcontrol */ "../adaptivecards-controls/lib/inputcontrol.js");
var EditBox = /** @class */ (function () {
    function EditBox() {
    }
    EditBox.prototype.changed = function () {
        if (this.onChange) {
            this.onChange();
        }
    };
    return EditBox;
}());
var SingleLineEditBox = /** @class */ (function (_super) {
    __extends(SingleLineEditBox, _super);
    function SingleLineEditBox() {
        var _this = _super.call(this) || this;
        _this._inputElement = document.createElement("input");
        _this._inputElement.className = "ms-ctrl ms-ctrl-textbox";
        _this._inputElement.type = "text";
        _this._inputElement.oninput = function (e) {
            _this.changed();
        };
        return _this;
    }
    Object.defineProperty(SingleLineEditBox.prototype, "element", {
        get: function () {
            return this._inputElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SingleLineEditBox.prototype, "placeholder", {
        set: function (value) {
            this._inputElement.placeholder = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SingleLineEditBox.prototype, "lineCount", {
        set: function (value) {
            // lineCount can't be set on a SingleLineEditBox
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SingleLineEditBox.prototype, "maxLength", {
        set: function (value) {
            if (this._inputElement.maxLength != value) {
                this._inputElement.maxLength = value;
                this.value = this.value.substr(0, value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SingleLineEditBox.prototype, "value", {
        get: function () {
            return this._inputElement.value;
        },
        set: function (newValue) {
            this._inputElement.value = newValue;
        },
        enumerable: true,
        configurable: true
    });
    return SingleLineEditBox;
}(EditBox));
var MultilineEditBox = /** @class */ (function (_super) {
    __extends(MultilineEditBox, _super);
    function MultilineEditBox() {
        var _this = _super.call(this) || this;
        _this._textareaElement = document.createElement("textarea");
        _this._textareaElement.className = "ms-ctrl ms-ctrl-textbox ms-ctrl-textbox-multiline";
        _this._textareaElement.oninput = function (e) {
            _this.changed();
        };
        return _this;
    }
    Object.defineProperty(MultilineEditBox.prototype, "element", {
        get: function () {
            return this._textareaElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultilineEditBox.prototype, "placeholder", {
        set: function (value) {
            this._textareaElement.placeholder = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultilineEditBox.prototype, "lineCount", {
        set: function (value) {
            this._textareaElement.rows = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultilineEditBox.prototype, "maxLength", {
        set: function (value) {
            if (this._textareaElement.maxLength != value) {
                this._textareaElement.maxLength = value;
                this.value = this.value.substr(0, value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultilineEditBox.prototype, "value", {
        get: function () {
            return this._textareaElement.value;
        },
        set: function (newValue) {
            this._textareaElement.value = newValue;
        },
        enumerable: true,
        configurable: true
    });
    return MultilineEditBox;
}(EditBox));
var TextBox = /** @class */ (function (_super) {
    __extends(TextBox, _super);
    function TextBox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._isMultiline = false;
        _this._lineCount = 3;
        return _this;
    }
    TextBox.prototype.editBoxChanged = function () {
        if (this.onChange) {
            this.onChange(this);
        }
    };
    TextBox.prototype.recreateEditBox = function () {
        var _this = this;
        var currentValue = null;
        if (this._editBox) {
            currentValue = this._editBox.value;
        }
        else {
            currentValue = this.rootElement.innerText;
        }
        if (this._isMultiline) {
            this._editBox = new MultilineEditBox();
        }
        else {
            this._editBox = new SingleLineEditBox();
        }
        if (currentValue) {
            this._editBox.value = currentValue;
        }
        this._editBox.lineCount = this._lineCount;
        this._editBox.maxLength = this._maxLength;
        this._editBox.placeholder = this._placeholder;
        this._editBox.onChange = function () { _this.editBoxChanged(); };
        this.rootElement.innerHTML = "";
        this.rootElement.appendChild(this._editBox.element);
    };
    Object.defineProperty(TextBox.prototype, "editBox", {
        get: function () {
            if (!this._editBox) {
                this.recreateEditBox();
            }
            return this._editBox;
        },
        enumerable: true,
        configurable: true
    });
    TextBox.prototype.attach = function (rootElement) {
        _super.prototype.attach.call(this, rootElement);
        this._isMultiline = Utils.getAttributeValueAsBool(rootElement, "ismultiline", false);
        this._lineCount = Utils.getAttributeValueAsInt(rootElement, "lines", 3);
        this._maxLength = Utils.getAttributeValueAsInt(rootElement, "maxlength", 50000);
        this._placeholder = Utils.getAttributeValueAsString(rootElement, "placeholder", null);
        this.recreateEditBox();
    };
    Object.defineProperty(TextBox.prototype, "value", {
        get: function () {
            return this.editBox.value;
        },
        set: function (newValue) {
            this.editBox.value = newValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBox.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        set: function (value) {
            this._placeholder = value;
            this.editBox.placeholder = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBox.prototype, "isMultiline", {
        get: function () {
            return this._isMultiline;
        },
        set: function (value) {
            if (this._isMultiline != value) {
                this._isMultiline = value;
                this.recreateEditBox();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBox.prototype, "lineCount", {
        get: function () {
            return this._lineCount;
        },
        set: function (value) {
            if (value > 0) {
                this._lineCount = value;
                this.editBox.lineCount = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBox.prototype, "maxLength", {
        get: function () {
            return this._maxLength;
        },
        set: function (value) {
            if (value > 0) {
                this._maxLength = value;
                this.editBox.maxLength = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    return TextBox;
}(inputcontrol_1.InputControl));
exports.TextBox = TextBox;
//# sourceMappingURL=textbox.js.map

/***/ }),

/***/ "../adaptivecards-controls/lib/utils.js":
/*!**********************************************!*\
  !*** ../adaptivecards-controls/lib/utils.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Enums = __webpack_require__(/*! ./enums */ "../adaptivecards-controls/lib/enums.js");
var CalendarSettings = /** @class */ (function () {
    function CalendarSettings() {
    }
    CalendarSettings.getLongDayName = function (dayIndex) {
        if (dayIndex >= 0 && dayIndex < CalendarSettings.longDayNames.length) {
            return CalendarSettings.longDayNames[dayIndex];
        }
        throw new Error("Day index out of range: " + dayIndex);
    };
    CalendarSettings.getShortDayName = function (dayIndex) {
        if (dayIndex >= 0 && dayIndex < CalendarSettings.shortDayNames.length) {
            return CalendarSettings.shortDayNames[dayIndex];
        }
        throw new Error("Day index out of range: " + dayIndex);
    };
    CalendarSettings.getInitialDayName = function (dayIndex) {
        if (dayIndex >= 0 && dayIndex < CalendarSettings.minimalDayNames.length) {
            return CalendarSettings.minimalDayNames[dayIndex];
        }
        throw new Error("Day index out of range: " + dayIndex);
    };
    CalendarSettings.getLongMonthName = function (monthIndex) {
        if (monthIndex >= 0 && monthIndex < CalendarSettings.longMonthNames.length) {
            return CalendarSettings.longMonthNames[monthIndex];
        }
        throw new Error("Month index out of range: " + monthIndex);
    };
    CalendarSettings.getShortMonthName = function (monthIndex) {
        if (monthIndex >= 0 && monthIndex < CalendarSettings.shortMonthNames.length) {
            return CalendarSettings.shortMonthNames[monthIndex];
        }
        throw new Error("Month index out of range: " + monthIndex);
    };
    CalendarSettings.monthsInYear = 12;
    CalendarSettings.daysInWeek = 7;
    CalendarSettings.firstDayOfWeek = Enums.DayOfWeek.Sunday;
    CalendarSettings.longDayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    CalendarSettings.shortDayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    CalendarSettings.minimalDayNames = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
    CalendarSettings.longMonthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    CalendarSettings.shortMonthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    return CalendarSettings;
}());
exports.CalendarSettings = CalendarSettings;
function daysInMonth(year, month) {
    switch (month) {
        case 1:
            return (year % 4 == 0 && year % 100) || year % 400 == 0 ? 29 : 28;
        case 3:
        case 5:
        case 8:
        case 10:
            return 30;
        default:
            return 31;
    }
}
exports.daysInMonth = daysInMonth;
function addDays(date, days) {
    var result = new Date(date.getTime());
    result.setDate(result.getDate() + days);
    return result;
}
exports.addDays = addDays;
function addMonths(date, months) {
    var result = new Date(date.getTime());
    var newMonth = result.getMonth() + months;
    result.setMonth(newMonth);
    // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.
    // Loop until we back up to a day the new month has.
    // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)
    if (result.getMonth() !== ((newMonth % CalendarSettings.monthsInYear) + CalendarSettings.monthsInYear) % CalendarSettings.monthsInYear) {
        result = addDays(result, -result.getDate());
    }
    return result;
}
exports.addMonths = addMonths;
function areDatesEqual(date1, date2) {
    return date1.getFullYear() == date2.getFullYear() &&
        date1.getMonth() == date2.getMonth() &&
        date1.getDate() == date2.getDate();
}
exports.areDatesEqual = areDatesEqual;
function getScrollX() {
    return window.pageXOffset;
}
exports.getScrollX = getScrollX;
function getScrollY() {
    return window.pageYOffset;
}
exports.getScrollY = getScrollY;
function getAttributeValueAsBool(element, attributeName, defaultValue) {
    var attribute = element.attributes[attributeName];
    if (attribute) {
        return attribute.value === "true";
    }
    return defaultValue;
}
exports.getAttributeValueAsBool = getAttributeValueAsBool;
function getAttributeValueAsString(element, attributeName, defaultValue) {
    var attribute = element.attributes[attributeName];
    if (attribute) {
        return attribute.value;
    }
    return defaultValue;
}
exports.getAttributeValueAsString = getAttributeValueAsString;
function getAttributeValueAsInt(element, attributeName, defaultValue) {
    var attribute = element.attributes[attributeName];
    if (attribute) {
        var n = parseInt(attribute.value);
        if (!isNaN(n)) {
            return n;
        }
    }
    return defaultValue;
}
exports.getAttributeValueAsInt = getAttributeValueAsInt;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "../adaptivecards-templating/lib/adaptivecards-templating.js":
/*!*******************************************************************!*\
  !*** ../adaptivecards-templating/lib/adaptivecards-templating.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
__export(__webpack_require__(/*! ./expression-parser */ "../adaptivecards-templating/lib/expression-parser.js"));
__export(__webpack_require__(/*! ./template-engine */ "../adaptivecards-templating/lib/template-engine.js"));
__export(__webpack_require__(/*! ./shared */ "../adaptivecards-templating/lib/shared.js"));
//# sourceMappingURL=adaptivecards-templating.js.map

/***/ }),

/***/ "../adaptivecards-templating/lib/expression-parser.js":
/*!************************************************************!*\
  !*** ../adaptivecards-templating/lib/expression-parser.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var orderedOperators = [
    "/",
    "*",
    "-",
    "+",
    "==",
    "!=",
    "<",
    "<=",
    ">",
    ">="
];
var literals = [
    "identifier",
    "string",
    "number",
    "boolean"
];
var Tokenizer = /** @class */ (function () {
    function Tokenizer() {
    }
    Tokenizer.init = function () {
        Tokenizer.rules.push({ tokenType: undefined, regEx: /^\s/ }, { tokenType: "{", regEx: /^{/ }, { tokenType: "?#", regEx: /^\?#/ }, { tokenType: "}", regEx: /^}/ }, { tokenType: "[", regEx: /^\[/ }, { tokenType: "]", regEx: /^\]/ }, { tokenType: "(", regEx: /^\(/ }, { tokenType: ")", regEx: /^\)/ }, { tokenType: "boolean", regEx: /^true|^false/ }, { tokenType: "identifier", regEx: /^[$a-z_]+/i }, { tokenType: ".", regEx: /^\./ }, { tokenType: ",", regEx: /^,/ }, { tokenType: "+", regEx: /^\+/ }, { tokenType: "-", regEx: /^-/ }, { tokenType: "*", regEx: /^\*/ }, { tokenType: "/", regEx: /^\// }, { tokenType: "==", regEx: /^==/ }, { tokenType: "!=", regEx: /^!=/ }, { tokenType: "<=", regEx: /^<=/ }, { tokenType: "<", regEx: /^</ }, { tokenType: ">=", regEx: /^>=/ }, { tokenType: ">", regEx: /^>/ }, { tokenType: "string", regEx: /^"([^"]*)"/ }, { tokenType: "string", regEx: /^'([^']*)'/ }, { tokenType: "number", regEx: /^\d*\.?\d+/ });
    };
    Tokenizer.parse = function (expression) {
        var result = [];
        var i = 0;
        while (i < expression.length) {
            var subExpression = expression.substring(i);
            var matchFound = false;
            for (var _i = 0, _a = Tokenizer.rules; _i < _a.length; _i++) {
                var rule = _a[_i];
                var matches = rule.regEx.exec(subExpression);
                if (matches) {
                    if (matches.length > 2) {
                        throw new Error("A tokenizer rule matched more than one group.");
                    }
                    if (rule.tokenType !== undefined) {
                        result.push({
                            type: rule.tokenType,
                            value: matches[matches.length === 1 ? 0 : 1],
                            originalPosition: i
                        });
                    }
                    i += matches[0].length;
                    matchFound = true;
                    break;
                }
            }
            if (!matchFound) {
                throw new Error("Unexpected character " + subExpression[0] + " at position " + i);
            }
        }
        return result;
    };
    Tokenizer.rules = [];
    return Tokenizer;
}());
Tokenizer.init();
function ensureValueType(value) {
    if (typeof value === "number" || typeof value === "string" || typeof value === "boolean") {
        return value;
    }
    throw new Error("Invalid value type: " + typeof value);
}
var FunctionCollection = /** @class */ (function () {
    function FunctionCollection() {
        this._functions = [];
    }
    FunctionCollection.prototype.indexOf = function (name) {
        return this._functions.findIndex(function (f) { return f.name === name; });
    };
    FunctionCollection.prototype.register = function (name, callback) {
        var index = this.indexOf(name);
        if (index >= 0) {
            this._functions[index].callback = callback;
        }
        else {
            this._functions.push({
                name: name,
                callback: callback
            });
        }
    };
    FunctionCollection.prototype.unregister = function (name) {
        var index = this.indexOf(name);
        if (index >= 0) {
            this._functions.splice(index, 1);
        }
    };
    FunctionCollection.prototype.find = function (name) {
        var index = this.indexOf(name);
        return index >= 0 ? this._functions[index] : undefined;
    };
    return FunctionCollection;
}());
var EvaluationContext = /** @class */ (function () {
    function EvaluationContext() {
        this._functions = new FunctionCollection();
        this._stateStack = [];
    }
    EvaluationContext.init = function () {
        EvaluationContext._builtInFunctions.register("substr", function (s, index, count) {
            if (typeof s === "string" && typeof index === "number" && typeof count === "number") {
                return (s.substr(index, count));
            }
            else {
                return "";
            }
        });
        EvaluationContext._builtInFunctions.register("JSON.parse", function (input) {
            return JSON.parse(input);
        });
        EvaluationContext._builtInFunctions.register("toString", function (input) {
            if (input.toString) {
                return input.toString();
            }
            return input;
        });
        EvaluationContext._builtInFunctions.register("parseInt", function (input, radix) {
            if (typeof input === "string" && (radix === undefined || typeof radix === "number")) {
                return parseInt(input, radix);
            }
            else {
                return input;
            }
        });
        EvaluationContext._builtInFunctions.register("parseFloat", function (input) {
            return typeof input === "string" ? parseFloat(input) : input;
        });
        EvaluationContext._builtInFunctions.register("if", function (condition, ifTrue, ifFalse) {
            return condition ? ifTrue : ifFalse;
        });
        EvaluationContext._builtInFunctions.register("toUpper", function (input) {
            return typeof input === "string" ? input.toUpperCase() : input;
        });
        EvaluationContext._builtInFunctions.register("toLower", function (input) {
            return typeof input === "string" ? input.toLowerCase() : input;
        });
        EvaluationContext._builtInFunctions.register("Date.format", function (input, format) {
            var acceptedFormats = ["long", "short", "compact"];
            var inputAsNumber;
            if (typeof input === "string") {
                inputAsNumber = Date.parse(input);
            }
            else if (typeof input === "number") {
                inputAsNumber = input;
            }
            else {
                return input;
            }
            var date = new Date(inputAsNumber);
            var effectiveFormat = "compact";
            if (typeof format === "string") {
                effectiveFormat = format.toLowerCase();
                if (acceptedFormats.indexOf(effectiveFormat) < 0) {
                    effectiveFormat = "compact";
                }
            }
            return effectiveFormat === "compact" ? date.toLocaleDateString() : date.toLocaleDateString(undefined, { day: "numeric", weekday: effectiveFormat, month: effectiveFormat, year: "numeric" });
        });
        EvaluationContext._builtInFunctions.register("Time.format", function (input) {
            var inputAsNumber;
            if (typeof input === "string") {
                inputAsNumber = Date.parse(input);
            }
            else if (typeof input === "number") {
                inputAsNumber = input;
            }
            else {
                return input;
            }
            var date = new Date(inputAsNumber);
            return date.toLocaleTimeString(undefined, { hour: 'numeric', minute: '2-digit' });
        });
        EvaluationContext._builtInFunctions.register("round", function (input) {
            return typeof input === "number" ? Math.round(input) : input;
        });
        EvaluationContext._builtInFunctions.register("ceil", function (input) {
            return typeof input === "number" ? Math.ceil(input) : input;
        });
        EvaluationContext._builtInFunctions.register("floor", function (input) {
            return typeof input === "number" ? Math.floor(input) : input;
        });
    };
    EvaluationContext.prototype.registerFunction = function (name, callback) {
        this._functions.register(name, callback);
    };
    EvaluationContext.prototype.unregisterFunction = function (name) {
        this._functions.unregister(name);
    };
    EvaluationContext.prototype.getFunction = function (name) {
        var f = this._functions.find(name);
        if (!f) {
            f = EvaluationContext._builtInFunctions.find(name);
        }
        return f ? f.callback : undefined;
    };
    EvaluationContext.prototype.isReservedField = function (name) {
        return EvaluationContext._reservedFields.indexOf(name) >= 0;
    };
    EvaluationContext.prototype.saveState = function () {
        this._stateStack.push({ $data: this.$data, $index: this.$index });
    };
    EvaluationContext.prototype.restoreLastState = function () {
        if (this._stateStack.length === 0) {
            throw new Error("There is no evaluation context state to restore.");
        }
        var savedContext = this._stateStack.pop();
        this.$data = savedContext.$data;
        this.$index = savedContext.$index;
    };
    Object.defineProperty(EvaluationContext.prototype, "currentDataContext", {
        get: function () {
            return this.$data !== undefined ? this.$data : this.$root;
        },
        enumerable: true,
        configurable: true
    });
    EvaluationContext._reservedFields = ["$data", "$root", "$index"];
    EvaluationContext._builtInFunctions = new FunctionCollection();
    return EvaluationContext;
}());
exports.EvaluationContext = EvaluationContext;
EvaluationContext.init();
var EvaluationNode = /** @class */ (function () {
    function EvaluationNode() {
    }
    return EvaluationNode;
}());
var ExpressionNode = /** @class */ (function (_super) {
    __extends(ExpressionNode, _super);
    function ExpressionNode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.nodes = [];
        _this.allowNull = true;
        return _this;
    }
    ExpressionNode.prototype.evaluate = function (context) {
        var operatorPriorityGroups = [
            ["/", "*"],
            ["-", "+"],
            ["==", "!=", "<", "<=", ">", ">="]
        ];
        var nodesCopy = this.nodes.slice();
        for (var _i = 0, operatorPriorityGroups_1 = operatorPriorityGroups; _i < operatorPriorityGroups_1.length; _i++) {
            var priorityGroup = operatorPriorityGroups_1[_i];
            var i = 0;
            while (i < nodesCopy.length) {
                var node = nodesCopy[i];
                if (node instanceof OperatorNode && priorityGroup.indexOf(node.operator) >= 0) {
                    var left = ensureValueType(nodesCopy[i - 1].evaluate(context));
                    var right = ensureValueType(nodesCopy[i + 1].evaluate(context));
                    if (typeof left !== typeof right) {
                        throw new Error("Incompatible operands " + left + " and " + right + " for operator " + node.operator);
                    }
                    var result = void 0;
                    if (typeof left === "number" && typeof right === "number") {
                        switch (node.operator) {
                            case "/":
                                result = left / right;
                                break;
                            case "*":
                                result = left * right;
                                break;
                            case "-":
                                result = left - right;
                                break;
                            case "+":
                                result = left + right;
                                break;
                        }
                    }
                    if (typeof left === "string" && typeof right === "string") {
                        switch (node.operator) {
                            case "+":
                                result = left + right;
                                break;
                        }
                    }
                    switch (node.operator) {
                        case "==":
                            result = left === right;
                            break;
                        case "!=":
                            result = left !== right;
                            break;
                        case "<":
                            result = left < right;
                            break;
                        case "<=":
                            result = left <= right;
                            break;
                        case ">":
                            result = left > right;
                            break;
                        case ">=":
                            result = left >= right;
                            break;
                        default:
                        // This should never happen
                    }
                    nodesCopy.splice(i - 1, 3, new LiteralNode(result));
                    i--;
                }
                i++;
            }
            ;
        }
        return nodesCopy[0].evaluate(context);
    };
    return ExpressionNode;
}(EvaluationNode));
var IdentifierNode = /** @class */ (function (_super) {
    __extends(IdentifierNode, _super);
    function IdentifierNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IdentifierNode.prototype.evaluate = function (context) {
        return this.identifier;
    };
    return IdentifierNode;
}(EvaluationNode));
var IndexerNode = /** @class */ (function (_super) {
    __extends(IndexerNode, _super);
    function IndexerNode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IndexerNode.prototype.evaluate = function (context) {
        return this.index.evaluate(context);
    };
    return IndexerNode;
}(EvaluationNode));
var FunctionCallNode = /** @class */ (function (_super) {
    __extends(FunctionCallNode, _super);
    function FunctionCallNode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.functionName = null;
        _this.parameters = [];
        return _this;
    }
    FunctionCallNode.prototype.evaluate = function (context) {
        var callback = context.getFunction(this.functionName);
        if (callback !== undefined) {
            var evaluatedParams = [];
            for (var _i = 0, _a = this.parameters; _i < _a.length; _i++) {
                var param = _a[_i];
                evaluatedParams.push(param.evaluate(context));
            }
            return callback.apply(void 0, evaluatedParams);
        }
        throw new Error("Undefined function: " + this.functionName);
    };
    return FunctionCallNode;
}(EvaluationNode));
var LiteralNode = /** @class */ (function (_super) {
    __extends(LiteralNode, _super);
    function LiteralNode(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    LiteralNode.prototype.evaluate = function (context) {
        return this.value;
    };
    return LiteralNode;
}(EvaluationNode));
var OperatorNode = /** @class */ (function (_super) {
    __extends(OperatorNode, _super);
    function OperatorNode(operator) {
        var _this = _super.call(this) || this;
        _this.operator = operator;
        return _this;
    }
    OperatorNode.prototype.evaluate = function (context) {
        throw new Error("An operator cannot be evaluated on its own.");
    };
    return OperatorNode;
}(EvaluationNode));
var PathNode = /** @class */ (function (_super) {
    __extends(PathNode, _super);
    function PathNode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.parts = [];
        return _this;
    }
    PathNode.prototype.evaluate = function (context) {
        var result = undefined;
        var index = 0;
        while (index < this.parts.length) {
            var part = this.parts[index];
            try {
                if (part instanceof IdentifierNode && index === 0) {
                    switch (part.identifier) {
                        case "$root":
                            result = context.$root;
                            break;
                        case "$data":
                            result = context.currentDataContext;
                            break;
                        case "$index":
                            result = context.$index;
                            break;
                        default:
                            result = context.currentDataContext[part.identifier];
                            break;
                    }
                }
                else {
                    var partValue = part.evaluate(context);
                    if (index === 0) {
                        result = partValue;
                    }
                    else {
                        result = typeof partValue !== "boolean" ? result[partValue] : result[partValue.toString()];
                    }
                }
            }
            catch (e) {
                return undefined;
            }
            index++;
        }
        return result;
    };
    return PathNode;
}(EvaluationNode));
var ExpressionParser = /** @class */ (function () {
    function ExpressionParser(tokens) {
        this._index = 0;
        this._tokens = tokens;
    }
    ExpressionParser.prototype.unexpectedToken = function () {
        throw new Error("Unexpected token " + this.current.value + " at position " + this.current.originalPosition + ".");
    };
    ExpressionParser.prototype.unexpectedEoe = function () {
        throw new Error("Unexpected end of expression.");
    };
    ExpressionParser.prototype.moveNext = function () {
        this._index++;
    };
    ExpressionParser.prototype.parseToken = function () {
        var expectedTokenTypes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            expectedTokenTypes[_i] = arguments[_i];
        }
        if (this.eoe) {
            this.unexpectedEoe();
        }
        var currentToken = this.current;
        if (expectedTokenTypes.indexOf(this.current.type) < 0) {
            this.unexpectedToken();
        }
        this.moveNext();
        return currentToken;
    };
    ExpressionParser.prototype.parseOptionalToken = function () {
        var expectedTokenTypes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            expectedTokenTypes[_i] = arguments[_i];
        }
        if (this.eoe) {
            this.unexpectedEoe();
        }
        else if (expectedTokenTypes.indexOf(this.current.type) < 0) {
            return false;
        }
        else {
            this.moveNext();
            return true;
        }
    };
    ExpressionParser.prototype.parseFunctionCall = function (functionName) {
        var result = new FunctionCallNode();
        result.functionName = functionName;
        this.parseToken("(");
        var firstParameter = this.parseExpression();
        var moreParameters = false;
        if (firstParameter) {
            result.parameters.push(firstParameter);
            do {
                moreParameters = this.parseOptionalToken(",");
                if (moreParameters) {
                    var parameter = this.parseExpression();
                    result.parameters.push(parameter);
                }
            } while (moreParameters);
        }
        this.parseToken(")");
        return result;
    };
    ExpressionParser.prototype.parseIdentifier = function () {
        var result = new IdentifierNode();
        result.identifier = this.current.value;
        this.moveNext();
        return result;
    };
    ExpressionParser.prototype.parseIndexer = function () {
        var result = new IndexerNode();
        this.parseToken("[");
        result.index = this.parseExpression();
        this.parseToken("]");
        return result;
    };
    ExpressionParser.prototype.parsePath = function () {
        var result = new PathNode();
        var expectedNextTokenTypes = ["identifier", "("];
        while (!this.eoe) {
            if (expectedNextTokenTypes.indexOf(this.current.type) < 0) {
                return result;
            }
            switch (this.current.type) {
                case "(":
                    if (result.parts.length === 0) {
                        this.moveNext();
                        result.parts.push(this.parseExpression());
                        this.parseToken(")");
                    }
                    else {
                        var functionName = "";
                        for (var _i = 0, _a = result.parts; _i < _a.length; _i++) {
                            var part = _a[_i];
                            if (!(part instanceof IdentifierNode)) {
                                this.unexpectedToken();
                            }
                            if (functionName !== "") {
                                functionName += ".";
                            }
                            functionName += part.identifier;
                        }
                        result.parts = [];
                        result.parts.push(this.parseFunctionCall(functionName));
                    }
                    expectedNextTokenTypes = [".", "["];
                    break;
                case "[":
                    result.parts.push(this.parseIndexer());
                    expectedNextTokenTypes = [".", "(", "["];
                    break;
                case "identifier":
                    result.parts.push(this.parseIdentifier());
                    expectedNextTokenTypes = [".", "(", "["];
                    break;
                case ".":
                    this.moveNext();
                    expectedNextTokenTypes = ["identifier"];
                    break;
                default:
                    expectedNextTokenTypes = [];
                    break;
            }
        }
    };
    ExpressionParser.prototype.parseExpression = function () {
        var result = new ExpressionNode();
        var expectedNextTokenTypes = literals.concat("(", "+", "-");
        while (!this.eoe) {
            if (expectedNextTokenTypes.indexOf(this.current.type) < 0) {
                if (result.nodes.length === 0) {
                    this.unexpectedToken();
                }
                return result;
            }
            switch (this.current.type) {
                case "(":
                case "identifier":
                    result.nodes.push(this.parsePath());
                    expectedNextTokenTypes = orderedOperators;
                    break;
                case "string":
                case "number":
                case "boolean":
                    if (this.current.type === "string") {
                        result.nodes.push(new LiteralNode(this.current.value));
                    }
                    else if (this.current.type === "number") {
                        result.nodes.push(new LiteralNode(parseFloat(this.current.value)));
                    }
                    else {
                        result.nodes.push(new LiteralNode(this.current.value === "true"));
                    }
                    this.moveNext();
                    expectedNextTokenTypes = orderedOperators;
                    break;
                case "-":
                    if (result.nodes.length === 0) {
                        result.nodes.push(new LiteralNode(-1));
                        result.nodes.push(new OperatorNode("*"));
                        expectedNextTokenTypes = ["identifier", "number", "("];
                    }
                    else {
                        result.nodes.push(new OperatorNode(this.current.type));
                        expectedNextTokenTypes = literals.concat("(");
                    }
                    this.moveNext();
                    break;
                case "+":
                    if (result.nodes.length === 0) {
                        expectedNextTokenTypes = literals.concat("(");
                    }
                    else {
                        result.nodes.push(new OperatorNode(this.current.type));
                        expectedNextTokenTypes = literals.concat("(");
                    }
                    this.moveNext();
                    break;
                case "*":
                case "/":
                case "==":
                case "!=":
                case "<":
                case "<=":
                case ">":
                case ">=":
                    result.nodes.push(new OperatorNode(this.current.type));
                    this.moveNext();
                    expectedNextTokenTypes = literals.concat("(");
                    break;
                default:
                    expectedNextTokenTypes = [];
                    break;
            }
        }
    };
    Object.defineProperty(ExpressionParser.prototype, "eoe", {
        get: function () {
            return this._index >= this._tokens.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ExpressionParser.prototype, "current", {
        get: function () {
            return this._tokens[this._index];
        },
        enumerable: true,
        configurable: true
    });
    ExpressionParser.parseBinding = function (expressionString) {
        var parser = new ExpressionParser(Tokenizer.parse(expressionString));
        parser.parseToken("{");
        var allowNull = !parser.parseOptionalToken("?#");
        var expression = parser.parseExpression();
        parser.parseToken("}");
        return new Binding(expressionString, expression, allowNull);
    };
    return ExpressionParser;
}());
exports.ExpressionParser = ExpressionParser;
var Binding = /** @class */ (function () {
    function Binding(expressionString, expression, allowNull) {
        if (allowNull === void 0) { allowNull = true; }
        this.expressionString = expressionString;
        this.expression = expression;
        this.allowNull = allowNull;
    }
    Binding.prototype.evaluate = function (context) {
        return this.expression.evaluate(context);
    };
    return Binding;
}());
exports.Binding = Binding;
//# sourceMappingURL=expression-parser.js.map

/***/ }),

/***/ "../adaptivecards-templating/lib/shared.js":
/*!*************************************************!*\
  !*** ../adaptivecards-templating/lib/shared.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var GlobalSettings = /** @class */ (function () {
    function GlobalSettings() {
    }
    GlobalSettings.undefinedExpressionValueSubstitutionString = undefined;
    return GlobalSettings;
}());
exports.GlobalSettings = GlobalSettings;
//# sourceMappingURL=shared.js.map

/***/ }),

/***/ "../adaptivecards-templating/lib/template-engine.js":
/*!**********************************************************!*\
  !*** ../adaptivecards-templating/lib/template-engine.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var expression_parser_1 = __webpack_require__(/*! ./expression-parser */ "../adaptivecards-templating/lib/expression-parser.js");
var Shared = __webpack_require__(/*! ./shared */ "../adaptivecards-templating/lib/shared.js");
var TemplatizedString = /** @class */ (function () {
    function TemplatizedString() {
        this._parts = [];
        this._shouldDropOwner = false;
    }
    TemplatizedString.parse = function (s) {
        var result = new TemplatizedString();
        var i = 0;
        do {
            var expressionFound = false;
            var start = i;
            var loop = void 0;
            do {
                loop = false;
                start = s.indexOf("{", start);
                if (start >= 0) {
                    if (start + 1 < s.length && s[start + 1] === "{") {
                        start += 2;
                        loop = true;
                    }
                }
            } while (loop);
            if (start >= 0) {
                var end = s.indexOf("}", start);
                if (end >= 0) {
                    expressionFound = true;
                    if (start > i) {
                        result._parts.push(s.substring(i, start));
                    }
                    var bindngExpression = s.substring(start, end + 1);
                    var part = void 0;
                    try {
                        part = expression_parser_1.ExpressionParser.parseBinding(bindngExpression);
                    }
                    catch (e) {
                        part = bindngExpression;
                    }
                    result._parts.push(part);
                    i = end + 1;
                }
            }
            if (!expressionFound) {
                result._parts.push(s.substr(i));
                break;
            }
        } while (i < s.length);
        if (result._parts.length === 1 && typeof result._parts[0] === "string") {
            return result._parts[0];
        }
        else {
            return result;
        }
    };
    TemplatizedString.prototype.evalExpression = function (bindingExpression, context) {
        var result = bindingExpression.evaluate(context);
        if (result === undefined) {
            this._shouldDropOwner = this._shouldDropOwner || !bindingExpression.allowNull;
        }
        return result;
    };
    TemplatizedString.prototype.internalEvaluate = function (context) {
        if (this._parts.length === 0) {
            return undefined;
        }
        else if (this._parts.length === 1) {
            // If the templatized string only has 1 part, we want it to evaluate
            // to same the type as produced by the expression
            if (typeof this._parts[0] === "string") {
                return this._parts[0];
            }
            else {
                return this.evalExpression(this._parts[0], context);
            }
        }
        else {
            // If the templatized string has multiple parts, we want it to evaluate
            // to a string. In that context, each part that evaluates to undefined
            // gets replaced by the original expression by default or by a resource
            // string provided by the application
            var s = "";
            for (var _i = 0, _a = this._parts; _i < _a.length; _i++) {
                var part = _a[_i];
                if (typeof part === "string") {
                    s += part;
                }
                else {
                    var evaluatedPart = this.evalExpression(part, context);
                    if (evaluatedPart === undefined) {
                        evaluatedPart = Shared.GlobalSettings.undefinedExpressionValueSubstitutionString ? Shared.GlobalSettings.undefinedExpressionValueSubstitutionString : part.expressionString;
                    }
                    s += evaluatedPart;
                }
            }
            return s;
        }
    };
    TemplatizedString.prototype.evaluate = function (context) {
        this._shouldDropOwner = false;
        return this.internalEvaluate(context);
    };
    Object.defineProperty(TemplatizedString.prototype, "shouldDropOwner", {
        get: function () {
            return this._shouldDropOwner;
        },
        enumerable: true,
        configurable: true
    });
    return TemplatizedString;
}());
var Template = /** @class */ (function () {
    function Template(payload) {
        this.preparedPayload = Template.prepare(payload);
    }
    Template.prepare = function (node) {
        if (typeof node === "string") {
            return TemplatizedString.parse(node);
        }
        else if (typeof node === "object" && node !== null) {
            if (Array.isArray(node)) {
                var result = [];
                for (var _i = 0, node_1 = node; _i < node_1.length; _i++) {
                    var item = node_1[_i];
                    result.push(Template.prepare(item));
                }
                return result;
            }
            else {
                var keys = Object.keys(node);
                var result = {};
                for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
                    var key = keys_1[_a];
                    result[key] = Template.prepare(node[key]);
                }
                return result;
            }
        }
        else {
            return node;
        }
    };
    Template.prototype.expandSingleObject = function (node) {
        var result = {};
        var keys = Object.keys(node);
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
            var key = keys_2[_i];
            if (!this._context.isReservedField(key)) {
                var value = this.internalExpand(node[key]);
                if (value !== undefined) {
                    result[key] = value;
                }
            }
        }
        return result;
    };
    Template.prototype.internalExpand = function (node) {
        var result;
        this._context.saveState();
        if (Array.isArray(node)) {
            var itemArray = [];
            for (var _i = 0, node_2 = node; _i < node_2.length; _i++) {
                var item = node_2[_i];
                var expandedItem = this.internalExpand(item);
                if (expandedItem !== null) {
                    if (Array.isArray(expandedItem)) {
                        itemArray = itemArray.concat(expandedItem);
                    }
                    else {
                        itemArray.push(expandedItem);
                    }
                }
            }
            result = itemArray;
        }
        else if (node instanceof TemplatizedString) {
            result = node.evaluate(this._context);
            if (node.shouldDropOwner) {
                result = null;
            }
        }
        else if (typeof node === "object" && node !== null) {
            var dropObject = false;
            var when = node["$when"];
            if (when instanceof TemplatizedString) {
                var whenValue = void 0;
                try {
                    whenValue = when.evaluate(this._context);
                    // If $when doesn't evaluate to a boolean, consider it is false
                    if (typeof whenValue !== "boolean") {
                        whenValue = false;
                    }
                }
                catch (_a) {
                    // If we hit an exception, consider $when to be false
                    whenValue = false;
                }
                dropObject = !whenValue;
            }
            if (!dropObject) {
                var dataContext = node["$data"];
                if (dataContext !== undefined) {
                    if (dataContext instanceof TemplatizedString) {
                        dataContext = dataContext.evaluate(this._context);
                    }
                    if (Array.isArray(dataContext)) {
                        result = [];
                        for (var i = 0; i < dataContext.length; i++) {
                            this._context.$data = dataContext[i];
                            this._context.$index = i;
                            var expandedObject = this.expandSingleObject(node);
                            if (expandedObject !== null) {
                                result.push(expandedObject);
                            }
                        }
                    }
                    else {
                        this._context.$data = dataContext;
                        result = this.expandSingleObject(node);
                    }
                }
                else {
                    result = this.expandSingleObject(node);
                }
            }
            else {
                result = null;
            }
        }
        else {
            result = node;
        }
        this._context.restoreLastState();
        return result;
    };
    Template.prototype.expand = function (context) {
        this._context = context;
        return this.internalExpand(this.preparedPayload);
    };
    return Template;
}());
exports.Template = Template;
//# sourceMappingURL=template-engine.js.map

/***/ }),

/***/ "../adaptivecards/lib/adaptivecards.js":
/*!*********************************************!*\
  !*** ../adaptivecards/lib/adaptivecards.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
__export(__webpack_require__(/*! ./card-elements */ "../adaptivecards/lib/card-elements.js"));
__export(__webpack_require__(/*! ./enums */ "../adaptivecards/lib/enums.js"));
__export(__webpack_require__(/*! ./host-config */ "../adaptivecards/lib/host-config.js"));
__export(__webpack_require__(/*! ./shared */ "../adaptivecards/lib/shared.js"));
__export(__webpack_require__(/*! ./utils */ "../adaptivecards/lib/utils.js"));
//# sourceMappingURL=adaptivecards.js.map

/***/ }),

/***/ "../adaptivecards/lib/card-elements.js":
/*!*********************************************!*\
  !*** ../adaptivecards/lib/card-elements.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Enums = __webpack_require__(/*! ./enums */ "../adaptivecards/lib/enums.js");
var Shared = __webpack_require__(/*! ./shared */ "../adaptivecards/lib/shared.js");
var Utils = __webpack_require__(/*! ./utils */ "../adaptivecards/lib/utils.js");
var HostConfig = __webpack_require__(/*! ./host-config */ "../adaptivecards/lib/host-config.js");
var TextFormatters = __webpack_require__(/*! ./text-formatters */ "../adaptivecards/lib/text-formatters.js");
function invokeSetCollection(action, collection) {
    if (action) {
        // Closest emulation of "internal" in TypeScript.
        action["setCollection"](collection);
    }
}
function isActionAllowed(action, forbiddenActionTypes) {
    if (forbiddenActionTypes) {
        for (var i = 0; i < forbiddenActionTypes.length; i++) {
            if (action.getJsonTypeName() === forbiddenActionTypes[i]) {
                return false;
            }
        }
    }
    return true;
}
var InstanceCreationErrorType;
(function (InstanceCreationErrorType) {
    InstanceCreationErrorType[InstanceCreationErrorType["UnknownType"] = 0] = "UnknownType";
    InstanceCreationErrorType[InstanceCreationErrorType["ForbiddenType"] = 1] = "ForbiddenType";
})(InstanceCreationErrorType || (InstanceCreationErrorType = {}));
function createCardObjectInstance(parent, json, forbiddenTypeNames, allowFallback, createInstanceCallback, createValidationErrorCallback, errors) {
    var result = null;
    if (json && typeof json === "object") {
        var tryToFallback = false;
        var typeName = Utils.getStringValue(json["type"]);
        if (forbiddenTypeNames && forbiddenTypeNames.indexOf(typeName) >= 0) {
            raiseParseError(createValidationErrorCallback(typeName, InstanceCreationErrorType.ForbiddenType), errors);
        }
        else {
            result = createInstanceCallback(typeName);
            if (!result) {
                tryToFallback = allowFallback;
                raiseParseError(createValidationErrorCallback(typeName, InstanceCreationErrorType.UnknownType), errors);
            }
            else {
                result.setParent(parent);
                result.parse(json, errors);
                tryToFallback = result.shouldFallback() && allowFallback;
            }
            if (tryToFallback) {
                var fallback = json["fallback"];
                if (!fallback) {
                    parent.setShouldFallback(true);
                }
                if (typeof fallback === "string" && fallback.toLowerCase() === "drop") {
                    result = null;
                }
                else if (typeof fallback === "object") {
                    result = createCardObjectInstance(parent, fallback, forbiddenTypeNames, true, createInstanceCallback, createValidationErrorCallback, errors);
                }
            }
        }
    }
    return result;
}
function createActionInstance(parent, json, forbiddenActionTypes, allowFallback, errors) {
    return createCardObjectInstance(parent, json, forbiddenActionTypes, allowFallback, function (typeName) { return AdaptiveCard.actionTypeRegistry.createInstance(typeName); }, function (typeName, errorType) {
        if (errorType == InstanceCreationErrorType.UnknownType) {
            return {
                error: Enums.ValidationError.UnknownActionType,
                message: "Unknown action type: " + typeName + ". Fallback will be used if present."
            };
        }
        else {
            return {
                error: Enums.ValidationError.ActionTypeNotAllowed,
                message: "Action type " + typeName + " is not allowed in this context."
            };
        }
    }, errors);
}
exports.createActionInstance = createActionInstance;
function createElementInstance(parent, json, allowFallback, errors) {
    return createCardObjectInstance(parent, json, [], // Forbidden types not supported for elements for now
    allowFallback, function (typeName) { return AdaptiveCard.elementTypeRegistry.createInstance(typeName); }, function (typeName, errorType) {
        if (errorType == InstanceCreationErrorType.UnknownType) {
            return {
                error: Enums.ValidationError.UnknownElementType,
                message: "Unknown element type: " + typeName + ". Fallback will be used if present."
            };
        }
        else {
            return {
                error: Enums.ValidationError.ElementTypeNotAllowed,
                message: "Element type " + typeName + " is not allowed in this context."
            };
        }
    }, errors);
}
exports.createElementInstance = createElementInstance;
var SerializableObject = /** @class */ (function () {
    function SerializableObject() {
        this._rawProperties = {};
    }
    SerializableObject.prototype.parse = function (json, errors) {
        this._rawProperties = AdaptiveCard.enableFullJsonRoundTrip ? json : {};
    };
    SerializableObject.prototype.toJSON = function () {
        var result;
        if (AdaptiveCard.enableFullJsonRoundTrip && this._rawProperties && typeof this._rawProperties === "object") {
            result = this._rawProperties;
        }
        else {
            result = {};
        }
        return result;
    };
    SerializableObject.prototype.setCustomProperty = function (name, value) {
        var shouldDeleteProperty = (typeof value === "string" && Utils.isNullOrEmpty(value)) || value === undefined || value === null;
        if (shouldDeleteProperty) {
            delete this._rawProperties[name];
        }
        else {
            this._rawProperties[name] = value;
        }
    };
    SerializableObject.prototype.getCustomProperty = function (name) {
        return this._rawProperties[name];
    };
    return SerializableObject;
}());
exports.SerializableObject = SerializableObject;
var ValidationFailure = /** @class */ (function () {
    function ValidationFailure(cardObject) {
        this.cardObject = cardObject;
        this.errors = [];
    }
    return ValidationFailure;
}());
exports.ValidationFailure = ValidationFailure;
var ValidationResults = /** @class */ (function () {
    function ValidationResults() {
        this.allIds = {};
        this.failures = [];
    }
    ValidationResults.prototype.getFailureIndex = function (cardObject) {
        for (var i = 0; i < this.failures.length; i++) {
            if (this.failures[i].cardObject === cardObject) {
                return i;
            }
        }
        return -1;
    };
    ValidationResults.prototype.addFailure = function (cardObject, error) {
        var index = this.getFailureIndex(cardObject);
        var failure;
        if (index < 0) {
            failure = new ValidationFailure(cardObject);
            this.failures.push(failure);
        }
        else {
            failure = this.failures[index];
        }
        failure.errors.push(error);
    };
    return ValidationResults;
}());
exports.ValidationResults = ValidationResults;
var CardObject = /** @class */ (function (_super) {
    __extends(CardObject, _super);
    function CardObject() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardObject.prototype.internalValidateProperties = function (context) {
        if (!Utils.isNullOrEmpty(this.id)) {
            if (context.allIds.hasOwnProperty(this.id)) {
                if (context.allIds[this.id] == 1) {
                    context.addFailure(this, {
                        error: Enums.ValidationError.DuplicateId,
                        message: "Duplicate Id: " + this.id
                    });
                }
                context.allIds[this.id] += 1;
            }
            else {
                context.allIds[this.id] = 1;
            }
        }
    };
    CardObject.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.id = Utils.getStringValue(json["id"]);
    };
    CardObject.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "type", this.getJsonTypeName());
        Utils.setProperty(result, "id", this.id);
        return result;
    };
    CardObject.prototype.validateProperties = function () {
        var result = new ValidationResults();
        this.internalValidateProperties(result);
        return result;
    };
    return CardObject;
}(SerializableObject));
exports.CardObject = CardObject;
var CardElement = /** @class */ (function (_super) {
    __extends(CardElement, _super);
    function CardElement() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._shouldFallback = false;
        _this._lang = undefined;
        _this._hostConfig = null;
        _this._parent = null;
        _this._renderedElement = null;
        _this._separatorElement = null;
        _this._isVisible = true;
        _this._truncatedDueToOverflow = false;
        _this._defaultRenderedElementDisplayMode = null;
        _this._padding = null;
        _this.requires = new HostConfig.HostCapabilities();
        _this.horizontalAlignment = null;
        _this.spacing = Enums.Spacing.Default;
        _this.separator = false;
        _this.customCssSelector = null;
        _this.height = "auto";
        _this.minPixelHeight = null;
        return _this;
    }
    CardElement.prototype.internalRenderSeparator = function () {
        var renderedSeparator = Utils.renderSeparation(this.hostConfig, {
            spacing: this.hostConfig.getEffectiveSpacing(this.spacing),
            lineThickness: this.separator ? this.hostConfig.separator.lineThickness : null,
            lineColor: this.separator ? this.hostConfig.separator.lineColor : null
        }, this.separatorOrientation);
        if (AdaptiveCard.alwaysBleedSeparators && renderedSeparator && this.separatorOrientation == Enums.Orientation.Horizontal) {
            // Adjust separator's margins if the option to always bleed separators is turned on
            var parentContainer = this.getParentContainer();
            if (parentContainer && parentContainer.getEffectivePadding()) {
                var parentPhysicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(parentContainer.getEffectivePadding());
                renderedSeparator.style.marginLeft = "-" + parentPhysicalPadding.left + "px";
                renderedSeparator.style.marginRight = "-" + parentPhysicalPadding.right + "px";
            }
        }
        return renderedSeparator;
    };
    CardElement.prototype.updateRenderedElementVisibility = function () {
        var displayMode = this.isDesignMode() || this.isVisible ? this._defaultRenderedElementDisplayMode : "none";
        if (this._renderedElement) {
            this._renderedElement.style.display = displayMode;
        }
        if (this._separatorElement) {
            if (this.parent && this.parent.isFirstElement(this)) {
                this._separatorElement.style.display = "none";
            }
            else {
                this._separatorElement.style.display = displayMode;
            }
        }
    };
    CardElement.prototype.hideElementDueToOverflow = function () {
        if (this._renderedElement && this.isVisible) {
            this._renderedElement.style.visibility = 'hidden';
            this.isVisible = false;
            raiseElementVisibilityChangedEvent(this, false);
        }
    };
    CardElement.prototype.showElementHiddenDueToOverflow = function () {
        if (this._renderedElement && !this.isVisible) {
            this._renderedElement.style.visibility = null;
            this.isVisible = true;
            raiseElementVisibilityChangedEvent(this, false);
        }
    };
    // Marked private to emulate internal access
    CardElement.prototype.handleOverflow = function (maxHeight) {
        if (this.isVisible || this.isHiddenDueToOverflow()) {
            var handled = this.truncateOverflow(maxHeight);
            // Even if we were unable to truncate the element to fit this time,
            // it still could have been previously truncated
            this._truncatedDueToOverflow = handled || this._truncatedDueToOverflow;
            if (!handled) {
                this.hideElementDueToOverflow();
            }
            else if (handled && !this.isVisible) {
                this.showElementHiddenDueToOverflow();
            }
        }
    };
    // Marked private to emulate internal access
    CardElement.prototype.resetOverflow = function () {
        var sizeChanged = false;
        if (this._truncatedDueToOverflow) {
            this.undoOverflowTruncation();
            this._truncatedDueToOverflow = false;
            sizeChanged = true;
        }
        if (this.isHiddenDueToOverflow) {
            this.showElementHiddenDueToOverflow();
        }
        return sizeChanged;
    };
    CardElement.prototype.createPlaceholderElement = function () {
        var element = document.createElement("div");
        element.style.border = "1px dashed #DDDDDD";
        element.style.padding = "4px";
        element.style.minHeight = "32px";
        element.style.fontSize = "10px";
        element.innerText = "Empty " + this.getJsonTypeName();
        return element;
    };
    CardElement.prototype.adjustRenderedElementSize = function (renderedElement) {
        if (this.height === "auto") {
            renderedElement.style.flex = "0 0 auto";
        }
        else {
            renderedElement.style.flex = "1 1 auto";
        }
        if (this.minPixelHeight) {
            renderedElement.style.minHeight = this.minPixelHeight + "px";
        }
    };
    CardElement.prototype.overrideInternalRender = function () {
        return this.internalRender();
    };
    CardElement.prototype.applyPadding = function () {
        if (this.separatorElement) {
            if (AdaptiveCard.alwaysBleedSeparators && this.separatorOrientation == Enums.Orientation.Horizontal && !this.isBleeding()) {
                var padding = new Shared.PaddingDefinition();
                this.getImmediateSurroundingPadding(padding);
                var physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);
                this.separatorElement.style.marginLeft = "-" + physicalPadding.left + "px";
                this.separatorElement.style.marginRight = "-" + physicalPadding.right + "px";
            }
            else {
                this.separatorElement.style.marginRight = "0";
                this.separatorElement.style.marginLeft = "0";
            }
        }
    };
    /*
     * Called when this element overflows the bottom of the card.
     * maxHeight will be the amount of space still available on the card (0 if
     * the element is fully off the card).
     */
    CardElement.prototype.truncateOverflow = function (maxHeight) {
        // Child implementations should return true if the element handled
        // the truncation request such that its content fits within maxHeight,
        // false if the element should fall back to being hidden
        return false;
    };
    /*
     * This should reverse any changes performed in truncateOverflow().
     */
    CardElement.prototype.undoOverflowTruncation = function () { };
    CardElement.prototype.getDefaultPadding = function () {
        return new Shared.PaddingDefinition();
    };
    CardElement.prototype.getHasBackground = function () {
        return false;
    };
    CardElement.prototype.getPadding = function () {
        return this._padding;
    };
    CardElement.prototype.setPadding = function (value) {
        this._padding = value;
    };
    Object.defineProperty(CardElement.prototype, "supportsMinHeight", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "useDefaultSizing", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "allowCustomPadding", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "separatorOrientation", {
        get: function () {
            return Enums.Orientation.Horizontal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "defaultStyle", {
        get: function () {
            return Enums.ContainerStyle.Default;
        },
        enumerable: true,
        configurable: true
    });
    CardElement.prototype.asString = function () {
        return "";
    };
    CardElement.prototype.isBleeding = function () {
        return false;
    };
    CardElement.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "isVisible", this.isVisible, true);
        if (this.horizontalAlignment !== null) {
            Utils.setEnumProperty(Enums.HorizontalAlignment, result, "horizontalAlignment", this.horizontalAlignment);
        }
        Utils.setEnumProperty(Enums.Spacing, result, "spacing", this.spacing, Enums.Spacing.Default);
        Utils.setProperty(result, "separator", this.separator, false);
        Utils.setProperty(result, "height", this.height, "auto");
        if (this.supportsMinHeight) {
            Utils.setProperty(result, "minHeight", typeof this.minPixelHeight === "number" && !isNaN(this.minPixelHeight) ? this.minPixelHeight + "px" : undefined);
        }
        return result;
    };
    CardElement.prototype.setParent = function (value) {
        this._parent = value;
    };
    CardElement.prototype.getEffectiveStyle = function () {
        if (this.parent) {
            return this.parent.getEffectiveStyle();
        }
        return this.defaultStyle;
    };
    CardElement.prototype.getForbiddenElementTypes = function () {
        return null;
    };
    CardElement.prototype.getForbiddenActionTypes = function () {
        return null;
    };
    CardElement.prototype.getImmediateSurroundingPadding = function (result, processTop, processRight, processBottom, processLeft) {
        if (processTop === void 0) { processTop = true; }
        if (processRight === void 0) { processRight = true; }
        if (processBottom === void 0) { processBottom = true; }
        if (processLeft === void 0) { processLeft = true; }
        if (this.parent) {
            var doProcessTop = processTop && this.parent.isTopElement(this);
            var doProcessRight = processRight && this.parent.isRightMostElement(this);
            var doProcessBottom = processBottom && this.parent.isBottomElement(this);
            var doProcessLeft = processLeft && this.parent.isLeftMostElement(this);
            var effectivePadding = this.parent.getEffectivePadding();
            if (effectivePadding) {
                if (doProcessTop && effectivePadding.top != Enums.Spacing.None) {
                    result.top = effectivePadding.top;
                    doProcessTop = false;
                }
                if (doProcessRight && effectivePadding.right != Enums.Spacing.None) {
                    result.right = effectivePadding.right;
                    doProcessRight = false;
                }
                if (doProcessBottom && effectivePadding.bottom != Enums.Spacing.None) {
                    result.bottom = effectivePadding.bottom;
                    doProcessBottom = false;
                }
                if (doProcessLeft && effectivePadding.left != Enums.Spacing.None) {
                    result.left = effectivePadding.left;
                    doProcessLeft = false;
                }
            }
            if (doProcessTop || doProcessRight || doProcessBottom || doProcessLeft) {
                this.parent.getImmediateSurroundingPadding(result, doProcessTop, doProcessRight, doProcessBottom, doProcessLeft);
            }
        }
    };
    CardElement.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        raiseParseElementEvent(this, json, errors);
        this.requires.parse(json["requires"], errors);
        this.isVisible = Utils.getBoolValue(json["isVisible"], this.isVisible);
        this.horizontalAlignment = Utils.getEnumValue(Enums.HorizontalAlignment, json["horizontalAlignment"], this.horizontalAlignment);
        this.spacing = Utils.getEnumValue(Enums.Spacing, json["spacing"], Enums.Spacing.Default);
        this.separator = Utils.getBoolValue(json["separator"], this.separator);
        var jsonSeparation = json["separation"];
        if (jsonSeparation !== undefined) {
            if (jsonSeparation === "none") {
                this.spacing = Enums.Spacing.None;
                this.separator = false;
            }
            else if (jsonSeparation === "strong") {
                this.spacing = Enums.Spacing.Large;
                this.separator = true;
            }
            else if (jsonSeparation === "default") {
                this.spacing = Enums.Spacing.Default;
                this.separator = false;
            }
            raiseParseError({
                error: Enums.ValidationError.Deprecated,
                message: "The \"separation\" property is deprecated and will be removed. Use the \"spacing\" and \"separator\" properties instead."
            }, errors);
        }
        var jsonHeight = json["height"];
        if (jsonHeight === "auto" || jsonHeight === "stretch") {
            this.height = jsonHeight;
        }
        if (this.supportsMinHeight) {
            var jsonMinHeight = json["minHeight"];
            if (jsonMinHeight && typeof jsonMinHeight === "string") {
                var isValid = false;
                try {
                    var size = Shared.SizeAndUnit.parse(jsonMinHeight, true);
                    if (size.unit == Enums.SizeUnit.Pixel) {
                        this.minPixelHeight = size.physicalSize;
                        isValid = true;
                    }
                }
                catch (_a) {
                    // Do nothing. A parse error is emitted below
                }
                if (!isValid) {
                    raiseParseError({
                        error: Enums.ValidationError.InvalidPropertyValue,
                        message: "Invalid \"minHeight\" value: " + jsonMinHeight
                    }, errors);
                }
            }
        }
        else {
            this.minPixelHeight = null;
        }
    };
    CardElement.prototype.getActionCount = function () {
        return 0;
    };
    CardElement.prototype.getActionAt = function (index) {
        throw new Error("Index out of range.");
    };
    CardElement.prototype.remove = function () {
        if (this.parent && this.parent instanceof CardElementContainer) {
            return this.parent.removeItem(this);
        }
        return false;
    };
    CardElement.prototype.render = function () {
        this._renderedElement = this.overrideInternalRender();
        this._separatorElement = this.internalRenderSeparator();
        if (this._renderedElement) {
            if (this.customCssSelector) {
                this._renderedElement.classList.add(this.customCssSelector);
            }
            this._renderedElement.style.boxSizing = "border-box";
            this._defaultRenderedElementDisplayMode = this._renderedElement.style.display;
            this.adjustRenderedElementSize(this._renderedElement);
            this.updateLayout(false);
        }
        else if (this.isDesignMode()) {
            this._renderedElement = this.createPlaceholderElement();
        }
        return this._renderedElement;
    };
    CardElement.prototype.updateLayout = function (processChildren) {
        if (processChildren === void 0) { processChildren = true; }
        this.updateRenderedElementVisibility();
        this.applyPadding();
    };
    CardElement.prototype.indexOf = function (cardElement) {
        return -1;
    };
    CardElement.prototype.isDesignMode = function () {
        var rootElement = this.getRootElement();
        return rootElement instanceof AdaptiveCard && rootElement.designMode;
    };
    CardElement.prototype.isRendered = function () {
        return this._renderedElement && this._renderedElement.offsetHeight > 0;
    };
    CardElement.prototype.isFirstElement = function (element) {
        return true;
    };
    CardElement.prototype.isLastElement = function (element) {
        return true;
    };
    CardElement.prototype.isAtTheVeryLeft = function () {
        return this.parent ? this.parent.isLeftMostElement(this) && this.parent.isAtTheVeryLeft() : true;
    };
    CardElement.prototype.isAtTheVeryRight = function () {
        return this.parent ? this.parent.isRightMostElement(this) && this.parent.isAtTheVeryRight() : true;
    };
    CardElement.prototype.isAtTheVeryTop = function () {
        return this.parent ? this.parent.isFirstElement(this) && this.parent.isAtTheVeryTop() : true;
    };
    CardElement.prototype.isAtTheVeryBottom = function () {
        return this.parent ? this.parent.isLastElement(this) && this.parent.isAtTheVeryBottom() : true;
    };
    CardElement.prototype.isBleedingAtTop = function () {
        return false;
    };
    CardElement.prototype.isBleedingAtBottom = function () {
        return false;
    };
    CardElement.prototype.isLeftMostElement = function (element) {
        return true;
    };
    CardElement.prototype.isRightMostElement = function (element) {
        return true;
    };
    CardElement.prototype.isTopElement = function (element) {
        return this.isFirstElement(element);
    };
    CardElement.prototype.isBottomElement = function (element) {
        return this.isLastElement(element);
    };
    CardElement.prototype.isHiddenDueToOverflow = function () {
        return this._renderedElement && this._renderedElement.style.visibility == 'hidden';
    };
    CardElement.prototype.getRootElement = function () {
        var rootElement = this;
        while (rootElement.parent) {
            rootElement = rootElement.parent;
        }
        return rootElement;
    };
    CardElement.prototype.getParentContainer = function () {
        var currentElement = this.parent;
        while (currentElement) {
            if (currentElement instanceof Container) {
                return currentElement;
            }
            currentElement = currentElement.parent;
        }
        return null;
    };
    CardElement.prototype.getAllInputs = function () {
        return [];
    };
    CardElement.prototype.getResourceInformation = function () {
        return [];
    };
    CardElement.prototype.getElementById = function (id) {
        return this.id === id ? this : null;
    };
    CardElement.prototype.getActionById = function (id) {
        return null;
    };
    CardElement.prototype.shouldFallback = function () {
        return this._shouldFallback || !this.requires.areAllMet(this.hostConfig.hostCapabilities);
    };
    CardElement.prototype.setShouldFallback = function (value) {
        this._shouldFallback = value;
    };
    CardElement.prototype.getEffectivePadding = function () {
        var padding = this.getPadding();
        return (padding && this.allowCustomPadding) ? padding : this.getDefaultPadding();
    };
    Object.defineProperty(CardElement.prototype, "lang", {
        get: function () {
            if (this._lang) {
                return this._lang;
            }
            else {
                if (this.parent) {
                    return this.parent.lang;
                }
                else {
                    return undefined;
                }
            }
        },
        set: function (value) {
            if (value && value != "") {
                var regEx = /^[a-z]{2,3}$/ig;
                var matches = regEx.exec(value);
                if (!matches) {
                    throw new Error("Invalid language identifier: " + value);
                }
            }
            this._lang = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "hostConfig", {
        get: function () {
            if (this._hostConfig) {
                return this._hostConfig;
            }
            else {
                if (this.parent) {
                    return this.parent.hostConfig;
                }
                else {
                    return defaultHostConfig;
                }
            }
        },
        set: function (value) {
            this._hostConfig = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "index", {
        get: function () {
            if (this.parent) {
                return this.parent.indexOf(this);
            }
            else {
                return 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "isInteractive", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "isStandalone", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "isInline", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "isVisible", {
        get: function () {
            return this._isVisible;
        },
        set: function (value) {
            // If the element is going to be hidden, reset any changes that were due
            // to overflow truncation (this ensures that if the element is later
            // un-hidden it has the right content)
            if (AdaptiveCard.useAdvancedCardBottomTruncation && !value) {
                this.undoOverflowTruncation();
            }
            if (this._isVisible != value) {
                this._isVisible = value;
                this.updateRenderedElementVisibility();
                if (this._renderedElement) {
                    raiseElementVisibilityChangedEvent(this);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "hasVisibleSeparator", {
        get: function () {
            if (this.parent && this.separatorElement) {
                return !this.parent.isFirstElement(this) && (this.isVisible || this.isDesignMode());
            }
            else {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "renderedElement", {
        get: function () {
            return this._renderedElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardElement.prototype, "separatorElement", {
        get: function () {
            return this._separatorElement;
        },
        enumerable: true,
        configurable: true
    });
    return CardElement;
}(CardObject));
exports.CardElement = CardElement;
var BaseTextBlock = /** @class */ (function (_super) {
    __extends(BaseTextBlock, _super);
    function BaseTextBlock() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._selectAction = null;
        _this.size = Enums.TextSize.Default;
        _this.weight = Enums.TextWeight.Default;
        _this.color = Enums.TextColor.Default;
        _this.isSubtle = false;
        _this.fontType = null;
        return _this;
    }
    BaseTextBlock.prototype.getEffectiveStyleDefinition = function () {
        return this.hostConfig.containerStyles.getStyleByName(this.getEffectiveStyle());
    };
    BaseTextBlock.prototype.getFontSize = function (fontType) {
        switch (this.size) {
            case Enums.TextSize.Small:
                return fontType.fontSizes.small;
            case Enums.TextSize.Medium:
                return fontType.fontSizes.medium;
            case Enums.TextSize.Large:
                return fontType.fontSizes.large;
            case Enums.TextSize.ExtraLarge:
                return fontType.fontSizes.extraLarge;
            default:
                return fontType.fontSizes.default;
        }
    };
    BaseTextBlock.prototype.getColorDefinition = function (colorSet, color) {
        switch (color) {
            case Enums.TextColor.Accent:
                return colorSet.accent;
            case Enums.TextColor.Dark:
                return colorSet.dark;
            case Enums.TextColor.Light:
                return colorSet.light;
            case Enums.TextColor.Good:
                return colorSet.good;
            case Enums.TextColor.Warning:
                return colorSet.warning;
            case Enums.TextColor.Attention:
                return colorSet.attention;
            default:
                return colorSet.default;
        }
    };
    BaseTextBlock.prototype.setText = function (value) {
        this._text = value;
    };
    BaseTextBlock.prototype.asString = function () {
        return this.text;
    };
    BaseTextBlock.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setEnumProperty(Enums.TextSize, result, "size", this.size, Enums.TextSize.Default);
        Utils.setEnumProperty(Enums.TextWeight, result, "weight", this.weight, Enums.TextWeight.Default);
        Utils.setEnumProperty(Enums.TextColor, result, "color", this.color, Enums.TextColor.Default);
        Utils.setProperty(result, "text", this.text);
        Utils.setProperty(result, "isSubtle", this.isSubtle, false);
        Utils.setEnumProperty(Enums.FontType, result, "fontType", this.fontType, Enums.FontType.Default);
        return result;
    };
    BaseTextBlock.prototype.applyStylesTo = function (targetElement) {
        var fontType = this.hostConfig.getFontTypeDefinition(this.fontType);
        if (fontType.fontFamily) {
            targetElement.style.fontFamily = fontType.fontFamily;
        }
        var fontSize;
        switch (this.size) {
            case Enums.TextSize.Small:
                fontSize = fontType.fontSizes.small;
                break;
            case Enums.TextSize.Medium:
                fontSize = fontType.fontSizes.medium;
                break;
            case Enums.TextSize.Large:
                fontSize = fontType.fontSizes.large;
                break;
            case Enums.TextSize.ExtraLarge:
                fontSize = fontType.fontSizes.extraLarge;
                break;
            default:
                fontSize = fontType.fontSizes.default;
                break;
        }
        targetElement.style.fontSize = fontSize + "px";
        var colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);
        targetElement.style.color = Utils.stringToCssColor(this.isSubtle ? colorDefinition.subtle : colorDefinition.default);
        var fontWeight;
        switch (this.weight) {
            case Enums.TextWeight.Lighter:
                fontWeight = fontType.fontWeights.lighter;
                break;
            case Enums.TextWeight.Bolder:
                fontWeight = fontType.fontWeights.bolder;
                break;
            default:
                fontWeight = fontType.fontWeights.default;
                break;
        }
        targetElement.style.fontWeight = fontWeight.toString();
    };
    BaseTextBlock.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.text = Utils.getStringValue(json["text"]);
        var sizeString = Utils.getStringValue(json["size"]);
        if (sizeString && sizeString.toLowerCase() === "normal") {
            this.size = Enums.TextSize.Default;
            raiseParseError({
                error: Enums.ValidationError.Deprecated,
                message: "The TextBlock.size value \"normal\" is deprecated and will be removed. Use \"default\" instead."
            }, errors);
        }
        else {
            this.size = Utils.getEnumValue(Enums.TextSize, sizeString, this.size);
        }
        var weightString = Utils.getStringValue(json["weight"]);
        if (weightString && weightString.toLowerCase() === "normal") {
            this.weight = Enums.TextWeight.Default;
            raiseParseError({
                error: Enums.ValidationError.Deprecated,
                message: "The TextBlock.weight value \"normal\" is deprecated and will be removed. Use \"default\" instead."
            }, errors);
        }
        else {
            this.weight = Utils.getEnumValue(Enums.TextWeight, weightString, this.weight);
        }
        this.color = Utils.getEnumValue(Enums.TextColor, json["color"], this.color);
        this.isSubtle = Utils.getBoolValue(json["isSubtle"], this.isSubtle);
        this.fontType = Utils.getEnumValue(Enums.FontType, json["fontType"], this.fontType);
    };
    Object.defineProperty(BaseTextBlock.prototype, "effectiveColor", {
        get: function () {
            return this.color ? this.color : Enums.TextColor.Default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTextBlock.prototype, "text", {
        get: function () {
            return this._text;
        },
        set: function (value) {
            this.setText(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTextBlock.prototype, "selectAction", {
        get: function () {
            return this._selectAction;
        },
        set: function (value) {
            this._selectAction = value;
            if (this._selectAction) {
                this._selectAction.setParent(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    return BaseTextBlock;
}(CardElement));
exports.BaseTextBlock = BaseTextBlock;
var TextBlock = /** @class */ (function (_super) {
    __extends(TextBlock, _super);
    function TextBlock() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._processedText = null;
        _this._treatAsPlainText = true;
        _this.wrap = false;
        _this.useMarkdown = true;
        return _this;
    }
    TextBlock.prototype.restoreOriginalContent = function () {
        var maxHeight = this.maxLines
            ? (this._computedLineHeight * this.maxLines) + 'px'
            : null;
        this.renderedElement.style.maxHeight = maxHeight;
        this.renderedElement.innerHTML = this._originalInnerHtml;
    };
    TextBlock.prototype.truncateIfSupported = function (maxHeight) {
        // For now, only truncate TextBlocks that contain just a single
        // paragraph -- since the maxLines calculation doesn't take into
        // account Markdown lists
        var children = this.renderedElement.children;
        var isTextOnly = !children.length;
        var truncationSupported = isTextOnly || children.length == 1
            && children[0].tagName.toLowerCase() == 'p';
        if (truncationSupported) {
            var element = isTextOnly
                ? this.renderedElement
                : children[0];
            Utils.truncate(element, maxHeight, this._computedLineHeight);
            return true;
        }
        return false;
    };
    TextBlock.prototype.setText = function (value) {
        _super.prototype.setText.call(this, value);
        this._processedText = null;
    };
    TextBlock.prototype.getRenderedDomElementType = function () {
        return "div";
    };
    TextBlock.prototype.internalRender = function () {
        var _this = this;
        this._processedText = null;
        if (!Utils.isNullOrEmpty(this.text)) {
            var hostConfig = this.hostConfig;
            var element = document.createElement(this.getRenderedDomElementType());
            element.classList.add(hostConfig.makeCssClassName("ac-textBlock"));
            element.style.overflow = "hidden";
            this.applyStylesTo(element);
            if (this.selectAction) {
                element.onclick = function (e) {
                    e.preventDefault();
                    e.cancelBubble = true;
                    _this.selectAction.execute();
                };
                if (hostConfig.supportsInteractivity) {
                    element.tabIndex = 0;
                    element.setAttribute("role", "button");
                    element.setAttribute("aria-label", this.selectAction.title);
                    element.classList.add(hostConfig.makeCssClassName("ac-selectable"));
                }
            }
            if (!this._processedText) {
                this._treatAsPlainText = true;
                var formattedText = TextFormatters.formatText(this.lang, this.text);
                if (this.useMarkdown) {
                    if (AdaptiveCard.allowMarkForTextHighlighting) {
                        formattedText = formattedText.replace(/<mark>/g, "===").replace(/<\/mark>/g, "/==");
                    }
                    var markdownProcessingResult = AdaptiveCard.applyMarkdown(formattedText);
                    if (markdownProcessingResult.didProcess && markdownProcessingResult.outputHtml) {
                        this._processedText = markdownProcessingResult.outputHtml;
                        this._treatAsPlainText = false;
                        // Only process <mark> tag if markdown processing was applied because
                        // markdown processing is also responsible for sanitizing the input string
                        if (AdaptiveCard.allowMarkForTextHighlighting) {
                            var markStyle = "";
                            var effectiveStyle = this.getEffectiveStyleDefinition();
                            if (effectiveStyle.highlightBackgroundColor) {
                                markStyle += "background-color: " + effectiveStyle.highlightBackgroundColor + ";";
                            }
                            if (effectiveStyle.highlightForegroundColor) {
                                markStyle += "color: " + effectiveStyle.highlightForegroundColor + ";";
                            }
                            if (!Utils.isNullOrEmpty(markStyle)) {
                                markStyle = 'style="' + markStyle + '"';
                            }
                            this._processedText = this._processedText.replace(/===/g, "<mark " + markStyle + ">").replace(/\/==/g, "</mark>");
                        }
                    }
                    else {
                        this._processedText = formattedText;
                        this._treatAsPlainText = true;
                    }
                }
                else {
                    this._processedText = formattedText;
                    this._treatAsPlainText = true;
                }
            }
            if (this._treatAsPlainText) {
                element.innerText = this._processedText;
            }
            else {
                element.innerHTML = this._processedText;
            }
            if (element.firstElementChild instanceof HTMLElement) {
                var firstElementChild = element.firstElementChild;
                firstElementChild.style.marginTop = "0px";
                firstElementChild.style.width = "100%";
                if (!this.wrap) {
                    firstElementChild.style.overflow = "hidden";
                    firstElementChild.style.textOverflow = "ellipsis";
                }
            }
            if (element.lastElementChild instanceof HTMLElement) {
                element.lastElementChild.style.marginBottom = "0px";
            }
            var anchors = element.getElementsByTagName("a");
            for (var i = 0; i < anchors.length; i++) {
                var anchor = anchors[i];
                anchor.classList.add(hostConfig.makeCssClassName("ac-anchor"));
                anchor.target = "_blank";
                anchor.onclick = function (e) {
                    if (raiseAnchorClickedEvent(_this, e.target)) {
                        e.preventDefault();
                        e.cancelBubble = true;
                    }
                };
            }
            if (this.wrap) {
                element.style.wordWrap = "break-word";
                if (this.maxLines > 0) {
                    element.style.maxHeight = (this._computedLineHeight * this.maxLines) + "px";
                    element.style.overflow = "hidden";
                }
            }
            else {
                element.style.whiteSpace = "nowrap";
                element.style.textOverflow = "ellipsis";
            }
            if (AdaptiveCard.useAdvancedTextBlockTruncation || AdaptiveCard.useAdvancedCardBottomTruncation) {
                this._originalInnerHtml = element.innerHTML;
            }
            return element;
        }
        else {
            return null;
        }
    };
    TextBlock.prototype.truncateOverflow = function (maxHeight) {
        if (maxHeight >= this._computedLineHeight) {
            return this.truncateIfSupported(maxHeight);
        }
        return false;
    };
    TextBlock.prototype.undoOverflowTruncation = function () {
        this.restoreOriginalContent();
        if (AdaptiveCard.useAdvancedTextBlockTruncation && this.maxLines) {
            var maxHeight = this._computedLineHeight * this.maxLines;
            this.truncateIfSupported(maxHeight);
        }
    };
    TextBlock.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "wrap", this.wrap, false);
        Utils.setNumberProperty(result, "maxLines", this.maxLines);
        return result;
    };
    TextBlock.prototype.applyStylesTo = function (targetElement) {
        _super.prototype.applyStylesTo.call(this, targetElement);
        var parentContainer = this.getParentContainer();
        var isRtl = parentContainer ? parentContainer.isRtl() : false;
        switch (this.horizontalAlignment) {
            case Enums.HorizontalAlignment.Center:
                targetElement.style.textAlign = "center";
                break;
            case Enums.HorizontalAlignment.Right:
                targetElement.style.textAlign = isRtl ? "left" : "right";
                break;
            default:
                targetElement.style.textAlign = isRtl ? "right" : "left";
                break;
        }
        var lineHeights = this.hostConfig.lineHeights;
        if (lineHeights) {
            switch (this.size) {
                case Enums.TextSize.Small:
                    this._computedLineHeight = lineHeights.small;
                    break;
                case Enums.TextSize.Medium:
                    this._computedLineHeight = lineHeights.medium;
                    break;
                case Enums.TextSize.Large:
                    this._computedLineHeight = lineHeights.large;
                    break;
                case Enums.TextSize.ExtraLarge:
                    this._computedLineHeight = lineHeights.extraLarge;
                    break;
                default:
                    this._computedLineHeight = lineHeights.default;
                    break;
            }
        }
        else {
            // Looks like 1.33 is the magic number to compute line-height
            // from font size.
            this._computedLineHeight = this.getFontSize(this.hostConfig.getFontTypeDefinition(this.fontType)) * 1.33;
        }
        targetElement.style.lineHeight = this._computedLineHeight + "px";
    };
    TextBlock.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.wrap = Utils.getBoolValue(json["wrap"], this.wrap);
        this.maxLines = Utils.getNumberValue(json["maxLines"]);
    };
    TextBlock.prototype.getJsonTypeName = function () {
        return "TextBlock";
    };
    TextBlock.prototype.updateLayout = function (processChildren) {
        if (processChildren === void 0) { processChildren = false; }
        _super.prototype.updateLayout.call(this, processChildren);
        if (AdaptiveCard.useAdvancedTextBlockTruncation && this.maxLines && this.isRendered()) {
            // Reset the element's innerHTML in case the available room for
            // content has increased
            this.restoreOriginalContent();
            this.truncateIfSupported(this._computedLineHeight * this.maxLines);
        }
    };
    return TextBlock;
}(BaseTextBlock));
exports.TextBlock = TextBlock;
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    function Label() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Label.prototype.getRenderedDomElementType = function () {
        return "label";
    };
    Label.prototype.internalRender = function () {
        var renderedElement = _super.prototype.internalRender.call(this);
        if (renderedElement && !Utils.isNullOrEmpty(this.forElementId)) {
            renderedElement.htmlFor = this.forElementId;
        }
        return renderedElement;
    };
    return Label;
}(TextBlock));
var TextRun = /** @class */ (function (_super) {
    __extends(TextRun, _super);
    function TextRun() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.italic = false;
        _this.strikethrough = false;
        _this.highlight = false;
        return _this;
    }
    TextRun.prototype.internalRender = function () {
        var _this = this;
        if (!Utils.isNullOrEmpty(this.text)) {
            var hostConfig = this.hostConfig;
            var formattedText = TextFormatters.formatText(this.lang, this.text);
            var element = document.createElement("span");
            element.classList.add(hostConfig.makeCssClassName("ac-textRun"));
            this.applyStylesTo(element);
            if (this.selectAction && hostConfig.supportsInteractivity) {
                var anchor = document.createElement("a");
                anchor.classList.add(hostConfig.makeCssClassName("ac-anchor"));
                anchor.href = this.selectAction.getHref();
                anchor.target = "_blank";
                anchor.onclick = function (e) {
                    e.preventDefault();
                    e.cancelBubble = true;
                    _this.selectAction.execute();
                };
                anchor.innerText = formattedText;
                element.appendChild(anchor);
            }
            else {
                element.innerText = formattedText;
            }
            return element;
        }
        else {
            return null;
        }
    };
    TextRun.prototype.applyStylesTo = function (targetElement) {
        _super.prototype.applyStylesTo.call(this, targetElement);
        if (this.italic) {
            targetElement.style.fontStyle = "italic";
        }
        if (this.strikethrough) {
            targetElement.style.textDecoration = "line-through";
        }
        if (this.highlight) {
            var colorDefinition = this.getColorDefinition(this.getEffectiveStyleDefinition().foregroundColors, this.effectiveColor);
            targetElement.style.backgroundColor = Utils.stringToCssColor(this.isSubtle ? colorDefinition.highlightColors.subtle : colorDefinition.highlightColors.default);
        }
    };
    TextRun.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "italic", this.italic, false);
        Utils.setProperty(result, "strikethrough", this.strikethrough, false);
        Utils.setProperty(result, "highlight", this.highlight, false);
        if (this.selectAction) {
            Utils.setProperty(result, "selectAction", this.selectAction.toJSON());
        }
        return result;
    };
    TextRun.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.italic = Utils.getBoolValue(json["italic"], this.italic);
        this.strikethrough = Utils.getBoolValue(json["strikethrough"], this.strikethrough);
        this.highlight = Utils.getBoolValue(json["highlight"], this.highlight);
        this.selectAction = createActionInstance(this, json["selectAction"], [ShowCardAction.JsonTypeName], !this.isDesignMode(), errors);
    };
    TextRun.prototype.getJsonTypeName = function () {
        return "TextRun";
    };
    Object.defineProperty(TextRun.prototype, "isStandalone", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextRun.prototype, "isInline", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    return TextRun;
}(BaseTextBlock));
exports.TextRun = TextRun;
var RichTextBlock = /** @class */ (function (_super) {
    __extends(RichTextBlock, _super);
    function RichTextBlock() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._inlines = [];
        return _this;
    }
    RichTextBlock.prototype.internalAddInline = function (inline, forceAdd) {
        if (forceAdd === void 0) { forceAdd = false; }
        if (!inline.isInline) {
            throw new Error("RichTextBlock.addInline: the specified card element cannot be used as a RichTextBlock inline.");
        }
        var doAdd = inline.parent == null || forceAdd;
        if (!doAdd && inline.parent != this) {
            throw new Error("RichTextBlock.addInline: the specified inline already belongs to another RichTextBlock.");
        }
        else {
            inline.setParent(this);
            this._inlines.push(inline);
        }
    };
    RichTextBlock.prototype.internalRender = function () {
        if (this._inlines.length > 0) {
            var element = document.createElement("div");
            element.className = this.hostConfig.makeCssClassName("ac-richTextBlock");
            var parentContainer = this.getParentContainer();
            var isRtl = parentContainer ? parentContainer.isRtl() : false;
            switch (this.horizontalAlignment) {
                case Enums.HorizontalAlignment.Center:
                    element.style.textAlign = "center";
                    break;
                case Enums.HorizontalAlignment.Right:
                    element.style.textAlign = isRtl ? "left" : "right";
                    break;
                default:
                    element.style.textAlign = isRtl ? "right" : "left";
                    break;
            }
            var renderedInlines = 0;
            for (var _i = 0, _a = this._inlines; _i < _a.length; _i++) {
                var inline = _a[_i];
                var renderedInline = inline.render();
                if (renderedInline) {
                    element.appendChild(renderedInline);
                    renderedInlines++;
                }
            }
            if (renderedInlines > 0) {
                return element;
            }
        }
        return null;
    };
    RichTextBlock.prototype.asString = function () {
        var result = "";
        for (var _i = 0, _a = this._inlines; _i < _a.length; _i++) {
            var inline = _a[_i];
            result += inline.asString();
        }
        return result;
    };
    RichTextBlock.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this._inlines = [];
        if (Array.isArray(json["inlines"])) {
            for (var _i = 0, _a = json["inlines"]; _i < _a.length; _i++) {
                var jsonInline = _a[_i];
                var inline = void 0;
                if (typeof jsonInline === "string") {
                    var textRun = new TextRun();
                    textRun.text = jsonInline;
                    inline = textRun;
                }
                else {
                    inline = createElementInstance(this, jsonInline, false, // No fallback for inlines in 1.2
                    errors);
                }
                if (inline) {
                    this.internalAddInline(inline, true);
                }
            }
        }
    };
    RichTextBlock.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        if (this._inlines.length > 0) {
            var jsonInlines = [];
            for (var _i = 0, _a = this._inlines; _i < _a.length; _i++) {
                var inline = _a[_i];
                jsonInlines.push(inline.toJSON());
            }
            Utils.setProperty(result, "inlines", jsonInlines);
        }
        return result;
    };
    RichTextBlock.prototype.getJsonTypeName = function () {
        return "RichTextBlock";
    };
    RichTextBlock.prototype.getInlineCount = function () {
        return this._inlines.length;
    };
    RichTextBlock.prototype.getInlineAt = function (index) {
        if (index >= 0 && index < this._inlines.length) {
            return this._inlines[index];
        }
        else {
            throw new Error("RichTextBlock.getInlineAt: Index out of range (" + index + ")");
        }
    };
    RichTextBlock.prototype.addInline = function (inline) {
        this.internalAddInline(inline);
    };
    RichTextBlock.prototype.removeInline = function (inline) {
        var index = this._inlines.indexOf(inline);
        if (index >= 0) {
            this._inlines[index].setParent(null);
            this._inlines.splice(index, 1);
            return true;
        }
        return false;
    };
    return RichTextBlock;
}(CardElement));
exports.RichTextBlock = RichTextBlock;
var Fact = /** @class */ (function (_super) {
    __extends(Fact, _super);
    function Fact(name, value) {
        if (name === void 0) { name = undefined; }
        if (value === void 0) { value = undefined; }
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.value = value;
        return _this;
    }
    Fact.prototype.parse = function (json) {
        _super.prototype.parse.call(this, json);
        this.name = Utils.getStringValue(json["title"]);
        this.value = Utils.getStringValue(json["value"]);
    };
    Fact.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "title", this.name);
        Utils.setProperty(result, "value", this.value);
        return result;
    };
    return Fact;
}(SerializableObject));
exports.Fact = Fact;
var FactSet = /** @class */ (function (_super) {
    __extends(FactSet, _super);
    function FactSet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.facts = [];
        return _this;
    }
    Object.defineProperty(FactSet.prototype, "useDefaultSizing", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    FactSet.prototype.internalRender = function () {
        var element = null;
        var hostConfig = this.hostConfig;
        if (this.facts.length > 0) {
            element = document.createElement("table");
            element.style.borderWidth = "0px";
            element.style.borderSpacing = "0px";
            element.style.borderStyle = "none";
            element.style.borderCollapse = "collapse";
            element.style.display = "block";
            element.style.overflow = "hidden";
            element.classList.add(hostConfig.makeCssClassName("ac-factset"));
            for (var i = 0; i < this.facts.length; i++) {
                var trElement = document.createElement("tr");
                if (i > 0) {
                    trElement.style.marginTop = hostConfig.factSet.spacing + "px";
                }
                // Title column
                var tdElement = document.createElement("td");
                tdElement.style.padding = "0";
                tdElement.classList.add(hostConfig.makeCssClassName("ac-fact-title"));
                if (hostConfig.factSet.title.maxWidth) {
                    tdElement.style.maxWidth = hostConfig.factSet.title.maxWidth + "px";
                }
                tdElement.style.verticalAlign = "top";
                var textBlock = new TextBlock();
                textBlock.setParent(this);
                textBlock.text = (Utils.isNullOrEmpty(this.facts[i].name) && this.isDesignMode()) ? "Title" : this.facts[i].name;
                textBlock.size = hostConfig.factSet.title.size;
                textBlock.color = hostConfig.factSet.title.color;
                textBlock.isSubtle = hostConfig.factSet.title.isSubtle;
                textBlock.weight = hostConfig.factSet.title.weight;
                textBlock.wrap = hostConfig.factSet.title.wrap;
                textBlock.spacing = Enums.Spacing.None;
                Utils.appendChild(tdElement, textBlock.render());
                Utils.appendChild(trElement, tdElement);
                // Spacer column
                tdElement = document.createElement("td");
                tdElement.style.width = "10px";
                Utils.appendChild(trElement, tdElement);
                // Value column
                tdElement = document.createElement("td");
                tdElement.style.padding = "0";
                tdElement.style.verticalAlign = "top";
                tdElement.classList.add(hostConfig.makeCssClassName("ac-fact-value"));
                textBlock = new TextBlock();
                textBlock.setParent(this);
                textBlock.text = this.facts[i].value;
                textBlock.size = hostConfig.factSet.value.size;
                textBlock.color = hostConfig.factSet.value.color;
                textBlock.isSubtle = hostConfig.factSet.value.isSubtle;
                textBlock.weight = hostConfig.factSet.value.weight;
                textBlock.wrap = hostConfig.factSet.value.wrap;
                textBlock.spacing = Enums.Spacing.None;
                Utils.appendChild(tdElement, textBlock.render());
                Utils.appendChild(trElement, tdElement);
                Utils.appendChild(element, trElement);
            }
        }
        return element;
    };
    FactSet.prototype.getJsonTypeName = function () {
        return "FactSet";
    };
    FactSet.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setArrayProperty(result, "facts", this.facts);
        /*
        let facts = [];

        if (this.facts) {
            for (let fact of this.facts) {
                facts.push(fact.toJSON());
            }
        }

        Utils.setProperty(result, "facts", facts);
        */
        return result;
    };
    FactSet.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.facts = [];
        var jsonFacts = json["facts"];
        if (Array.isArray(jsonFacts)) {
            for (var _i = 0, jsonFacts_1 = jsonFacts; _i < jsonFacts_1.length; _i++) {
                var jsonFact = jsonFacts_1[_i];
                var fact = new Fact();
                fact.parse(jsonFact);
                this.facts.push(fact);
            }
        }
    };
    return FactSet;
}(CardElement));
exports.FactSet = FactSet;
var Image = /** @class */ (function (_super) {
    __extends(Image, _super);
    function Image() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.style = Enums.ImageStyle.Default;
        _this.size = Enums.Size.Auto;
        _this.pixelWidth = null;
        _this.pixelHeight = null;
        _this.altText = "";
        return _this;
    }
    Image.prototype.parseDimension = function (name, value, errors) {
        if (value) {
            if (typeof value === "string") {
                try {
                    var size = Shared.SizeAndUnit.parse(value);
                    if (size.unit == Enums.SizeUnit.Pixel) {
                        return size.physicalSize;
                    }
                }
                catch (_a) {
                    // Ignore error
                }
            }
            raiseParseError({
                error: Enums.ValidationError.InvalidPropertyValue,
                message: "Invalid image " + name + ": " + value
            }, errors);
        }
        return 0;
    };
    Image.prototype.applySize = function (element) {
        if (this.pixelWidth || this.pixelHeight) {
            if (this.pixelWidth) {
                element.style.width = this.pixelWidth + "px";
            }
            if (this.pixelHeight) {
                element.style.height = this.pixelHeight + "px";
            }
        }
        else {
            switch (this.size) {
                case Enums.Size.Stretch:
                    element.style.width = "100%";
                    break;
                case Enums.Size.Auto:
                    element.style.maxWidth = "100%";
                    break;
                case Enums.Size.Small:
                    element.style.width = this.hostConfig.imageSizes.small + "px";
                    break;
                case Enums.Size.Large:
                    element.style.width = this.hostConfig.imageSizes.large + "px";
                    break;
                case Enums.Size.Medium:
                    element.style.width = this.hostConfig.imageSizes.medium + "px";
                    break;
            }
        }
    };
    Object.defineProperty(Image.prototype, "useDefaultSizing", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Image.prototype.internalRender = function () {
        var _this = this;
        var element = null;
        if (!Utils.isNullOrEmpty(this.url)) {
            element = document.createElement("div");
            element.style.display = "flex";
            element.style.alignItems = "flex-start";
            element.onkeypress = function (e) {
                if (_this.selectAction && (e.keyCode == 13 || e.keyCode == 32)) { // enter or space pressed
                    e.preventDefault();
                    e.cancelBubble = true;
                    _this.selectAction.execute();
                }
            };
            element.onclick = function (e) {
                if (_this.selectAction) {
                    e.preventDefault();
                    e.cancelBubble = true;
                    _this.selectAction.execute();
                }
            };
            switch (this.horizontalAlignment) {
                case Enums.HorizontalAlignment.Center:
                    element.style.justifyContent = "center";
                    break;
                case Enums.HorizontalAlignment.Right:
                    element.style.justifyContent = "flex-end";
                    break;
                default:
                    element.style.justifyContent = "flex-start";
                    break;
            }
            // Cache hostConfig to avoid walking the parent hierarchy multiple times
            var hostConfig = this.hostConfig;
            var imageElement = document.createElement("img");
            imageElement.onload = function (e) {
                raiseImageLoadedEvent(_this);
            };
            imageElement.onerror = function (e) {
                var card = _this.getRootElement();
                _this.renderedElement.innerHTML = "";
                if (card && card.designMode) {
                    var errorElement = document.createElement("div");
                    errorElement.style.display = "flex";
                    errorElement.style.alignItems = "center";
                    errorElement.style.justifyContent = "center";
                    errorElement.style.backgroundColor = "#EEEEEE";
                    errorElement.style.color = "black";
                    errorElement.innerText = ":-(";
                    errorElement.style.padding = "10px";
                    _this.applySize(errorElement);
                    _this.renderedElement.appendChild(errorElement);
                }
                raiseImageLoadedEvent(_this);
            };
            imageElement.style.maxHeight = "100%";
            imageElement.style.minWidth = "0";
            imageElement.classList.add(hostConfig.makeCssClassName("ac-image"));
            if (this.selectAction != null && hostConfig.supportsInteractivity) {
                imageElement.tabIndex = 0;
                imageElement.setAttribute("role", "button");
                imageElement.setAttribute("aria-label", this.selectAction.title);
                imageElement.classList.add(hostConfig.makeCssClassName("ac-selectable"));
            }
            this.applySize(imageElement);
            if (this.style === Enums.ImageStyle.Person) {
                imageElement.style.borderRadius = "50%";
                imageElement.style.backgroundPosition = "50% 50%";
                imageElement.style.backgroundRepeat = "no-repeat";
            }
            if (!Utils.isNullOrEmpty(this.backgroundColor)) {
                imageElement.style.backgroundColor = Utils.stringToCssColor(this.backgroundColor);
            }
            imageElement.src = this.url;
            imageElement.alt = this.altText;
            element.appendChild(imageElement);
        }
        return element;
    };
    Image.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        if (this._selectAction) {
            Utils.setProperty(result, "selectAction", this._selectAction.toJSON());
        }
        Utils.setEnumProperty(Enums.ImageStyle, result, "style", this.style, Enums.ImageStyle.Default);
        Utils.setProperty(result, "backgroundColor", this.backgroundColor);
        Utils.setProperty(result, "url", this.url);
        Utils.setEnumProperty(Enums.Size, result, "size", this.size, Enums.Size.Auto);
        if (this.pixelWidth) {
            Utils.setProperty(result, "width", this.pixelWidth + "px");
        }
        if (this.pixelHeight) {
            Utils.setProperty(result, "height", this.pixelHeight + "px");
        }
        Utils.setProperty(result, "altText", this.altText);
        return result;
    };
    Image.prototype.getJsonTypeName = function () {
        return "Image";
    };
    Image.prototype.getActionById = function (id) {
        var result = _super.prototype.getActionById.call(this, id);
        if (!result && this.selectAction) {
            result = this.selectAction.getActionById(id);
        }
        return result;
    };
    Image.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.url = Utils.getStringValue(json["url"]);
        this.backgroundColor = Utils.getStringValue(json["backgroundColor"]);
        var styleString = Utils.getStringValue(json["style"]);
        if (styleString && styleString.toLowerCase() === "normal") {
            this.style = Enums.ImageStyle.Default;
            raiseParseError({
                error: Enums.ValidationError.Deprecated,
                message: "The Image.style value \"normal\" is deprecated and will be removed. Use \"default\" instead."
            }, errors);
        }
        else {
            this.style = Utils.getEnumValue(Enums.ImageStyle, styleString, this.style);
        }
        this.size = Utils.getEnumValue(Enums.Size, json["size"], this.size);
        this.altText = Utils.getStringValue(json["altText"]);
        // pixelWidth and pixelHeight are only parsed for backwards compatibility.
        // Payloads should use the width and height proerties instead.
        if (json["pixelWidth"] && typeof json["pixelWidth"] === "number") {
            this.pixelWidth = json["pixelWidth"];
            raiseParseError({
                error: Enums.ValidationError.Deprecated,
                message: "The pixelWidth property is deprecated and will be removed. Use the width property instead."
            }, errors);
        }
        if (json["pixelHeight"] && typeof json["pixelHeight"] === "number") {
            this.pixelHeight = json["pixelHeight"];
            raiseParseError({
                error: Enums.ValidationError.Deprecated,
                message: "The pixelHeight property is deprecated and will be removed. Use the height property instead."
            }, errors);
        }
        var size = this.parseDimension("width", json["width"], errors);
        if (size > 0) {
            this.pixelWidth = size;
        }
        size = this.parseDimension("height", json["height"], errors);
        if (size > 0) {
            this.pixelHeight = size;
        }
        this.selectAction = createActionInstance(this, json["selectAction"], [ShowCardAction.JsonTypeName], !this.isDesignMode(), errors);
    };
    Image.prototype.getResourceInformation = function () {
        if (!Utils.isNullOrEmpty(this.url)) {
            return [{ url: this.url, mimeType: "image" }];
        }
        else {
            return [];
        }
    };
    Object.defineProperty(Image.prototype, "selectAction", {
        get: function () {
            return this._selectAction;
        },
        set: function (value) {
            this._selectAction = value;
            if (this._selectAction) {
                this._selectAction.setParent(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    return Image;
}(CardElement));
exports.Image = Image;
var CardElementContainer = /** @class */ (function (_super) {
    __extends(CardElementContainer, _super);
    function CardElementContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._selectAction = null;
        _this.allowVerticalOverflow = false;
        return _this;
    }
    CardElementContainer.prototype.isElementAllowed = function (element, forbiddenElementTypes) {
        if (!this.hostConfig.supportsInteractivity && element.isInteractive) {
            return false;
        }
        if (forbiddenElementTypes) {
            for (var _i = 0, forbiddenElementTypes_1 = forbiddenElementTypes; _i < forbiddenElementTypes_1.length; _i++) {
                var forbiddenElementType = forbiddenElementTypes_1[_i];
                if (element.getJsonTypeName() === forbiddenElementType) {
                    return false;
                }
            }
        }
        return true;
    };
    CardElementContainer.prototype.applyPadding = function () {
        _super.prototype.applyPadding.call(this);
        if (!this.renderedElement) {
            return;
        }
        var physicalPadding = new Shared.SpacingDefinition();
        if (this.getEffectivePadding()) {
            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());
        }
        this.renderedElement.style.paddingTop = physicalPadding.top + "px";
        this.renderedElement.style.paddingRight = physicalPadding.right + "px";
        this.renderedElement.style.paddingBottom = physicalPadding.bottom + "px";
        this.renderedElement.style.paddingLeft = physicalPadding.left + "px";
        this.renderedElement.style.marginRight = "0";
        this.renderedElement.style.marginLeft = "0";
    };
    CardElementContainer.prototype.getSelectAction = function () {
        return this._selectAction;
    };
    CardElementContainer.prototype.setSelectAction = function (value) {
        this._selectAction = value;
        if (this._selectAction) {
            this._selectAction.setParent(this);
        }
    };
    Object.defineProperty(CardElementContainer.prototype, "isSelectable", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    CardElementContainer.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        if (this.isSelectable) {
            this._selectAction = createActionInstance(this, json["selectAction"], [ShowCardAction.JsonTypeName], !this.isDesignMode(), errors);
        }
    };
    CardElementContainer.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        if (this._selectAction && this.isSelectable) {
            Utils.setProperty(result, "selectAction", this._selectAction.toJSON());
        }
        return result;
    };
    CardElementContainer.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        for (var i = 0; i < this.getItemCount(); i++) {
            var item = this.getItemAt(i);
            if (!this.hostConfig.supportsInteractivity && item.isInteractive) {
                context.addFailure(this, {
                    error: Enums.ValidationError.InteractivityNotAllowed,
                    message: "Interactivity is not allowed."
                });
            }
            if (!this.isElementAllowed(item, this.getForbiddenElementTypes())) {
                context.addFailure(this, {
                    error: Enums.ValidationError.InteractivityNotAllowed,
                    message: "Elements of type " + item.getJsonTypeName() + " are not allowed in this container."
                });
            }
            item.internalValidateProperties(context);
        }
        if (this._selectAction) {
            this._selectAction.internalValidateProperties(context);
        }
    };
    CardElementContainer.prototype.render = function () {
        var _this = this;
        var element = _super.prototype.render.call(this);
        var hostConfig = this.hostConfig;
        if (this.allowVerticalOverflow) {
            element.style.overflowX = "hidden";
            element.style.overflowY = "auto";
        }
        if (element && this.isSelectable && this._selectAction && hostConfig.supportsInteractivity) {
            element.classList.add(hostConfig.makeCssClassName("ac-selectable"));
            element.tabIndex = 0;
            element.setAttribute("role", "button");
            element.setAttribute("aria-label", this._selectAction.title);
            element.onclick = function (e) {
                if (_this._selectAction != null) {
                    e.preventDefault();
                    e.cancelBubble = true;
                    _this._selectAction.execute();
                }
            };
            element.onkeypress = function (e) {
                if (_this._selectAction != null && (e.keyCode == 13 || e.keyCode == 32)) {
                    // Enter or space pressed
                    e.preventDefault();
                    e.cancelBubble = true;
                    _this._selectAction.execute();
                }
            };
        }
        return element;
    };
    CardElementContainer.prototype.updateLayout = function (processChildren) {
        if (processChildren === void 0) { processChildren = true; }
        _super.prototype.updateLayout.call(this, processChildren);
        if (processChildren) {
            for (var i = 0; i < this.getItemCount(); i++) {
                this.getItemAt(i).updateLayout();
            }
        }
    };
    CardElementContainer.prototype.getAllInputs = function () {
        var result = [];
        for (var i = 0; i < this.getItemCount(); i++) {
            result = result.concat(this.getItemAt(i).getAllInputs());
        }
        return result;
    };
    CardElementContainer.prototype.getResourceInformation = function () {
        var result = [];
        for (var i = 0; i < this.getItemCount(); i++) {
            result = result.concat(this.getItemAt(i).getResourceInformation());
        }
        return result;
    };
    CardElementContainer.prototype.getElementById = function (id) {
        var result = _super.prototype.getElementById.call(this, id);
        if (!result) {
            for (var i = 0; i < this.getItemCount(); i++) {
                result = this.getItemAt(i).getElementById(id);
                if (result) {
                    break;
                }
            }
        }
        return result;
    };
    return CardElementContainer;
}(CardElement));
exports.CardElementContainer = CardElementContainer;
var ImageSet = /** @class */ (function (_super) {
    __extends(ImageSet, _super);
    function ImageSet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._images = [];
        _this.imageSize = Enums.Size.Medium;
        return _this;
    }
    ImageSet.prototype.internalRender = function () {
        var element = null;
        if (this._images.length > 0) {
            element = document.createElement("div");
            element.style.display = "flex";
            element.style.flexWrap = "wrap";
            for (var i = 0; i < this._images.length; i++) {
                this._images[i].size = this.imageSize;
                var renderedImage = this._images[i].render();
                renderedImage.style.display = "inline-flex";
                renderedImage.style.margin = "0px";
                renderedImage.style.marginRight = "10px";
                renderedImage.style.maxHeight = this.hostConfig.imageSet.maxImageHeight + "px";
                Utils.appendChild(element, renderedImage);
            }
        }
        return element;
    };
    ImageSet.prototype.getItemCount = function () {
        return this._images.length;
    };
    ImageSet.prototype.getItemAt = function (index) {
        return this._images[index];
    };
    ImageSet.prototype.getFirstVisibleRenderedItem = function () {
        return this._images && this._images.length > 0 ? this._images[0] : null;
    };
    ImageSet.prototype.getLastVisibleRenderedItem = function () {
        return this._images && this._images.length > 0 ? this._images[this._images.length - 1] : null;
    };
    ImageSet.prototype.removeItem = function (item) {
        if (item instanceof Image) {
            var itemIndex = this._images.indexOf(item);
            if (itemIndex >= 0) {
                this._images.splice(itemIndex, 1);
                item.setParent(null);
                this.updateLayout();
                return true;
            }
        }
        return false;
    };
    ImageSet.prototype.getJsonTypeName = function () {
        return "ImageSet";
    };
    ImageSet.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setEnumProperty(Enums.Size, result, "imageSize", this.imageSize, Enums.Size.Medium);
        if (this._images.length > 0) {
            var images = [];
            for (var _i = 0, _a = this._images; _i < _a.length; _i++) {
                var image = _a[_i];
                images.push(image.toJSON());
            }
            Utils.setProperty(result, "images", images);
        }
        return result;
    };
    ImageSet.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.imageSize = Utils.getEnumValue(Enums.Size, json["imageSize"], Enums.Size.Medium);
        if (json["images"] != null) {
            var jsonImages = json["images"];
            this._images = [];
            for (var i = 0; i < jsonImages.length; i++) {
                var image = new Image();
                image.parse(jsonImages[i], errors);
                this.addImage(image);
            }
        }
    };
    ImageSet.prototype.addImage = function (image) {
        if (!image.parent) {
            this._images.push(image);
            image.setParent(this);
        }
        else {
            throw new Error("This image already belongs to another ImageSet");
        }
    };
    ImageSet.prototype.indexOf = function (cardElement) {
        return cardElement instanceof Image ? this._images.indexOf(cardElement) : -1;
    };
    return ImageSet;
}(CardElementContainer));
exports.ImageSet = ImageSet;
var MediaSource = /** @class */ (function (_super) {
    __extends(MediaSource, _super);
    function MediaSource(url, mimeType) {
        if (url === void 0) { url = undefined; }
        if (mimeType === void 0) { mimeType = undefined; }
        var _this = _super.call(this) || this;
        _this.url = url;
        _this.mimeType = mimeType;
        return _this;
    }
    MediaSource.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.mimeType = Utils.getStringValue(json["mimeType"]);
        this.url = Utils.getStringValue(json["url"]);
    };
    MediaSource.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "mimeType", this.mimeType);
        Utils.setProperty(result, "url", this.url);
        return result;
    };
    return MediaSource;
}(SerializableObject));
exports.MediaSource = MediaSource;
var Media = /** @class */ (function (_super) {
    __extends(Media, _super);
    function Media() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sources = [];
        return _this;
    }
    Media.prototype.getPosterUrl = function () {
        return this.poster ? this.poster : this.hostConfig.media.defaultPoster;
    };
    Media.prototype.processSources = function () {
        this._selectedSources = [];
        this._selectedMediaType = undefined;
        for (var _i = 0, _a = this.sources; _i < _a.length; _i++) {
            var source = _a[_i];
            var mimeComponents = source.mimeType ? source.mimeType.split('/') : [];
            if (mimeComponents.length == 2) {
                if (!this._selectedMediaType) {
                    var index = Media.supportedMediaTypes.indexOf(mimeComponents[0]);
                    if (index >= 0) {
                        this._selectedMediaType = Media.supportedMediaTypes[index];
                    }
                }
                if (mimeComponents[0] == this._selectedMediaType) {
                    this._selectedSources.push(source);
                }
            }
        }
    };
    Media.prototype.renderPoster = function () {
        var _this = this;
        var playButtonArrowWidth = 12;
        var playButtonArrowHeight = 15;
        var posterRootElement = document.createElement("div");
        posterRootElement.className = this.hostConfig.makeCssClassName("ac-media-poster");
        posterRootElement.setAttribute("role", "contentinfo");
        posterRootElement.setAttribute("aria-label", this.altText ? this.altText : "Media content");
        posterRootElement.style.position = "relative";
        posterRootElement.style.display = "flex";
        var posterUrl = this.getPosterUrl();
        if (posterUrl) {
            var posterImageElement_1 = document.createElement("img");
            posterImageElement_1.style.width = "100%";
            posterImageElement_1.style.height = "100%";
            posterImageElement_1.onerror = function (e) {
                posterImageElement_1.parentNode.removeChild(posterImageElement_1);
                posterRootElement.classList.add("empty");
                posterRootElement.style.minHeight = "150px";
            };
            posterImageElement_1.src = posterUrl;
            posterRootElement.appendChild(posterImageElement_1);
        }
        else {
            posterRootElement.classList.add("empty");
            posterRootElement.style.minHeight = "150px";
        }
        if (this.hostConfig.supportsInteractivity && this._selectedSources.length > 0) {
            var playButtonOuterElement = document.createElement("div");
            playButtonOuterElement.setAttribute("role", "button");
            playButtonOuterElement.setAttribute("aria-label", "Play media");
            playButtonOuterElement.className = this.hostConfig.makeCssClassName("ac-media-playButton");
            playButtonOuterElement.style.display = "flex";
            playButtonOuterElement.style.alignItems = "center";
            playButtonOuterElement.style.justifyContent = "center";
            playButtonOuterElement.onclick = function (e) {
                if (_this.hostConfig.media.allowInlinePlayback) {
                    e.preventDefault();
                    e.cancelBubble = true;
                    var mediaPlayerElement = _this.renderMediaPlayer();
                    _this.renderedElement.innerHTML = "";
                    _this.renderedElement.appendChild(mediaPlayerElement);
                    mediaPlayerElement.play();
                }
                else {
                    if (Media.onPlay) {
                        e.preventDefault();
                        e.cancelBubble = true;
                        Media.onPlay(_this);
                    }
                }
            };
            var playButtonInnerElement = document.createElement("div");
            playButtonInnerElement.className = this.hostConfig.makeCssClassName("ac-media-playButton-arrow");
            playButtonInnerElement.style.width = playButtonArrowWidth + "px";
            playButtonInnerElement.style.height = playButtonArrowHeight + "px";
            playButtonInnerElement.style.borderTopWidth = (playButtonArrowHeight / 2) + "px";
            playButtonInnerElement.style.borderBottomWidth = (playButtonArrowHeight / 2) + "px";
            playButtonInnerElement.style.borderLeftWidth = playButtonArrowWidth + "px";
            playButtonInnerElement.style.borderRightWidth = "0";
            playButtonInnerElement.style.borderStyle = "solid";
            playButtonInnerElement.style.borderTopColor = "transparent";
            playButtonInnerElement.style.borderRightColor = "transparent";
            playButtonInnerElement.style.borderBottomColor = "transparent";
            playButtonInnerElement.style.transform = "translate(" + (playButtonArrowWidth / 10) + "px,0px)";
            playButtonOuterElement.appendChild(playButtonInnerElement);
            var playButtonContainer = document.createElement("div");
            playButtonContainer.style.position = "absolute";
            playButtonContainer.style.left = "0";
            playButtonContainer.style.top = "0";
            playButtonContainer.style.width = "100%";
            playButtonContainer.style.height = "100%";
            playButtonContainer.style.display = "flex";
            playButtonContainer.style.justifyContent = "center";
            playButtonContainer.style.alignItems = "center";
            playButtonContainer.appendChild(playButtonOuterElement);
            posterRootElement.appendChild(playButtonContainer);
        }
        return posterRootElement;
    };
    Media.prototype.renderMediaPlayer = function () {
        var mediaElement;
        if (this._selectedMediaType == "video") {
            var videoPlayer = document.createElement("video");
            var posterUrl = this.getPosterUrl();
            if (posterUrl) {
                videoPlayer.poster = posterUrl;
            }
            mediaElement = videoPlayer;
        }
        else {
            mediaElement = document.createElement("audio");
        }
        mediaElement.controls = true;
        mediaElement.preload = "none";
        mediaElement.style.width = "100%";
        for (var _i = 0, _a = this.sources; _i < _a.length; _i++) {
            var source = _a[_i];
            var src = document.createElement("source");
            src.src = source.url;
            src.type = source.mimeType;
            mediaElement.appendChild(src);
        }
        return mediaElement;
    };
    Media.prototype.internalRender = function () {
        var element = document.createElement("div");
        element.className = this.hostConfig.makeCssClassName("ac-media");
        this.processSources();
        element.appendChild(this.renderPoster());
        return element;
    };
    Media.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.poster = Utils.getStringValue(json["poster"]);
        this.altText = Utils.getStringValue(json["altText"]);
        this.sources = [];
        if (Array.isArray(json["sources"])) {
            for (var _i = 0, _a = json["sources"]; _i < _a.length; _i++) {
                var jsonSource = _a[_i];
                var source = new MediaSource();
                source.parse(jsonSource, errors);
                this.sources.push(source);
            }
        }
    };
    Media.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "poster", this.poster);
        Utils.setProperty(result, "altText", this.altText);
        /*
        if (this.sources.length > 0) {
            let serializedSources = [];

            for (let source of this.sources) {
                serializedSources.push(source.toJSON());
            }

            Utils.setProperty(result, "sources", serializedSources);
        }
        */
        Utils.setArrayProperty(result, "sources", this.sources);
        return result;
    };
    Media.prototype.getJsonTypeName = function () {
        return "Media";
    };
    Media.prototype.getResourceInformation = function () {
        var result = [];
        var posterUrl = this.getPosterUrl();
        if (!Utils.isNullOrEmpty(posterUrl)) {
            result.push({ url: posterUrl, mimeType: "image" });
        }
        for (var _i = 0, _a = this.sources; _i < _a.length; _i++) {
            var mediaSource = _a[_i];
            if (!Utils.isNullOrEmpty(mediaSource.url)) {
                result.push({ url: mediaSource.url, mimeType: mediaSource.mimeType });
            }
        }
        return result;
    };
    Object.defineProperty(Media.prototype, "selectedMediaType", {
        get: function () {
            return this._selectedMediaType;
        },
        enumerable: true,
        configurable: true
    });
    Media.supportedMediaTypes = ["audio", "video"];
    Media.onPlay = null;
    return Media;
}(CardElement));
exports.Media = Media;
var InputValidationOptions = /** @class */ (function (_super) {
    __extends(InputValidationOptions, _super);
    function InputValidationOptions() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.necessity = Enums.InputValidationNecessity.Optional;
        _this.errorMessage = undefined;
        return _this;
    }
    InputValidationOptions.prototype.parse = function (json) {
        _super.prototype.parse.call(this, json);
        this.necessity = Utils.getEnumValue(Enums.InputValidationNecessity, json["necessity"], this.necessity);
        this.errorMessage = Utils.getStringValue(json["errorMessage"]);
    };
    InputValidationOptions.prototype.toJSON = function () {
        if (this.necessity != Enums.InputValidationNecessity.Optional || !Utils.isNullOrEmpty(this.errorMessage)) {
            var result = _super.prototype.toJSON.call(this);
            Utils.setEnumProperty(Enums.InputValidationNecessity, result, "necessity", this.necessity, Enums.InputValidationNecessity.Optional);
            Utils.setProperty(result, "errorMessage", this.errorMessage);
            return result;
        }
        else {
            return null;
        }
    };
    return InputValidationOptions;
}(SerializableObject));
exports.InputValidationOptions = InputValidationOptions;
var Input = /** @class */ (function (_super) {
    __extends(Input, _super);
    function Input() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.validation = new InputValidationOptions();
        return _this;
    }
    Object.defineProperty(Input.prototype, "isNullable", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "renderedInputControlElement", {
        get: function () {
            return this._renderedInputControlElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "inputControlContainerElement", {
        get: function () {
            return this._inputControlContainerElement;
        },
        enumerable: true,
        configurable: true
    });
    Input.prototype.overrideInternalRender = function () {
        var hostConfig = this.hostConfig;
        this._outerContainerElement = document.createElement("div");
        this._outerContainerElement.style.display = "flex";
        this._outerContainerElement.style.flexDirection = "column";
        this._inputControlContainerElement = document.createElement("div");
        this._inputControlContainerElement.className = hostConfig.makeCssClassName("ac-input-container");
        this._inputControlContainerElement.style.display = "flex";
        this._renderedInputControlElement = this.internalRender();
        this._renderedInputControlElement.style.minWidth = "0px";
        if (AdaptiveCard.useBuiltInInputValidation && this.isNullable && this.validation.necessity == Enums.InputValidationNecessity.RequiredWithVisualCue) {
            this._renderedInputControlElement.classList.add(hostConfig.makeCssClassName("ac-input-required"));
        }
        this._inputControlContainerElement.appendChild(this._renderedInputControlElement);
        this._outerContainerElement.appendChild(this._inputControlContainerElement);
        return this._outerContainerElement;
    };
    Input.prototype.valueChanged = function () {
        this.resetValidationFailureCue();
        if (this.onValueChanged) {
            this.onValueChanged(this);
        }
        raiseInputValueChangedEvent(this);
    };
    Input.prototype.resetValidationFailureCue = function () {
        if (AdaptiveCard.useBuiltInInputValidation && this.renderedElement) {
            this._renderedInputControlElement.classList.remove(this.hostConfig.makeCssClassName("ac-input-validation-failed"));
            if (this._errorMessageElement) {
                this._outerContainerElement.removeChild(this._errorMessageElement);
                this._errorMessageElement = null;
            }
        }
    };
    Input.prototype.showValidationErrorMessage = function () {
        if (this.renderedElement && AdaptiveCard.useBuiltInInputValidation && AdaptiveCard.displayInputValidationErrors && !Utils.isNullOrEmpty(this.validation.errorMessage)) {
            this._errorMessageElement = document.createElement("span");
            this._errorMessageElement.className = this.hostConfig.makeCssClassName("ac-input-validation-error-message");
            this._errorMessageElement.textContent = this.validation.errorMessage;
            this._outerContainerElement.appendChild(this._errorMessageElement);
        }
    };
    Input.prototype.parseInputValue = function (value) {
        return value;
    };
    Input.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "title", this.title);
        Utils.setProperty(result, "value", this.renderedElement && !Utils.isNullOrEmpty(this.value) ? this.value : this.defaultValue);
        if (AdaptiveCard.useBuiltInInputValidation) {
            Utils.setProperty(result, "validation", this.validation.toJSON());
        }
        return result;
    };
    Input.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (Utils.isNullOrEmpty(this.id)) {
            context.addFailure(this, {
                error: Enums.ValidationError.PropertyCantBeNull,
                message: "All inputs must have a unique Id"
            });
        }
    };
    Input.prototype.validateValue = function () {
        if (AdaptiveCard.useBuiltInInputValidation) {
            this.resetValidationFailureCue();
            var result = this.validation.necessity != Enums.InputValidationNecessity.Optional ? !Utils.isNullOrEmpty(this.value) : true;
            if (!result && this.renderedElement) {
                this._renderedInputControlElement.classList.add(this.hostConfig.makeCssClassName("ac-input-validation-failed"));
                this.showValidationErrorMessage();
            }
            return result;
        }
        else {
            return true;
        }
    };
    Input.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.id = Utils.getStringValue(json["id"]);
        this.defaultValue = Utils.getStringValue(json["value"]);
        if (AdaptiveCard.useBuiltInInputValidation) {
            var jsonValidation = json["validation"];
            if (jsonValidation) {
                this.validation.parse(jsonValidation);
            }
        }
    };
    Input.prototype.getAllInputs = function () {
        return [this];
    };
    Object.defineProperty(Input.prototype, "defaultValue", {
        get: function () {
            return this._defaultValue;
        },
        set: function (value) {
            this._defaultValue = this.parseInputValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Input.prototype, "isInteractive", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    return Input;
}(CardElement));
exports.Input = Input;
var TextInput = /** @class */ (function (_super) {
    __extends(TextInput, _super);
    function TextInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isMultiline = false;
        _this.style = Enums.InputTextStyle.Text;
        return _this;
    }
    TextInput.prototype.internalRender = function () {
        var _this = this;
        if (this.isMultiline) {
            var textareaElement = document.createElement("textarea");
            textareaElement.className = this.hostConfig.makeCssClassName("ac-input", "ac-textInput", "ac-multiline");
            textareaElement.style.flex = "1 1 auto";
            textareaElement.tabIndex = 0;
            if (!Utils.isNullOrEmpty(this.placeholder)) {
                textareaElement.placeholder = this.placeholder;
                textareaElement.setAttribute("aria-label", this.placeholder);
            }
            if (!Utils.isNullOrEmpty(this.defaultValue)) {
                textareaElement.value = this.defaultValue;
            }
            if (this.maxLength && this.maxLength > 0) {
                textareaElement.maxLength = this.maxLength;
            }
            textareaElement.oninput = function () { _this.valueChanged(); };
            textareaElement.onkeypress = function (e) {
                // Ctrl+Enter pressed
                if (e.keyCode == 10 && _this.inlineAction) {
                    _this.inlineAction.execute();
                }
            };
            return textareaElement;
        }
        else {
            var inputElement = document.createElement("input");
            inputElement.type = Enums.InputTextStyle[this.style].toLowerCase();
            inputElement.className = this.hostConfig.makeCssClassName("ac-input", "ac-textInput");
            inputElement.style.flex = "1 1 auto";
            inputElement.tabIndex = 0;
            if (!Utils.isNullOrEmpty(this.placeholder)) {
                inputElement.placeholder = this.placeholder;
                inputElement.setAttribute("aria-label", this.placeholder);
            }
            if (!Utils.isNullOrEmpty(this.defaultValue)) {
                inputElement.value = this.defaultValue;
            }
            if (this.maxLength && this.maxLength > 0) {
                inputElement.maxLength = this.maxLength;
            }
            inputElement.oninput = function () { _this.valueChanged(); };
            inputElement.onkeypress = function (e) {
                // Enter pressed
                if (e.keyCode == 13 && _this.inlineAction) {
                    _this.inlineAction.execute();
                }
            };
            return inputElement;
        }
    };
    TextInput.prototype.overrideInternalRender = function () {
        var _this = this;
        var renderedInputControl = _super.prototype.overrideInternalRender.call(this);
        if (this.inlineAction) {
            var button_1 = document.createElement("button");
            button_1.className = this.hostConfig.makeCssClassName("ac-inlineActionButton");
            button_1.onclick = function (e) {
                e.preventDefault();
                e.cancelBubble = true;
                _this.inlineAction.execute();
            };
            if (!Utils.isNullOrEmpty(this.inlineAction.iconUrl)) {
                button_1.classList.add("iconOnly");
                var icon_1 = document.createElement("img");
                icon_1.style.height = "100%";
                // The below trick is necessary as a workaround in Chrome where the icon is initially displayed
                // at its native size then resized to 100% of the button's height. This cfreates an unpleasant
                // flicker. On top of that, Chrome's flex implementation fails to prperly re-layout the button
                // after the image has loaded and been gicven its final size. The below trick also fixes that.
                icon_1.style.display = "none";
                icon_1.onload = function () {
                    icon_1.style.removeProperty("display");
                };
                icon_1.onerror = function () {
                    button_1.removeChild(icon_1);
                    button_1.classList.remove("iconOnly");
                    button_1.classList.add("textOnly");
                    button_1.textContent = !Utils.isNullOrEmpty(_this.inlineAction.title) ? _this.inlineAction.title : "Title";
                };
                icon_1.src = this.inlineAction.iconUrl;
                button_1.appendChild(icon_1);
                if (!Utils.isNullOrEmpty(this.inlineAction.title)) {
                    button_1.title = this.inlineAction.title;
                }
            }
            else {
                button_1.classList.add("textOnly");
                button_1.textContent = !Utils.isNullOrEmpty(this.inlineAction.title) ? this.inlineAction.title : "Title";
            }
            button_1.style.marginLeft = "8px";
            this.inputControlContainerElement.appendChild(button_1);
        }
        return renderedInputControl;
    };
    TextInput.prototype.getJsonTypeName = function () {
        return "Input.Text";
    };
    TextInput.prototype.getActionById = function (id) {
        var result = _super.prototype.getActionById.call(this, id);
        if (!result && this.inlineAction) {
            result = this.inlineAction.getActionById(id);
        }
        return result;
    };
    TextInput.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "placeholder", this.placeholder);
        Utils.setNumberProperty(result, "maxLength", this.maxLength);
        Utils.setProperty(result, "isMultiline", this.isMultiline, false);
        Utils.setEnumProperty(Enums.InputTextStyle, result, "style", this.style, Enums.InputTextStyle.Text);
        if (this._inlineAction) {
            Utils.setProperty(result, "inlineAction", this._inlineAction.toJSON());
        }
        return result;
    };
    TextInput.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.maxLength = Utils.getNumberValue(json["maxLength"]);
        this.isMultiline = Utils.getBoolValue(json["isMultiline"], this.isMultiline);
        this.placeholder = Utils.getStringValue(json["placeholder"]);
        this.style = Utils.getEnumValue(Enums.InputTextStyle, json["style"], this.style);
        this.inlineAction = createActionInstance(this, json["inlineAction"], [ShowCardAction.JsonTypeName], !this.isDesignMode(), errors);
    };
    Object.defineProperty(TextInput.prototype, "inlineAction", {
        get: function () {
            return this._inlineAction;
        },
        set: function (value) {
            this._inlineAction = value;
            if (this._inlineAction) {
                this._inlineAction.setParent(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextInput.prototype, "value", {
        get: function () {
            if (this.renderedInputControlElement) {
                if (this.isMultiline) {
                    return this.renderedInputControlElement.value;
                }
                else {
                    return this.renderedInputControlElement.value;
                }
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    return TextInput;
}(Input));
exports.TextInput = TextInput;
var ToggleInput = /** @class */ (function (_super) {
    __extends(ToggleInput, _super);
    function ToggleInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.valueOn = "true";
        _this.valueOff = "false";
        _this.wrap = false;
        return _this;
    }
    ToggleInput.prototype.internalRender = function () {
        var _this = this;
        var element = document.createElement("div");
        element.className = this.hostConfig.makeCssClassName("ac-input", "ac-toggleInput");
        element.style.width = "100%";
        element.style.display = "flex";
        element.style.alignItems = "center";
        this._checkboxInputElement = document.createElement("input");
        this._checkboxInputElement.id = Utils.generateUniqueId();
        this._checkboxInputElement.type = "checkbox";
        this._checkboxInputElement.style.display = "inline-block";
        this._checkboxInputElement.style.verticalAlign = "middle";
        this._checkboxInputElement.style.margin = "0";
        this._checkboxInputElement.style.flex = "0 0 auto";
        this._checkboxInputElement.setAttribute("aria-label", this.title);
        this._checkboxInputElement.tabIndex = 0;
        if (this.defaultValue == this.valueOn) {
            this._checkboxInputElement.checked = true;
        }
        this._checkboxInputElement.onchange = function () { _this.valueChanged(); };
        Utils.appendChild(element, this._checkboxInputElement);
        if (!Utils.isNullOrEmpty(this.title) || this.isDesignMode()) {
            var label = new Label();
            label.setParent(this);
            label.forElementId = this._checkboxInputElement.id;
            label.hostConfig = this.hostConfig;
            label.text = Utils.isNullOrEmpty(this.title) ? this.getJsonTypeName() : this.title;
            label.useMarkdown = AdaptiveCard.useMarkdownInRadioButtonAndCheckbox;
            label.wrap = this.wrap;
            var labelElement = label.render();
            labelElement.style.display = "inline-block";
            labelElement.style.flex = "1 1 auto";
            labelElement.style.marginLeft = "6px";
            labelElement.style.verticalAlign = "middle";
            var spacerElement = document.createElement("div");
            spacerElement.style.width = "6px";
            Utils.appendChild(element, spacerElement);
            Utils.appendChild(element, labelElement);
        }
        return element;
    };
    Object.defineProperty(ToggleInput.prototype, "isNullable", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    ToggleInput.prototype.getJsonTypeName = function () {
        return "Input.Toggle";
    };
    ToggleInput.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "valueOn", this.valueOn, "true");
        Utils.setProperty(result, "valueOff", this.valueOff, "false");
        Utils.setProperty(result, "wrap", this.wrap);
        return result;
    };
    ToggleInput.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.title = Utils.getStringValue(json["title"]);
        this.valueOn = Utils.getStringValue(json["valueOn"], this.valueOn);
        this.valueOff = Utils.getStringValue(json["valueOff"], this.valueOff);
        this.wrap = Utils.getBoolValue(json["wrap"], this.wrap);
    };
    Object.defineProperty(ToggleInput.prototype, "value", {
        get: function () {
            if (this._checkboxInputElement) {
                return this._checkboxInputElement.checked ? this.valueOn : this.valueOff;
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    return ToggleInput;
}(Input));
exports.ToggleInput = ToggleInput;
var Choice = /** @class */ (function (_super) {
    __extends(Choice, _super);
    function Choice(title, value) {
        if (title === void 0) { title = undefined; }
        if (value === void 0) { value = undefined; }
        var _this = _super.call(this) || this;
        _this.title = title;
        _this.value = value;
        return _this;
    }
    Choice.prototype.parse = function (json) {
        _super.prototype.parse.call(this, json);
        this.title = Utils.getStringValue(json["title"], "");
        this.value = Utils.getStringValue(json["value"], "");
    };
    Choice.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "title", this.title);
        Utils.setProperty(result, "value", this.value);
        return result;
    };
    return Choice;
}(SerializableObject));
exports.Choice = Choice;
var ChoiceSetInput = /** @class */ (function (_super) {
    __extends(ChoiceSetInput, _super);
    function ChoiceSetInput() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.choices = [];
        _this.isCompact = false;
        _this.isMultiSelect = false;
        _this.wrap = false;
        return _this;
    }
    ChoiceSetInput.getUniqueCategoryName = function () {
        var uniqueCwtegoryName = "__ac-category" + ChoiceSetInput.uniqueCategoryCounter;
        ChoiceSetInput.uniqueCategoryCounter++;
        return uniqueCwtegoryName;
    };
    ChoiceSetInput.prototype.internalRender = function () {
        var _this = this;
        if (!this.isMultiSelect) {
            if (this.isCompact) {
                // Render as a combo box
                this._selectElement = document.createElement("select");
                this._selectElement.className = this.hostConfig.makeCssClassName("ac-input", "ac-multichoiceInput", "ac-choiceSetInput-compact");
                this._selectElement.style.width = "100%";
                var option = document.createElement("option");
                option.selected = true;
                option.disabled = true;
                option.hidden = true;
                option.value = "";
                if (this.placeholder) {
                    option.text = this.placeholder;
                }
                Utils.appendChild(this._selectElement, option);
                for (var i = 0; i < this.choices.length; i++) {
                    var option_1 = document.createElement("option");
                    option_1.value = this.choices[i].value;
                    option_1.text = this.choices[i].title;
                    option_1.setAttribute("aria-label", this.choices[i].title);
                    if (this.choices[i].value == this.defaultValue) {
                        option_1.selected = true;
                    }
                    Utils.appendChild(this._selectElement, option_1);
                }
                this._selectElement.onchange = function () { _this.valueChanged(); };
                return this._selectElement;
            }
            else {
                // Render as a series of radio buttons
                var uniqueCategoryName = ChoiceSetInput.getUniqueCategoryName();
                var element = document.createElement("div");
                element.className = this.hostConfig.makeCssClassName("ac-input", "ac-choiceSetInput-expanded");
                element.style.width = "100%";
                this._toggleInputs = [];
                for (var i_1 = 0; i_1 < this.choices.length; i_1++) {
                    var radioInput = document.createElement("input");
                    radioInput.id = Utils.generateUniqueId();
                    radioInput.type = "radio";
                    radioInput.style.margin = "0";
                    radioInput.style.display = "inline-block";
                    radioInput.style.verticalAlign = "middle";
                    radioInput.name = Utils.isNullOrEmpty(this.id) ? uniqueCategoryName : this.id;
                    radioInput.value = this.choices[i_1].value;
                    radioInput.style.flex = "0 0 auto";
                    radioInput.setAttribute("aria-label", this.choices[i_1].title);
                    if (this.choices[i_1].value == this.defaultValue) {
                        radioInput.checked = true;
                    }
                    radioInput.onchange = function () { _this.valueChanged(); };
                    this._toggleInputs.push(radioInput);
                    var label = new Label();
                    label.setParent(this);
                    label.forElementId = radioInput.id;
                    label.hostConfig = this.hostConfig;
                    label.text = Utils.isNullOrEmpty(this.choices[i_1].title) ? "Choice " + i_1 : this.choices[i_1].title;
                    label.useMarkdown = AdaptiveCard.useMarkdownInRadioButtonAndCheckbox;
                    label.wrap = this.wrap;
                    var labelElement = label.render();
                    labelElement.style.display = "inline-block";
                    labelElement.style.flex = "1 1 auto";
                    labelElement.style.marginLeft = "6px";
                    labelElement.style.verticalAlign = "middle";
                    var spacerElement = document.createElement("div");
                    spacerElement.style.width = "6px";
                    var compoundInput = document.createElement("div");
                    compoundInput.style.display = "flex";
                    compoundInput.style.alignItems = "center";
                    Utils.appendChild(compoundInput, radioInput);
                    Utils.appendChild(compoundInput, spacerElement);
                    Utils.appendChild(compoundInput, labelElement);
                    Utils.appendChild(element, compoundInput);
                }
                return element;
            }
        }
        else {
            // Render as a list of toggle inputs
            var defaultValues = this.defaultValue ? this.defaultValue.split(this.hostConfig.choiceSetInputValueSeparator) : null;
            var element = document.createElement("div");
            element.className = this.hostConfig.makeCssClassName("ac-input", "ac-choiceSetInput-multiSelect");
            element.style.width = "100%";
            this._toggleInputs = [];
            for (var i_2 = 0; i_2 < this.choices.length; i_2++) {
                var checkboxInput = document.createElement("input");
                checkboxInput.id = Utils.generateUniqueId();
                checkboxInput.type = "checkbox";
                checkboxInput.style.margin = "0";
                checkboxInput.style.display = "inline-block";
                checkboxInput.style.verticalAlign = "middle";
                checkboxInput.value = this.choices[i_2].value;
                checkboxInput.style.flex = "0 0 auto";
                checkboxInput.setAttribute("aria-label", this.choices[i_2].title);
                if (defaultValues) {
                    if (defaultValues.indexOf(this.choices[i_2].value) >= 0) {
                        checkboxInput.checked = true;
                    }
                }
                checkboxInput.onchange = function () { _this.valueChanged(); };
                this._toggleInputs.push(checkboxInput);
                var label = new Label();
                label.setParent(this);
                label.forElementId = checkboxInput.id;
                label.hostConfig = this.hostConfig;
                label.text = Utils.isNullOrEmpty(this.choices[i_2].title) ? "Choice " + i_2 : this.choices[i_2].title;
                label.useMarkdown = AdaptiveCard.useMarkdownInRadioButtonAndCheckbox;
                label.wrap = this.wrap;
                var labelElement = label.render();
                labelElement.style.display = "inline-block";
                labelElement.style.flex = "1 1 auto";
                labelElement.style.marginLeft = "6px";
                labelElement.style.verticalAlign = "middle";
                var spacerElement = document.createElement("div");
                spacerElement.style.width = "6px";
                var compoundInput = document.createElement("div");
                compoundInput.style.display = "flex";
                compoundInput.style.alignItems = "center";
                Utils.appendChild(compoundInput, checkboxInput);
                Utils.appendChild(compoundInput, spacerElement);
                Utils.appendChild(compoundInput, labelElement);
                Utils.appendChild(element, compoundInput);
            }
            return element;
        }
    };
    ChoiceSetInput.prototype.getJsonTypeName = function () {
        return "Input.ChoiceSet";
    };
    ChoiceSetInput.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "placeholder", this.placeholder);
        Utils.setArrayProperty(result, "choices", this.choices);
        Utils.setProperty(result, "style", this.isCompact ? null : "expanded");
        Utils.setProperty(result, "isMultiSelect", this.isMultiSelect, false);
        Utils.setProperty(result, "wrap", this.wrap, false);
        return result;
    };
    ChoiceSetInput.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (this.choices.length == 0) {
            context.addFailure(this, {
                error: Enums.ValidationError.CollectionCantBeEmpty,
                message: "An Input.ChoiceSet must have at least one choice defined."
            });
        }
        for (var _i = 0, _a = this.choices; _i < _a.length; _i++) {
            var choice = _a[_i];
            if (!choice.title || !choice.value) {
                context.addFailure(this, {
                    error: Enums.ValidationError.PropertyCantBeNull,
                    message: "All choices in an Input.ChoiceSet must have their title and value properties set."
                });
            }
        }
    };
    ChoiceSetInput.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.isCompact = !(json["style"] === "expanded");
        this.isMultiSelect = Utils.getBoolValue(json["isMultiSelect"], this.isMultiSelect);
        this.placeholder = Utils.getStringValue(json["placeholder"]);
        this.choices = [];
        if (Array.isArray(json["choices"])) {
            for (var _i = 0, _a = json["choices"]; _i < _a.length; _i++) {
                var jsonChoice = _a[_i];
                var choice = new Choice();
                choice.parse(jsonChoice);
                this.choices.push(choice);
            }
        }
        this.wrap = Utils.getBoolValue(json["wrap"], this.wrap);
    };
    Object.defineProperty(ChoiceSetInput.prototype, "value", {
        get: function () {
            if (!this.isMultiSelect) {
                if (this.isCompact) {
                    if (this._selectElement) {
                        return this._selectElement.selectedIndex > 0 ? this._selectElement.value : null;
                    }
                    return null;
                }
                else {
                    if (!this._toggleInputs || this._toggleInputs.length == 0) {
                        return null;
                    }
                    for (var i = 0; i < this._toggleInputs.length; i++) {
                        if (this._toggleInputs[i].checked) {
                            return this._toggleInputs[i].value;
                        }
                    }
                    return null;
                }
            }
            else {
                if (!this._toggleInputs || this._toggleInputs.length == 0) {
                    return null;
                }
                var result = "";
                for (var i = 0; i < this._toggleInputs.length; i++) {
                    if (this._toggleInputs[i].checked) {
                        if (result != "") {
                            result += this.hostConfig.choiceSetInputValueSeparator;
                        }
                        result += this._toggleInputs[i].value;
                    }
                }
                return result == "" ? null : result;
            }
        },
        enumerable: true,
        configurable: true
    });
    ChoiceSetInput.uniqueCategoryCounter = 0;
    return ChoiceSetInput;
}(Input));
exports.ChoiceSetInput = ChoiceSetInput;
var NumberInput = /** @class */ (function (_super) {
    __extends(NumberInput, _super);
    function NumberInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberInput.prototype.internalRender = function () {
        var _this = this;
        this._numberInputElement = document.createElement("input");
        this._numberInputElement.setAttribute("type", "number");
        if (this.min) {
            this._numberInputElement.setAttribute("min", this.min.toString());
        }
        if (this.max) {
            this._numberInputElement.setAttribute("max", this.max.toString());
        }
        this._numberInputElement.className = this.hostConfig.makeCssClassName("ac-input", "ac-numberInput");
        this._numberInputElement.style.width = "100%";
        this._numberInputElement.tabIndex = 0;
        if (!Utils.isNullOrEmpty(this.defaultValue)) {
            this._numberInputElement.value = this.defaultValue;
        }
        if (!Utils.isNullOrEmpty(this.placeholder)) {
            this._numberInputElement.placeholder = this.placeholder;
            this._numberInputElement.setAttribute("aria-label", this.placeholder);
        }
        this._numberInputElement.oninput = function () { _this.valueChanged(); };
        return this._numberInputElement;
    };
    NumberInput.prototype.getJsonTypeName = function () {
        return "Input.Number";
    };
    NumberInput.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "placeholder", this.placeholder);
        Utils.setNumberProperty(result, "min", this.min);
        Utils.setNumberProperty(result, "max", this.max);
        return result;
    };
    NumberInput.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.placeholder = Utils.getStringValue(json["placeholder"]);
        this.min = Utils.getNumberValue(json["min"]);
        this.max = Utils.getNumberValue(json["max"]);
    };
    Object.defineProperty(NumberInput.prototype, "min", {
        get: function () {
            return this._min;
        },
        set: function (value) {
            this._min = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberInput.prototype, "max", {
        get: function () {
            return this._max;
        },
        set: function (value) {
            this._max = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberInput.prototype, "value", {
        get: function () {
            return this._numberInputElement ? this._numberInputElement.value : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberInput.prototype, "valueAsNumber", {
        get: function () {
            return this._numberInputElement ? this._numberInputElement.valueAsNumber : undefined;
        },
        enumerable: true,
        configurable: true
    });
    return NumberInput;
}(Input));
exports.NumberInput = NumberInput;
var DateInput = /** @class */ (function (_super) {
    __extends(DateInput, _super);
    function DateInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DateInput.prototype.internalRender = function () {
        var _this = this;
        this._dateInputElement = document.createElement("input");
        this._dateInputElement.setAttribute("type", "date");
        this._dateInputElement.setAttribute("min", this.min);
        this._dateInputElement.setAttribute("max", this.max);
        this._dateInputElement.className = this.hostConfig.makeCssClassName("ac-input", "ac-dateInput");
        this._dateInputElement.style.width = "100%";
        this._dateInputElement.oninput = function () { _this.valueChanged(); };
        if (!Utils.isNullOrEmpty(this.defaultValue)) {
            this._dateInputElement.value = this.defaultValue;
        }
        return this._dateInputElement;
    };
    DateInput.prototype.getJsonTypeName = function () {
        return "Input.Date";
    };
    DateInput.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "min", this.min);
        Utils.setProperty(result, "max", this.max);
        return result;
    };
    DateInput.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.min = Utils.getStringValue(json["min"]);
        this.max = Utils.getStringValue(json["max"]);
    };
    Object.defineProperty(DateInput.prototype, "min", {
        get: function () {
            return this._min;
        },
        set: function (value) {
            this._min = this.parseInputValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateInput.prototype, "max", {
        get: function () {
            return this._max;
        },
        set: function (value) {
            this._max = this.parseInputValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateInput.prototype, "value", {
        get: function () {
            return this._dateInputElement ? this._dateInputElement.value : null;
        },
        enumerable: true,
        configurable: true
    });
    return DateInput;
}(Input));
exports.DateInput = DateInput;
var TimeInput = /** @class */ (function (_super) {
    __extends(TimeInput, _super);
    function TimeInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TimeInput.prototype.internalRender = function () {
        var _this = this;
        this._timeInputElement = document.createElement("input");
        this._timeInputElement.setAttribute("type", "time");
        this._timeInputElement.setAttribute("min", this.min);
        this._timeInputElement.setAttribute("max", this.max);
        this._timeInputElement.className = this.hostConfig.makeCssClassName("ac-input", "ac-timeInput");
        this._timeInputElement.style.width = "100%";
        this._timeInputElement.oninput = function () { _this.valueChanged(); };
        if (!Utils.isNullOrEmpty(this.defaultValue)) {
            this._timeInputElement.value = this.defaultValue;
        }
        return this._timeInputElement;
    };
    TimeInput.prototype.parseInputValue = function (value) {
        if (/^[0-9]{2}:[0-9]{2}$/.test(value)) {
            return value;
        }
        else {
            return null;
        }
    };
    TimeInput.prototype.getJsonTypeName = function () {
        return "Input.Time";
    };
    TimeInput.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "min", this.min);
        Utils.setProperty(result, "max", this.max);
        return result;
    };
    TimeInput.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.min = Utils.getStringValue(json["min"]);
        this.max = Utils.getStringValue(json["max"]);
    };
    Object.defineProperty(TimeInput.prototype, "min", {
        get: function () {
            return this._min;
        },
        set: function (value) {
            this._min = this.parseInputValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeInput.prototype, "max", {
        get: function () {
            return this._max;
        },
        set: function (value) {
            this._max = this.parseInputValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeInput.prototype, "value", {
        get: function () {
            return this._timeInputElement ? this._timeInputElement.value : null;
        },
        enumerable: true,
        configurable: true
    });
    return TimeInput;
}(Input));
exports.TimeInput = TimeInput;
var ActionButtonState;
(function (ActionButtonState) {
    ActionButtonState[ActionButtonState["Normal"] = 0] = "Normal";
    ActionButtonState[ActionButtonState["Expanded"] = 1] = "Expanded";
    ActionButtonState[ActionButtonState["Subdued"] = 2] = "Subdued";
})(ActionButtonState || (ActionButtonState = {}));
var ActionButton = /** @class */ (function () {
    function ActionButton(action, parentContainerStyle) {
        this._state = ActionButtonState.Normal;
        this.onClick = null;
        this.action = action;
        this._parentContainerStyle = parentContainerStyle;
    }
    ActionButton.prototype.updateCssStyle = function () {
        var _a, _b;
        var hostConfig = this.action.parent.hostConfig;
        this.action.renderedElement.className = hostConfig.makeCssClassName("ac-pushButton");
        if (!Utils.isNullOrEmpty(this._parentContainerStyle)) {
            this.action.renderedElement.classList.add("style-" + this._parentContainerStyle);
        }
        if (this.action instanceof ShowCardAction) {
            this.action.renderedElement.classList.add(hostConfig.makeCssClassName("expandable"));
        }
        this.action.renderedElement.classList.remove(hostConfig.makeCssClassName("expanded"));
        this.action.renderedElement.classList.remove(hostConfig.makeCssClassName("subdued"));
        switch (this._state) {
            case ActionButtonState.Expanded:
                this.action.renderedElement.classList.add(hostConfig.makeCssClassName("expanded"));
                break;
            case ActionButtonState.Subdued:
                this.action.renderedElement.classList.add(hostConfig.makeCssClassName("subdued"));
                break;
        }
        if (!Utils.isNullOrEmpty(this.action.style)) {
            if (this.action.style === Enums.ActionStyle.Positive) {
                (_a = this.action.renderedElement.classList).add.apply(_a, hostConfig.makeCssClassNames("primary", "style-positive"));
            }
            else {
                (_b = this.action.renderedElement.classList).add.apply(_b, hostConfig.makeCssClassNames("style-" + this.action.style.toLowerCase()));
            }
        }
    };
    ActionButton.prototype.render = function () {
        var _this = this;
        this.action.render();
        this.action.renderedElement.onclick = function (e) {
            e.preventDefault();
            e.cancelBubble = true;
            _this.click();
        };
        this.updateCssStyle();
    };
    ActionButton.prototype.click = function () {
        if (this.onClick != null) {
            this.onClick(this);
        }
    };
    Object.defineProperty(ActionButton.prototype, "state", {
        get: function () {
            return this._state;
        },
        set: function (value) {
            this._state = value;
            this.updateCssStyle();
        },
        enumerable: true,
        configurable: true
    });
    return ActionButton;
}());
var Action = /** @class */ (function (_super) {
    __extends(Action, _super);
    function Action() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._shouldFallback = false;
        _this._parent = null;
        _this._actionCollection = null; // hold the reference to its action collection
        _this._renderedElement = null;
        _this.requires = new HostConfig.HostCapabilities();
        _this.style = Enums.ActionStyle.Default;
        return _this;
    }
    Action.prototype.setCollection = function (actionCollection) {
        this._actionCollection = actionCollection;
    };
    Action.prototype.addCssClasses = function (element) {
        // Do nothing in base implementation
    };
    Action.prototype.internalGetReferencedInputs = function (allInputs) {
        return {};
    };
    Action.prototype.internalPrepareForExecution = function (inputs) {
        // Do nothing in base implementation
    };
    Action.prototype.internalValidateInputs = function (referencedInputs) {
        var result = [];
        if (AdaptiveCard.useBuiltInInputValidation && !this.ignoreInputValidation) {
            for (var _i = 0, _a = Object.keys(referencedInputs); _i < _a.length; _i++) {
                var key = _a[_i];
                var input = referencedInputs[key];
                if (!input.validateValue()) {
                    result.push(input);
                }
            }
        }
        return result;
    };
    Action.prototype.getHref = function () {
        return "";
    };
    Action.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "type", this.getJsonTypeName());
        Utils.setProperty(result, "title", this.title);
        Utils.setProperty(result, "iconUrl", this.iconUrl);
        Utils.setProperty(result, "style", this.style, Enums.ActionStyle.Default);
        return result;
    };
    Action.prototype.render = function (baseCssClass) {
        if (baseCssClass === void 0) { baseCssClass = "ac-pushButton"; }
        // Cache hostConfig for perf
        var hostConfig = this.parent.hostConfig;
        var buttonElement = document.createElement("button");
        this.addCssClasses(buttonElement);
        buttonElement.setAttribute("aria-label", this.title);
        buttonElement.type = "button";
        buttonElement.style.display = "flex";
        buttonElement.style.alignItems = "center";
        buttonElement.style.justifyContent = "center";
        var hasTitle = !Utils.isNullOrEmpty(this.title);
        var titleElement = document.createElement("div");
        titleElement.style.overflow = "hidden";
        titleElement.style.textOverflow = "ellipsis";
        if (!(hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle || hostConfig.actions.allowTitleToWrap)) {
            titleElement.style.whiteSpace = "nowrap";
        }
        if (hasTitle) {
            titleElement.innerText = this.title;
        }
        if (Utils.isNullOrEmpty(this.iconUrl)) {
            buttonElement.classList.add("noIcon");
            buttonElement.appendChild(titleElement);
        }
        else {
            var iconElement = document.createElement("img");
            iconElement.src = this.iconUrl;
            iconElement.style.width = hostConfig.actions.iconSize + "px";
            iconElement.style.height = hostConfig.actions.iconSize + "px";
            iconElement.style.flex = "0 0 auto";
            if (hostConfig.actions.iconPlacement == Enums.ActionIconPlacement.AboveTitle) {
                buttonElement.classList.add("iconAbove");
                buttonElement.style.flexDirection = "column";
                if (hasTitle) {
                    iconElement.style.marginBottom = "4px";
                }
            }
            else {
                buttonElement.classList.add("iconLeft");
                if (hasTitle) {
                    iconElement.style.marginRight = "4px";
                }
            }
            buttonElement.appendChild(iconElement);
            buttonElement.appendChild(titleElement);
        }
        this._renderedElement = buttonElement;
    };
    Action.prototype.setParent = function (value) {
        this._parent = value;
    };
    Action.prototype.execute = function () {
        if (this.onExecute) {
            this.onExecute(this);
        }
        raiseExecuteActionEvent(this);
    };
    Action.prototype.prepareForExecution = function () {
        var referencedInputs = this.getReferencedInputs();
        if (this.internalValidateInputs(referencedInputs).length > 0) {
            return false;
        }
        this.internalPrepareForExecution(referencedInputs);
        return true;
    };
    ;
    Action.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        raiseParseActionEvent(this, json, errors);
        this.requires.parse(json["requires"], errors);
        if (!json["title"] && json["title"] !== "") {
            raiseParseError({
                error: Enums.ValidationError.PropertyCantBeNull,
                message: "Actions should always have a title."
            }, errors);
        }
        this.title = Utils.getStringValue(json["title"]);
        this.iconUrl = Utils.getStringValue(json["iconUrl"]);
        this.style = Utils.getStringValue(json["style"], this.style);
    };
    Action.prototype.remove = function () {
        if (this._actionCollection) {
            return this._actionCollection.removeAction(this);
        }
        return false;
    };
    Action.prototype.getAllInputs = function () {
        return [];
    };
    Action.prototype.getResourceInformation = function () {
        if (!Utils.isNullOrEmpty(this.iconUrl)) {
            return [{ url: this.iconUrl, mimeType: "image" }];
        }
        else {
            return [];
        }
    };
    Action.prototype.getActionById = function (id) {
        if (this.id == id) {
            return this;
        }
    };
    Action.prototype.getReferencedInputs = function () {
        return this.internalGetReferencedInputs(this.parent.getRootElement().getAllInputs());
    };
    Action.prototype.validateInputs = function () {
        return this.internalValidateInputs(this.getReferencedInputs());
    };
    Action.prototype.shouldFallback = function () {
        return this._shouldFallback || !this.requires.areAllMet(this.parent.hostConfig.hostCapabilities);
    };
    Object.defineProperty(Action.prototype, "isPrimary", {
        get: function () {
            return this.style == Enums.ActionStyle.Positive;
        },
        set: function (value) {
            if (value) {
                this.style = Enums.ActionStyle.Positive;
            }
            else {
                if (this.style == Enums.ActionStyle.Positive) {
                    this.style = Enums.ActionStyle.Default;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "ignoreInputValidation", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Action.prototype, "renderedElement", {
        get: function () {
            return this._renderedElement;
        },
        enumerable: true,
        configurable: true
    });
    return Action;
}(CardObject));
exports.Action = Action;
var SubmitAction = /** @class */ (function (_super) {
    __extends(SubmitAction, _super);
    function SubmitAction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._isPrepared = false;
        _this._ignoreInputValidation = false;
        return _this;
    }
    SubmitAction.prototype.internalGetReferencedInputs = function (allInputs) {
        var result = {};
        for (var _i = 0, allInputs_1 = allInputs; _i < allInputs_1.length; _i++) {
            var input = allInputs_1[_i];
            result[input.id] = input;
        }
        return result;
    };
    SubmitAction.prototype.internalPrepareForExecution = function (inputs) {
        if (this._originalData) {
            this._processedData = JSON.parse(JSON.stringify(this._originalData));
        }
        else {
            this._processedData = {};
        }
        for (var _i = 0, _a = Object.keys(inputs); _i < _a.length; _i++) {
            var key = _a[_i];
            var input = inputs[key];
            if (input.value != null) {
                this._processedData[input.id] = input.value;
            }
        }
        this._isPrepared = true;
    };
    SubmitAction.prototype.getJsonTypeName = function () {
        return SubmitAction.JsonTypeName;
    };
    SubmitAction.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "ignoreInputValidation", this.ignoreInputValidation, false);
        Utils.setProperty(result, "data", this._originalData);
        return result;
    };
    SubmitAction.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this._ignoreInputValidation = Utils.getBoolValue(json["ignoreInputValidation"], this._ignoreInputValidation);
        this.data = json["data"];
    };
    Object.defineProperty(SubmitAction.prototype, "ignoreInputValidation", {
        get: function () {
            return this._ignoreInputValidation;
        },
        set: function (value) {
            this._ignoreInputValidation = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubmitAction.prototype, "data", {
        get: function () {
            return this._isPrepared ? this._processedData : this._originalData;
        },
        set: function (value) {
            this._originalData = value;
            this._isPrepared = false;
        },
        enumerable: true,
        configurable: true
    });
    // Note the "weird" way this field is declared is to work around a breaking
    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    SubmitAction.JsonTypeName = "Action.Submit";
    return SubmitAction;
}(Action));
exports.SubmitAction = SubmitAction;
var OpenUrlAction = /** @class */ (function (_super) {
    __extends(OpenUrlAction, _super);
    function OpenUrlAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OpenUrlAction.prototype.getJsonTypeName = function () {
        return OpenUrlAction.JsonTypeName;
    };
    OpenUrlAction.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "url", this.url);
        return result;
    };
    OpenUrlAction.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (Utils.isNullOrEmpty(this.url)) {
            context.addFailure(this, {
                error: Enums.ValidationError.PropertyCantBeNull,
                message: "An Action.OpenUrl must have its url property set."
            });
        }
    };
    OpenUrlAction.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.url = Utils.getStringValue(json["url"]);
    };
    OpenUrlAction.prototype.getHref = function () {
        return this.url;
    };
    // Note the "weird" way this field is declared is to work around a breaking
    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    OpenUrlAction.JsonTypeName = "Action.OpenUrl";
    return OpenUrlAction;
}(Action));
exports.OpenUrlAction = OpenUrlAction;
var ToggleVisibilityAction = /** @class */ (function (_super) {
    __extends(ToggleVisibilityAction, _super);
    function ToggleVisibilityAction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.targetElements = {};
        return _this;
    }
    ToggleVisibilityAction.prototype.getJsonTypeName = function () {
        return ToggleVisibilityAction.JsonTypeName;
    };
    ToggleVisibilityAction.prototype.execute = function () {
        for (var _i = 0, _a = Object.keys(this.targetElements); _i < _a.length; _i++) {
            var elementId = _a[_i];
            var targetElement = this.parent.getRootElement().getElementById(elementId);
            if (targetElement) {
                if (typeof this.targetElements[elementId] === "boolean") {
                    targetElement.isVisible = this.targetElements[elementId];
                }
                else {
                    targetElement.isVisible = !targetElement.isVisible;
                }
            }
        }
    };
    ToggleVisibilityAction.prototype.parse = function (json) {
        _super.prototype.parse.call(this, json);
        this.targetElements = {};
        var jsonTargetElements = json["targetElements"];
        if (jsonTargetElements && Array.isArray(jsonTargetElements)) {
            for (var _i = 0, jsonTargetElements_1 = jsonTargetElements; _i < jsonTargetElements_1.length; _i++) {
                var item = jsonTargetElements_1[_i];
                if (typeof item === "string") {
                    this.targetElements[item] = undefined;
                }
                else if (typeof item === "object") {
                    var jsonElementId = item["elementId"];
                    if (jsonElementId && typeof jsonElementId === "string") {
                        this.targetElements[jsonElementId] = Utils.getBoolValue(item["isVisible"], undefined);
                    }
                }
            }
        }
    };
    ToggleVisibilityAction.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        var targetElements = [];
        for (var _i = 0, _a = Object.keys(this.targetElements); _i < _a.length; _i++) {
            var id = _a[_i];
            if (typeof this.targetElements[id] === "boolean") {
                targetElements.push({
                    elementId: id,
                    isVisible: this.targetElements[id]
                });
            }
            else {
                targetElements.push(id);
            }
        }
        result["targetElements"] = targetElements;
        return result;
    };
    ToggleVisibilityAction.prototype.addTargetElement = function (elementId, isVisible) {
        if (isVisible === void 0) { isVisible = undefined; }
        this.targetElements[elementId] = isVisible;
    };
    ToggleVisibilityAction.prototype.removeTargetElement = function (elementId) {
        delete this.targetElements[elementId];
    };
    // Note the "weird" way this field is declared is to work around a breaking
    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    ToggleVisibilityAction.JsonTypeName = "Action.ToggleVisibility";
    return ToggleVisibilityAction;
}(Action));
exports.ToggleVisibilityAction = ToggleVisibilityAction;
var HttpHeader = /** @class */ (function (_super) {
    __extends(HttpHeader, _super);
    function HttpHeader(name, value) {
        if (name === void 0) { name = ""; }
        if (value === void 0) { value = ""; }
        var _this = _super.call(this) || this;
        _this._value = new Shared.StringWithSubstitutions();
        _this.name = name;
        _this.value = value;
        return _this;
    }
    HttpHeader.prototype.parse = function (json) {
        _super.prototype.parse.call(this, json);
        this.name = Utils.getStringValue(json["name"]);
        this.value = Utils.getStringValue(json["value"]);
    };
    HttpHeader.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "name", this.name);
        Utils.setProperty(result, "value", this._value.getOriginal());
        return result;
    };
    HttpHeader.prototype.getReferencedInputs = function (inputs, referencedInputs) {
        this._value.getReferencedInputs(inputs, referencedInputs);
    };
    HttpHeader.prototype.prepareForExecution = function (inputs) {
        this._value.substituteInputValues(inputs, Shared.ContentTypes.applicationXWwwFormUrlencoded);
    };
    Object.defineProperty(HttpHeader.prototype, "value", {
        get: function () {
            return this._value.get();
        },
        set: function (newValue) {
            this._value.set(newValue);
        },
        enumerable: true,
        configurable: true
    });
    return HttpHeader;
}(SerializableObject));
exports.HttpHeader = HttpHeader;
var HttpAction = /** @class */ (function (_super) {
    __extends(HttpAction, _super);
    function HttpAction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._url = new Shared.StringWithSubstitutions();
        _this._body = new Shared.StringWithSubstitutions();
        _this._headers = [];
        _this._ignoreInputValidation = false;
        return _this;
    }
    HttpAction.prototype.internalGetReferencedInputs = function (allInputs) {
        var result = {};
        this._url.getReferencedInputs(allInputs, result);
        for (var _i = 0, _a = this._headers; _i < _a.length; _i++) {
            var header = _a[_i];
            header.getReferencedInputs(allInputs, result);
        }
        this._body.getReferencedInputs(allInputs, result);
        return result;
    };
    HttpAction.prototype.internalPrepareForExecution = function (inputs) {
        this._url.substituteInputValues(inputs, Shared.ContentTypes.applicationXWwwFormUrlencoded);
        var contentType = Shared.ContentTypes.applicationJson;
        for (var _i = 0, _a = this._headers; _i < _a.length; _i++) {
            var header = _a[_i];
            header.prepareForExecution(inputs);
            if (header.name && header.name.toLowerCase() == "content-type") {
                contentType = header.value;
            }
        }
        this._body.substituteInputValues(inputs, contentType);
    };
    ;
    HttpAction.prototype.getJsonTypeName = function () {
        return HttpAction.JsonTypeName;
    };
    HttpAction.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "method", this.method);
        Utils.setProperty(result, "url", this._url.getOriginal());
        Utils.setProperty(result, "body", this._body.getOriginal());
        Utils.setProperty(result, "ignoreInputValidation", this.ignoreInputValidation, false);
        Utils.setArrayProperty(result, "headers", this.headers);
        return result;
    };
    HttpAction.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (Utils.isNullOrEmpty(this.url)) {
            context.addFailure(this, {
                error: Enums.ValidationError.PropertyCantBeNull,
                message: "An Action.Http must have its url property set."
            });
        }
        if (this.headers.length > 0) {
            for (var _i = 0, _a = this.headers; _i < _a.length; _i++) {
                var header = _a[_i];
                if (!header.name) {
                    context.addFailure(this, {
                        error: Enums.ValidationError.PropertyCantBeNull,
                        message: "All headers of an Action.Http must have their name and value properties set."
                    });
                }
            }
        }
    };
    HttpAction.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.url = Utils.getStringValue(json["url"]);
        this.method = Utils.getStringValue(json["method"]);
        this.body = Utils.getStringValue(json["body"]);
        this._ignoreInputValidation = Utils.getBoolValue(json["ignoreInputValidation"], this._ignoreInputValidation);
        this._headers = [];
        if (Array.isArray(json["headers"])) {
            for (var _i = 0, _a = json["headers"]; _i < _a.length; _i++) {
                var jsonHeader = _a[_i];
                var httpHeader = new HttpHeader();
                httpHeader.parse(jsonHeader);
                this.headers.push(httpHeader);
            }
        }
    };
    Object.defineProperty(HttpAction.prototype, "ignoreInputValidation", {
        get: function () {
            return this._ignoreInputValidation;
        },
        set: function (value) {
            this._ignoreInputValidation = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpAction.prototype, "url", {
        get: function () {
            return this._url.get();
        },
        set: function (value) {
            this._url.set(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpAction.prototype, "body", {
        get: function () {
            return this._body.get();
        },
        set: function (value) {
            this._body.set(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpAction.prototype, "headers", {
        get: function () {
            return this._headers ? this._headers : [];
        },
        set: function (value) {
            this._headers = value;
        },
        enumerable: true,
        configurable: true
    });
    // Note the "weird" way this field is declared is to work around a breaking
    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    HttpAction.JsonTypeName = "Action.Http";
    return HttpAction;
}(Action));
exports.HttpAction = HttpAction;
var ShowCardAction = /** @class */ (function (_super) {
    __extends(ShowCardAction, _super);
    function ShowCardAction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.card = new InlineAdaptiveCard();
        return _this;
    }
    ShowCardAction.prototype.addCssClasses = function (element) {
        _super.prototype.addCssClasses.call(this, element);
        element.classList.add(this.parent.hostConfig.makeCssClassName("expandable"));
    };
    ShowCardAction.prototype.getJsonTypeName = function () {
        return ShowCardAction.JsonTypeName;
    };
    ShowCardAction.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        if (this.card) {
            Utils.setProperty(result, "card", this.card.toJSON());
        }
        return result;
    };
    ShowCardAction.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        this.card.internalValidateProperties(context);
    };
    ShowCardAction.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        var jsonCard = json["card"];
        if (jsonCard) {
            this.card.parse(jsonCard, errors);
        }
        else {
            raiseParseError({
                error: Enums.ValidationError.PropertyCantBeNull,
                message: "An Action.ShowCard must have its \"card\" property set to a valid AdaptiveCard object."
            }, errors);
        }
    };
    ShowCardAction.prototype.setParent = function (value) {
        _super.prototype.setParent.call(this, value);
        this.card.setParent(value);
    };
    ShowCardAction.prototype.getAllInputs = function () {
        return this.card.getAllInputs();
    };
    ShowCardAction.prototype.getResourceInformation = function () {
        return _super.prototype.getResourceInformation.call(this).concat(this.card.getResourceInformation());
    };
    ShowCardAction.prototype.getActionById = function (id) {
        var result = _super.prototype.getActionById.call(this, id);
        if (!result) {
            result = this.card.getActionById(id);
        }
        return result;
    };
    // Note the "weird" way this field is declared is to work around a breaking
    // change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    ShowCardAction.JsonTypeName = "Action.ShowCard";
    return ShowCardAction;
}(Action));
exports.ShowCardAction = ShowCardAction;
var ActionCollection = /** @class */ (function () {
    function ActionCollection(owner) {
        this._expandedAction = null;
        this._renderedActionCount = 0;
        this._actionCard = null;
        this.items = [];
        this.buttons = [];
        this._owner = owner;
    }
    ActionCollection.prototype.refreshContainer = function () {
        this._actionCardContainer.innerHTML = "";
        if (this._actionCard === null) {
            this._actionCardContainer.style.marginTop = "0px";
            return;
        }
        this._actionCardContainer.style.marginTop = this._renderedActionCount > 0 ? this._owner.hostConfig.actions.showCard.inlineTopMargin + "px" : "0px";
        var padding = this._owner.getEffectivePadding();
        this._owner.getImmediateSurroundingPadding(padding);
        var physicalPadding = this._owner.hostConfig.paddingDefinitionToSpacingDefinition(padding);
        if (this._actionCard !== null) {
            this._actionCard.style.paddingLeft = physicalPadding.left + "px";
            this._actionCard.style.paddingRight = physicalPadding.right + "px";
            this._actionCard.style.marginLeft = "-" + physicalPadding.left + "px";
            this._actionCard.style.marginRight = "-" + physicalPadding.right + "px";
            if (physicalPadding.bottom != 0 && !this._owner.isDesignMode()) {
                this._actionCard.style.paddingBottom = physicalPadding.bottom + "px";
                this._actionCard.style.marginBottom = "-" + physicalPadding.bottom + "px";
            }
            Utils.appendChild(this._actionCardContainer, this._actionCard);
        }
    };
    ActionCollection.prototype.layoutChanged = function () {
        this._owner.getRootElement().updateLayout();
    };
    ActionCollection.prototype.hideActionCard = function () {
        var previouslyExpandedAction = this._expandedAction;
        this._expandedAction = null;
        this._actionCard = null;
        this.refreshContainer();
        if (previouslyExpandedAction) {
            this.layoutChanged();
            raiseInlineCardExpandedEvent(previouslyExpandedAction, false);
        }
    };
    ActionCollection.prototype.showActionCard = function (action, suppressStyle, raiseEvent) {
        if (suppressStyle === void 0) { suppressStyle = false; }
        if (raiseEvent === void 0) { raiseEvent = true; }
        if (action.card == null) {
            return;
        }
        action.card.suppressStyle = suppressStyle;
        var renderedCard = action.card.renderedElement ? action.card.renderedElement : action.card.render();
        this._actionCard = renderedCard;
        this._expandedAction = action;
        this.refreshContainer();
        if (raiseEvent) {
            this.layoutChanged();
            raiseInlineCardExpandedEvent(action, true);
        }
    };
    ActionCollection.prototype.collapseExpandedAction = function () {
        for (var i = 0; i < this.buttons.length; i++) {
            this.buttons[i].state = ActionButtonState.Normal;
        }
        this.hideActionCard();
    };
    ActionCollection.prototype.expandShowCardAction = function (action, raiseEvent) {
        for (var i = 0; i < this.buttons.length; i++) {
            if (this.buttons[i].action !== action) {
                this.buttons[i].state = ActionButtonState.Subdued;
            }
            else {
                this.buttons[i].state = ActionButtonState.Expanded;
            }
        }
        this.showActionCard(action, !(this._owner.isAtTheVeryLeft() && this._owner.isAtTheVeryRight()), raiseEvent);
    };
    ActionCollection.prototype.actionClicked = function (actionButton) {
        if (!(actionButton.action instanceof ShowCardAction)) {
            for (var i = 0; i < this.buttons.length; i++) {
                this.buttons[i].state = ActionButtonState.Normal;
            }
            this.hideActionCard();
            actionButton.action.execute();
        }
        else {
            if (this._owner.hostConfig.actions.showCard.actionMode === Enums.ShowCardActionMode.Popup) {
                actionButton.action.execute();
            }
            else if (actionButton.action === this._expandedAction) {
                this.collapseExpandedAction();
            }
            else {
                this.expandShowCardAction(actionButton.action, true);
            }
        }
    };
    ActionCollection.prototype.getParentContainer = function () {
        if (this._owner instanceof Container) {
            return this._owner;
        }
        else {
            return this._owner.getParentContainer();
        }
    };
    ActionCollection.prototype.findActionButton = function (action) {
        for (var _i = 0, _a = this.buttons; _i < _a.length; _i++) {
            var actionButton = _a[_i];
            if (actionButton.action == action) {
                return actionButton;
            }
        }
        return null;
    };
    ActionCollection.prototype.parse = function (json, errors) {
        this.clear();
        if (json && json instanceof Array) {
            for (var _i = 0, json_1 = json; _i < json_1.length; _i++) {
                var jsonAction = json_1[_i];
                var action = createActionInstance(this._owner, jsonAction, [], !this._owner.isDesignMode(), errors);
                if (action) {
                    this.addAction(action);
                }
            }
        }
    };
    ActionCollection.prototype.toJSON = function () {
        if (this.items.length > 0) {
            var result = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var action = _a[_i];
                result.push(action.toJSON());
            }
            return result;
        }
        else {
            return null;
        }
    };
    ActionCollection.prototype.getActionById = function (id) {
        var result = null;
        for (var i = 0; i < this.items.length; i++) {
            result = this.items[i].getActionById(id);
            if (result) {
                break;
            }
        }
        return result;
    };
    ActionCollection.prototype.validateProperties = function (context) {
        if (this._owner.hostConfig.actions.maxActions && this.items.length > this._owner.hostConfig.actions.maxActions) {
            context.addFailure(this._owner, {
                error: Enums.ValidationError.TooManyActions,
                message: "A maximum of " + this._owner.hostConfig.actions.maxActions + " actions are allowed."
            });
        }
        if (this.items.length > 0 && !this._owner.hostConfig.supportsInteractivity) {
            context.addFailure(this._owner, {
                error: Enums.ValidationError.InteractivityNotAllowed,
                message: "Interactivity is not allowed."
            });
        }
        for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
            var item = _a[_i];
            if (!isActionAllowed(item, this._owner.getForbiddenActionTypes())) {
                context.addFailure(this._owner, {
                    error: Enums.ValidationError.ActionTypeNotAllowed,
                    message: "Actions of type " + item.getJsonTypeName() + " are not allowe."
                });
            }
            item.internalValidateProperties(context);
        }
    };
    ActionCollection.prototype.render = function (orientation, isDesignMode) {
        var _this = this;
        // Cache hostConfig for better perf
        var hostConfig = this._owner.hostConfig;
        if (!hostConfig.supportsInteractivity) {
            return null;
        }
        var element = document.createElement("div");
        var maxActions = hostConfig.actions.maxActions ? Math.min(hostConfig.actions.maxActions, this.items.length) : this.items.length;
        var forbiddenActionTypes = this._owner.getForbiddenActionTypes();
        this._actionCardContainer = document.createElement("div");
        this._renderedActionCount = 0;
        if (hostConfig.actions.preExpandSingleShowCardAction && maxActions == 1 && this.items[0] instanceof ShowCardAction && isActionAllowed(this.items[0], forbiddenActionTypes)) {
            this.showActionCard(this.items[0], true);
            this._renderedActionCount = 1;
        }
        else {
            var buttonStrip = document.createElement("div");
            buttonStrip.className = hostConfig.makeCssClassName("ac-actionSet");
            buttonStrip.style.display = "flex";
            if (orientation == Enums.Orientation.Horizontal) {
                buttonStrip.style.flexDirection = "row";
                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {
                    switch (this._owner.horizontalAlignment) {
                        case Enums.HorizontalAlignment.Center:
                            buttonStrip.style.justifyContent = "center";
                            break;
                        case Enums.HorizontalAlignment.Right:
                            buttonStrip.style.justifyContent = "flex-end";
                            break;
                        default:
                            buttonStrip.style.justifyContent = "flex-start";
                            break;
                    }
                }
                else {
                    switch (hostConfig.actions.actionAlignment) {
                        case Enums.ActionAlignment.Center:
                            buttonStrip.style.justifyContent = "center";
                            break;
                        case Enums.ActionAlignment.Right:
                            buttonStrip.style.justifyContent = "flex-end";
                            break;
                        default:
                            buttonStrip.style.justifyContent = "flex-start";
                            break;
                    }
                }
            }
            else {
                buttonStrip.style.flexDirection = "column";
                if (this._owner.horizontalAlignment && hostConfig.actions.actionAlignment != Enums.ActionAlignment.Stretch) {
                    switch (this._owner.horizontalAlignment) {
                        case Enums.HorizontalAlignment.Center:
                            buttonStrip.style.alignItems = "center";
                            break;
                        case Enums.HorizontalAlignment.Right:
                            buttonStrip.style.alignItems = "flex-end";
                            break;
                        default:
                            buttonStrip.style.alignItems = "flex-start";
                            break;
                    }
                }
                else {
                    switch (hostConfig.actions.actionAlignment) {
                        case Enums.ActionAlignment.Center:
                            buttonStrip.style.alignItems = "center";
                            break;
                        case Enums.ActionAlignment.Right:
                            buttonStrip.style.alignItems = "flex-end";
                            break;
                        case Enums.ActionAlignment.Stretch:
                            buttonStrip.style.alignItems = "stretch";
                            break;
                        default:
                            buttonStrip.style.alignItems = "flex-start";
                            break;
                    }
                }
            }
            var parentContainerStyle = this.getParentContainer().getEffectiveStyle();
            for (var i = 0; i < this.items.length; i++) {
                if (isActionAllowed(this.items[i], forbiddenActionTypes)) {
                    var actionButton = this.findActionButton(this.items[i]);
                    if (!actionButton) {
                        actionButton = new ActionButton(this.items[i], parentContainerStyle);
                        actionButton.onClick = function (ab) { _this.actionClicked(ab); };
                        this.buttons.push(actionButton);
                    }
                    actionButton.render();
                    if (hostConfig.actions.actionsOrientation == Enums.Orientation.Horizontal && hostConfig.actions.actionAlignment == Enums.ActionAlignment.Stretch) {
                        actionButton.action.renderedElement.style.flex = "0 1 100%";
                    }
                    else {
                        actionButton.action.renderedElement.style.flex = "0 1 auto";
                    }
                    buttonStrip.appendChild(actionButton.action.renderedElement);
                    this._renderedActionCount++;
                    if (this._renderedActionCount >= hostConfig.actions.maxActions || i == this.items.length - 1) {
                        break;
                    }
                    else if (hostConfig.actions.buttonSpacing > 0) {
                        var spacer = document.createElement("div");
                        if (orientation === Enums.Orientation.Horizontal) {
                            spacer.style.flex = "0 0 auto";
                            spacer.style.width = hostConfig.actions.buttonSpacing + "px";
                        }
                        else {
                            spacer.style.height = hostConfig.actions.buttonSpacing + "px";
                        }
                        Utils.appendChild(buttonStrip, spacer);
                    }
                }
            }
            var buttonStripContainer = document.createElement("div");
            buttonStripContainer.style.overflow = "hidden";
            buttonStripContainer.appendChild(buttonStrip);
            Utils.appendChild(element, buttonStripContainer);
        }
        Utils.appendChild(element, this._actionCardContainer);
        for (var i = 0; i < this.buttons.length; i++) {
            if (this.buttons[i].state == ActionButtonState.Expanded) {
                this.expandShowCardAction(this.buttons[i].action, false);
                break;
            }
        }
        return this._renderedActionCount > 0 ? element : null;
    };
    ActionCollection.prototype.addAction = function (action) {
        if (!action) {
            throw new Error("The action parameter cannot be null.");
        }
        if ((!action.parent || action.parent === this._owner) && this.items.indexOf(action) < 0) {
            this.items.push(action);
            if (!action.parent) {
                action.setParent(this._owner);
            }
            invokeSetCollection(action, this);
        }
        else {
            throw new Error("The action already belongs to another element.");
        }
    };
    ActionCollection.prototype.removeAction = function (action) {
        if (this.expandedAction && this._expandedAction == action) {
            this.collapseExpandedAction();
        }
        var actionIndex = this.items.indexOf(action);
        if (actionIndex >= 0) {
            this.items.splice(actionIndex, 1);
            action.setParent(null);
            invokeSetCollection(action, null);
            for (var i = 0; i < this.buttons.length; i++) {
                if (this.buttons[i].action == action) {
                    this.buttons.splice(i, 1);
                    break;
                }
            }
            return true;
        }
        return false;
    };
    ActionCollection.prototype.clear = function () {
        this.items = [];
        this.buttons = [];
        this._expandedAction = null;
        this._renderedActionCount = 0;
    };
    ActionCollection.prototype.getAllInputs = function () {
        var result = [];
        for (var i = 0; i < this.items.length; i++) {
            var action = this.items[i];
            result = result.concat(action.getAllInputs());
        }
        return result;
    };
    ActionCollection.prototype.getResourceInformation = function () {
        var result = [];
        for (var i = 0; i < this.items.length; i++) {
            result = result.concat(this.items[i].getResourceInformation());
        }
        return result;
    };
    Object.defineProperty(ActionCollection.prototype, "renderedActionCount", {
        get: function () {
            return this._renderedActionCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionCollection.prototype, "expandedAction", {
        get: function () {
            return this._expandedAction;
        },
        enumerable: true,
        configurable: true
    });
    return ActionCollection;
}());
var ActionSet = /** @class */ (function (_super) {
    __extends(ActionSet, _super);
    function ActionSet() {
        var _this = _super.call(this) || this;
        _this.orientation = null;
        _this._actionCollection = new ActionCollection(_this);
        return _this;
    }
    ActionSet.prototype.internalRender = function () {
        return this._actionCollection.render(this.orientation ? this.orientation : this.hostConfig.actions.actionsOrientation, this.isDesignMode());
    };
    ActionSet.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setEnumProperty(Enums.Orientation, result, "orientation", this.orientation);
        Utils.setProperty(result, "actions", this._actionCollection.toJSON());
        return result;
    };
    ActionSet.prototype.isBleedingAtBottom = function () {
        if (this._actionCollection.renderedActionCount == 0) {
            return _super.prototype.isBleedingAtBottom.call(this);
        }
        else {
            if (this._actionCollection.items.length == 1) {
                return this._actionCollection.expandedAction != null && !this.hostConfig.actions.preExpandSingleShowCardAction;
            }
            else {
                return this._actionCollection.expandedAction != null;
            }
        }
    };
    ActionSet.prototype.getJsonTypeName = function () {
        return "ActionSet";
    };
    ActionSet.prototype.getActionCount = function () {
        return this._actionCollection.items.length;
    };
    ActionSet.prototype.getActionAt = function (index) {
        if (index >= 0 && index < this.getActionCount()) {
            return this._actionCollection.items[index];
        }
        else {
            _super.prototype.getActionAt.call(this, index);
        }
    };
    ActionSet.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        this._actionCollection.validateProperties(context);
    };
    ActionSet.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        var jsonOrientation = json["orientation"];
        if (jsonOrientation) {
            this.orientation = Utils.getEnumValue(Enums.Orientation, jsonOrientation, Enums.Orientation.Horizontal);
        }
        this._actionCollection.parse(json["actions"], errors);
    };
    ActionSet.prototype.addAction = function (action) {
        this._actionCollection.addAction(action);
    };
    ActionSet.prototype.getAllInputs = function () {
        return this._actionCollection.getAllInputs();
    };
    ActionSet.prototype.getResourceInformation = function () {
        return this._actionCollection.getResourceInformation();
    };
    Object.defineProperty(ActionSet.prototype, "isInteractive", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    return ActionSet;
}(CardElement));
exports.ActionSet = ActionSet;
var StylableCardElementContainer = /** @class */ (function (_super) {
    __extends(StylableCardElementContainer, _super);
    function StylableCardElementContainer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._style = null;
        _this._bleed = false;
        return _this;
    }
    StylableCardElementContainer.prototype.applyBackground = function () {
        var styleDefinition = this.hostConfig.containerStyles.getStyleByName(this.style, this.hostConfig.containerStyles.getStyleByName(this.defaultStyle));
        if (!Utils.isNullOrEmpty(styleDefinition.backgroundColor)) {
            this.renderedElement.style.backgroundColor = Utils.stringToCssColor(styleDefinition.backgroundColor);
        }
    };
    StylableCardElementContainer.prototype.applyPadding = function () {
        _super.prototype.applyPadding.call(this);
        if (!this.renderedElement) {
            return;
        }
        var physicalPadding = new Shared.SpacingDefinition();
        if (this.getEffectivePadding()) {
            physicalPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(this.getEffectivePadding());
        }
        this.renderedElement.style.paddingTop = physicalPadding.top + "px";
        this.renderedElement.style.paddingRight = physicalPadding.right + "px";
        this.renderedElement.style.paddingBottom = physicalPadding.bottom + "px";
        this.renderedElement.style.paddingLeft = physicalPadding.left + "px";
        if (this.isBleeding()) {
            // Bleed into the first parent that does have padding
            var padding = new Shared.PaddingDefinition();
            this.getImmediateSurroundingPadding(padding);
            var surroundingPadding = this.hostConfig.paddingDefinitionToSpacingDefinition(padding);
            this.renderedElement.style.marginRight = "-" + surroundingPadding.right + "px";
            this.renderedElement.style.marginLeft = "-" + surroundingPadding.left + "px";
            if (!this.isDesignMode()) {
                this.renderedElement.style.marginTop = "-" + surroundingPadding.top + "px";
                this.renderedElement.style.marginBottom = "-" + surroundingPadding.bottom + "px";
            }
            if (this.separatorElement && this.separatorOrientation == Enums.Orientation.Horizontal) {
                this.separatorElement.style.marginLeft = "-" + surroundingPadding.left + "px";
                this.separatorElement.style.marginRight = "-" + surroundingPadding.right + "px";
            }
        }
        else {
            this.renderedElement.style.marginRight = "0";
            this.renderedElement.style.marginLeft = "0";
            this.renderedElement.style.marginTop = "0";
            this.renderedElement.style.marginBottom = "0";
            if (this.separatorElement) {
                this.separatorElement.style.marginRight = "0";
                this.separatorElement.style.marginLeft = "0";
            }
        }
    };
    StylableCardElementContainer.prototype.getHasBackground = function () {
        var currentElement = this.parent;
        while (currentElement) {
            var currentElementHasBackgroundImage = currentElement instanceof Container ? currentElement.backgroundImage.isValid() : false;
            if (currentElement instanceof StylableCardElementContainer) {
                if (this.hasExplicitStyle && (currentElement.getEffectiveStyle() != this.getEffectiveStyle() || currentElementHasBackgroundImage)) {
                    return true;
                }
            }
            currentElement = currentElement.parent;
        }
        return false;
    };
    StylableCardElementContainer.prototype.getDefaultPadding = function () {
        return this.getHasBackground() ?
            new Shared.PaddingDefinition(Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding) : _super.prototype.getDefaultPadding.call(this);
    };
    StylableCardElementContainer.prototype.getHasExpandedAction = function () {
        return false;
    };
    StylableCardElementContainer.prototype.getBleed = function () {
        return this._bleed;
    };
    StylableCardElementContainer.prototype.setBleed = function (value) {
        this._bleed = value;
    };
    Object.defineProperty(StylableCardElementContainer.prototype, "renderedActionCount", {
        get: function () {
            return 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StylableCardElementContainer.prototype, "hasExplicitStyle", {
        get: function () {
            return this._style != null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StylableCardElementContainer.prototype, "allowCustomStyle", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StylableCardElementContainer.prototype, "supportsMinHeight", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    StylableCardElementContainer.prototype.isBleeding = function () {
        return (this.getHasBackground() || this.hostConfig.alwaysAllowBleed) && this.getBleed();
    };
    StylableCardElementContainer.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "style", this.style);
        return result;
    };
    StylableCardElementContainer.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (this._style) {
            var styleDefinition = this.hostConfig.containerStyles.getStyleByName(this._style);
            if (!styleDefinition) {
                context.addFailure(this, {
                    error: Enums.ValidationError.InvalidPropertyValue,
                    message: "Unknown container style: " + this._style
                });
            }
        }
    };
    StylableCardElementContainer.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this._style = Utils.getStringValue(json["style"]);
    };
    StylableCardElementContainer.prototype.render = function () {
        var renderedElement = _super.prototype.render.call(this);
        if (renderedElement && this.getHasBackground()) {
            this.applyBackground();
        }
        return renderedElement;
    };
    StylableCardElementContainer.prototype.getEffectiveStyle = function () {
        var effectiveStyle = this.style;
        return effectiveStyle ? effectiveStyle : _super.prototype.getEffectiveStyle.call(this);
    };
    Object.defineProperty(StylableCardElementContainer.prototype, "style", {
        get: function () {
            if (this.allowCustomStyle) {
                if (this._style && this.hostConfig.containerStyles.getStyleByName(this._style)) {
                    return this._style;
                }
            }
            return null;
        },
        set: function (value) {
            this._style = value;
        },
        enumerable: true,
        configurable: true
    });
    return StylableCardElementContainer;
}(CardElementContainer));
exports.StylableCardElementContainer = StylableCardElementContainer;
var BackgroundImage = /** @class */ (function (_super) {
    __extends(BackgroundImage, _super);
    function BackgroundImage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fillMode = BackgroundImage.defaultFillMode;
        _this.horizontalAlignment = BackgroundImage.defaultHorizontalAlignment;
        _this.verticalAlignment = BackgroundImage.defaultVerticalAlignment;
        return _this;
    }
    BackgroundImage.prototype.reset = function () {
        this.url = undefined;
        this.fillMode = BackgroundImage.defaultFillMode;
        this.horizontalAlignment = BackgroundImage.defaultHorizontalAlignment;
        this.verticalAlignment = BackgroundImage.defaultVerticalAlignment;
    };
    BackgroundImage.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.url = Utils.getStringValue(json["url"]);
        this.fillMode = Utils.getEnumValue(Enums.FillMode, json["fillMode"], this.fillMode);
        this.horizontalAlignment = Utils.getEnumValue(Enums.HorizontalAlignment, json["horizontalAlignment"], this.horizontalAlignment);
        this.verticalAlignment = Utils.getEnumValue(Enums.VerticalAlignment, json["verticalAlignment"], this.verticalAlignment);
    };
    BackgroundImage.prototype.toJSON = function () {
        if (!this.isValid()) {
            return null;
        }
        if (this.fillMode == BackgroundImage.defaultFillMode &&
            this.horizontalAlignment == BackgroundImage.defaultHorizontalAlignment &&
            this.verticalAlignment == BackgroundImage.defaultVerticalAlignment) {
            return this.url;
        }
        else {
            var result = _super.prototype.toJSON.call(this);
            Utils.setProperty(result, "url", this.url);
            Utils.setEnumProperty(Enums.FillMode, result, "fillMode", this.fillMode, BackgroundImage.defaultFillMode);
            Utils.setEnumProperty(Enums.HorizontalAlignment, result, "horizontalAlignment", this.horizontalAlignment, BackgroundImage.defaultHorizontalAlignment);
            Utils.setEnumProperty(Enums.VerticalAlignment, result, "verticalAlignment", this.verticalAlignment, BackgroundImage.defaultVerticalAlignment);
            return result;
        }
    };
    BackgroundImage.prototype.apply = function (element) {
        if (this.url) {
            element.style.backgroundImage = "url('" + this.url + "')";
            switch (this.fillMode) {
                case Enums.FillMode.Repeat:
                    element.style.backgroundRepeat = "repeat";
                    break;
                case Enums.FillMode.RepeatHorizontally:
                    element.style.backgroundRepeat = "repeat-x";
                    break;
                case Enums.FillMode.RepeatVertically:
                    element.style.backgroundRepeat = "repeat-y";
                    break;
                case Enums.FillMode.Cover:
                default:
                    element.style.backgroundRepeat = "no-repeat";
                    element.style.backgroundSize = "cover";
                    break;
            }
            switch (this.horizontalAlignment) {
                case Enums.HorizontalAlignment.Center:
                    element.style.backgroundPositionX = "center";
                    break;
                case Enums.HorizontalAlignment.Right:
                    element.style.backgroundPositionX = "right";
                    break;
            }
            switch (this.verticalAlignment) {
                case Enums.VerticalAlignment.Center:
                    element.style.backgroundPositionY = "center";
                    break;
                case Enums.VerticalAlignment.Bottom:
                    element.style.backgroundPositionY = "bottom";
                    break;
            }
        }
    };
    BackgroundImage.prototype.isValid = function () {
        return !Utils.isNullOrEmpty(this.url);
    };
    BackgroundImage.defaultFillMode = Enums.FillMode.Cover;
    BackgroundImage.defaultHorizontalAlignment = Enums.HorizontalAlignment.Left;
    BackgroundImage.defaultVerticalAlignment = Enums.VerticalAlignment.Top;
    return BackgroundImage;
}(SerializableObject));
exports.BackgroundImage = BackgroundImage;
var Container = /** @class */ (function (_super) {
    __extends(Container, _super);
    function Container() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._items = [];
        _this._renderedItems = [];
        _this.backgroundImage = new BackgroundImage();
        _this.verticalContentAlignment = Enums.VerticalAlignment.Top;
        _this.rtl = null;
        return _this;
    }
    Container.prototype.insertItemAt = function (item, index, forceInsert) {
        if (!item.parent || forceInsert) {
            if (item.isStandalone) {
                if (index < 0 || index >= this._items.length) {
                    this._items.push(item);
                }
                else {
                    this._items.splice(index, 0, item);
                }
                item.setParent(this);
            }
            else {
                throw new Error("Elements of type " + item.getJsonTypeName() + " cannot be used as standalone elements.");
            }
        }
        else {
            throw new Error("The element already belongs to another container.");
        }
    };
    Container.prototype.supportsExcplitiHeight = function () {
        return true;
    };
    Container.prototype.getItemsCollectionPropertyName = function () {
        return "items";
    };
    Container.prototype.applyBackground = function () {
        if (this.backgroundImage.isValid()) {
            this.backgroundImage.apply(this.renderedElement);
        }
        _super.prototype.applyBackground.call(this);
    };
    Container.prototype.internalRender = function () {
        this._renderedItems = [];
        // Cache hostConfig to avoid walking the parent hierarchy several times
        var hostConfig = this.hostConfig;
        var element = document.createElement("div");
        if (this.rtl != null && this.rtl) {
            element.dir = "rtl";
        }
        element.classList.add(hostConfig.makeCssClassName("ac-container"));
        element.style.display = "flex";
        element.style.flexDirection = "column";
        if (AdaptiveCard.useAdvancedCardBottomTruncation) {
            // Forces the container to be at least as tall as its content.
            //
            // Fixes a quirk in Chrome where, for nested flex elements, the
            // inner element's height would never exceed the outer element's
            // height. This caused overflow truncation to break -- containers
            // would always be measured as not overflowing, since their heights
            // were constrained by their parents as opposed to truly reflecting
            // the height of their content.
            //
            // See the "Browser Rendering Notes" section of this answer:
            // https://stackoverflow.com/questions/36247140/why-doesnt-flex-item-shrink-past-content-size
            element.style.minHeight = '-webkit-min-content';
        }
        switch (this.verticalContentAlignment) {
            case Enums.VerticalAlignment.Center:
                element.style.justifyContent = "center";
                break;
            case Enums.VerticalAlignment.Bottom:
                element.style.justifyContent = "flex-end";
                break;
            default:
                element.style.justifyContent = "flex-start";
                break;
        }
        if (this._items.length > 0) {
            for (var i = 0; i < this._items.length; i++) {
                var renderedElement = this.isElementAllowed(this._items[i], this.getForbiddenElementTypes()) ? this._items[i].render() : null;
                if (renderedElement) {
                    if (this._renderedItems.length > 0 && this._items[i].separatorElement) {
                        this._items[i].separatorElement.style.flex = "0 0 auto";
                        Utils.appendChild(element, this._items[i].separatorElement);
                    }
                    Utils.appendChild(element, renderedElement);
                    this._renderedItems.push(this._items[i]);
                }
            }
        }
        else {
            if (this.isDesignMode()) {
                var placeholderElement = this.createPlaceholderElement();
                placeholderElement.style.width = "100%";
                placeholderElement.style.height = "100%";
                element.appendChild(placeholderElement);
            }
        }
        return element;
    };
    Container.prototype.truncateOverflow = function (maxHeight) {
        // Add 1 to account for rounding differences between browsers
        var boundary = this.renderedElement.offsetTop + maxHeight + 1;
        var handleElement = function (cardElement) {
            var elt = cardElement.renderedElement;
            if (elt) {
                switch (Utils.getFitStatus(elt, boundary)) {
                    case Enums.ContainerFitStatus.FullyInContainer:
                        var sizeChanged = cardElement['resetOverflow']();
                        // If the element's size changed after resetting content,
                        // we have to check if it still fits fully in the card
                        if (sizeChanged) {
                            handleElement(cardElement);
                        }
                        break;
                    case Enums.ContainerFitStatus.Overflowing:
                        var maxHeight_1 = boundary - elt.offsetTop;
                        cardElement['handleOverflow'](maxHeight_1);
                        break;
                    case Enums.ContainerFitStatus.FullyOutOfContainer:
                        cardElement['handleOverflow'](0);
                        break;
                }
            }
        };
        for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
            var item = _a[_i];
            handleElement(item);
        }
        return true;
    };
    Container.prototype.undoOverflowTruncation = function () {
        for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
            var item = _a[_i];
            item['resetOverflow']();
        }
    };
    Container.prototype.getHasBackground = function () {
        return this.backgroundImage.isValid() || _super.prototype.getHasBackground.call(this);
    };
    Object.defineProperty(Container.prototype, "isSelectable", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Container.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "backgroundImage", this.backgroundImage.toJSON());
        Utils.setEnumProperty(Enums.VerticalAlignment, result, "verticalContentAlignment", this.verticalContentAlignment, Enums.VerticalAlignment.Top);
        if (this._items.length > 0) {
            var elements = [];
            for (var _i = 0, _a = this._items; _i < _a.length; _i++) {
                var element = _a[_i];
                elements.push(element.toJSON());
            }
            Utils.setProperty(result, this.getItemsCollectionPropertyName(), elements);
        }
        Utils.setProperty(result, "bleed", this.bleed, false);
        return result;
    };
    Container.prototype.getItemCount = function () {
        return this._items.length;
    };
    Container.prototype.getItemAt = function (index) {
        return this._items[index];
    };
    Container.prototype.getFirstVisibleRenderedItem = function () {
        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {
            for (var _i = 0, _a = this._renderedItems; _i < _a.length; _i++) {
                var item = _a[_i];
                if (item.isVisible) {
                    return item;
                }
            }
            ;
        }
        return null;
    };
    Container.prototype.getLastVisibleRenderedItem = function () {
        if (this.renderedElement && this._renderedItems && this._renderedItems.length > 0) {
            for (var i = this._renderedItems.length - 1; i >= 0; i--) {
                if (this._renderedItems[i].isVisible) {
                    return this._renderedItems[i];
                }
            }
        }
        return null;
    };
    Container.prototype.getJsonTypeName = function () {
        return "Container";
    };
    Container.prototype.isFirstElement = function (element) {
        var designMode = this.isDesignMode();
        for (var i = 0; i < this._items.length; i++) {
            if (this._items[i].isVisible || designMode) {
                return this._items[i] == element;
            }
        }
        return false;
    };
    Container.prototype.isLastElement = function (element) {
        var designMode = this.isDesignMode();
        for (var i = this._items.length - 1; i >= 0; i--) {
            if (this._items[i].isVisible || designMode) {
                return this._items[i] == element;
            }
        }
        return false;
    };
    Container.prototype.isRtl = function () {
        if (this.rtl != null) {
            return this.rtl;
        }
        else {
            var parentContainer = this.getParentContainer();
            return parentContainer ? parentContainer.isRtl() : false;
        }
    };
    Container.prototype.isBleedingAtTop = function () {
        var firstRenderedItem = this.getFirstVisibleRenderedItem();
        return this.isBleeding() || (firstRenderedItem ? firstRenderedItem.isBleedingAtTop() : false);
    };
    Container.prototype.isBleedingAtBottom = function () {
        var lastRenderedItem = this.getLastVisibleRenderedItem();
        return this.isBleeding() || (lastRenderedItem ? lastRenderedItem.isBleedingAtBottom() && lastRenderedItem.getEffectiveStyle() == this.getEffectiveStyle() : false);
    };
    Container.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this.setShouldFallback(false);
        this._items = [];
        this._renderedItems = [];
        this.backgroundImage.reset();
        var jsonBackgroundImage = json["backgroundImage"];
        if (jsonBackgroundImage) {
            if (typeof jsonBackgroundImage === "string") {
                this.backgroundImage.url = jsonBackgroundImage;
                this.backgroundImage.fillMode = Enums.FillMode.Cover;
            }
            else if (typeof jsonBackgroundImage === "object") {
                this.backgroundImage.parse(jsonBackgroundImage, errors);
            }
        }
        this.verticalContentAlignment = Utils.getEnumValue(Enums.VerticalAlignment, json["verticalContentAlignment"], this.verticalContentAlignment);
        if (json[this.getItemsCollectionPropertyName()] != null) {
            var items = json[this.getItemsCollectionPropertyName()];
            this.clear();
            for (var i = 0; i < items.length; i++) {
                var element = createElementInstance(this, items[i], !this.isDesignMode(), errors);
                if (element) {
                    this.insertItemAt(element, -1, true);
                }
            }
        }
        this.bleed = Utils.getBoolValue(json["bleed"], this.bleed);
    };
    Container.prototype.indexOf = function (cardElement) {
        return this._items.indexOf(cardElement);
    };
    Container.prototype.addItem = function (item) {
        this.insertItemAt(item, -1, false);
    };
    Container.prototype.insertItemBefore = function (item, insertBefore) {
        this.insertItemAt(item, this._items.indexOf(insertBefore), false);
    };
    Container.prototype.insertItemAfter = function (item, insertAfter) {
        this.insertItemAt(item, this._items.indexOf(insertAfter) + 1, false);
    };
    Container.prototype.removeItem = function (item) {
        var itemIndex = this._items.indexOf(item);
        if (itemIndex >= 0) {
            this._items.splice(itemIndex, 1);
            item.setParent(null);
            this.updateLayout();
            return true;
        }
        return false;
    };
    Container.prototype.clear = function () {
        this._items = [];
    };
    Container.prototype.getResourceInformation = function () {
        var result = _super.prototype.getResourceInformation.call(this);
        if (this.backgroundImage.isValid()) {
            result.push({ url: this.backgroundImage.url, mimeType: "image" });
        }
        return result;
    };
    Container.prototype.getActionById = function (id) {
        var result = _super.prototype.getActionById.call(this, id);
        if (!result) {
            if (this.selectAction) {
                result = this.selectAction.getActionById(id);
            }
            if (!result) {
                for (var i = 0; i < this._items.length; i++) {
                    result = this._items[i].getActionById(id);
                    if (result) {
                        break;
                    }
                }
            }
        }
        return result;
    };
    Object.defineProperty(Container.prototype, "padding", {
        get: function () {
            return this.getPadding();
        },
        set: function (value) {
            this.setPadding(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "selectAction", {
        get: function () {
            return this.getSelectAction();
        },
        set: function (value) {
            this.setSelectAction(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Container.prototype, "bleed", {
        get: function () {
            return this.getBleed();
        },
        set: function (value) {
            this.setBleed(value);
        },
        enumerable: true,
        configurable: true
    });
    return Container;
}(StylableCardElementContainer));
exports.Container = Container;
var Column = /** @class */ (function (_super) {
    __extends(Column, _super);
    function Column(width) {
        if (width === void 0) { width = "stretch"; }
        var _this = _super.call(this) || this;
        _this._computedWeight = 0;
        _this.width = "stretch";
        _this.width = width;
        return _this;
    }
    Column.prototype.adjustRenderedElementSize = function (renderedElement) {
        var minDesignTimeColumnHeight = 20;
        if (this.isDesignMode()) {
            renderedElement.style.minWidth = "20px";
            renderedElement.style.minHeight = (!this.minPixelHeight ? minDesignTimeColumnHeight : Math.max(this.minPixelHeight, minDesignTimeColumnHeight)) + "px";
        }
        else {
            renderedElement.style.minWidth = "0";
            if (this.minPixelHeight) {
                renderedElement.style.minHeight = this.minPixelHeight + "px";
            }
        }
        if (this.width === "auto") {
            renderedElement.style.flex = "0 1 auto";
        }
        else if (this.width === "stretch") {
            renderedElement.style.flex = "1 1 50px";
        }
        else {
            var sizeAndUnit = this.width;
            if (sizeAndUnit.unit == Enums.SizeUnit.Pixel) {
                renderedElement.style.flex = "0 0 auto";
                renderedElement.style.width = sizeAndUnit.physicalSize + "px";
            }
            else {
                renderedElement.style.flex = "1 1 " + (this._computedWeight > 0 ? this._computedWeight : sizeAndUnit.physicalSize) + "%";
            }
        }
    };
    Object.defineProperty(Column.prototype, "separatorOrientation", {
        get: function () {
            return Enums.Orientation.Vertical;
        },
        enumerable: true,
        configurable: true
    });
    Column.prototype.getJsonTypeName = function () {
        return "Column";
    };
    Column.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        if (this.width instanceof Shared.SizeAndUnit) {
            if (this.width.unit == Enums.SizeUnit.Pixel) {
                Utils.setProperty(result, "width", this.width.physicalSize + "px");
            }
            else {
                Utils.setNumberProperty(result, "width", this.width.physicalSize);
            }
        }
        else {
            Utils.setProperty(result, "width", this.width);
        }
        return result;
    };
    Column.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        var jsonWidth = json["width"];
        if (jsonWidth === undefined) {
            jsonWidth = json["size"];
            if (jsonWidth !== undefined) {
                raiseParseError({
                    error: Enums.ValidationError.Deprecated,
                    message: "The \"Column.size\" property is deprecated and will be removed. Use the \"Column.width\" property instead."
                }, errors);
            }
        }
        if (jsonWidth) {
            var invalidWidth = false;
            try {
                this.width = Shared.SizeAndUnit.parse(jsonWidth);
            }
            catch (e) {
                if (typeof jsonWidth === "string" && (jsonWidth === "auto" || jsonWidth === "stretch")) {
                    this.width = jsonWidth;
                }
                else {
                    invalidWidth = true;
                }
            }
            if (invalidWidth) {
                raiseParseError({
                    error: Enums.ValidationError.InvalidPropertyValue,
                    message: "Invalid column width:" + jsonWidth + " - defaulting to \"auto\""
                }, errors);
            }
        }
    };
    Object.defineProperty(Column.prototype, "hasVisibleSeparator", {
        get: function () {
            if (this.parent && this.parent instanceof ColumnSet) {
                return this.separatorElement && !this.parent.isLeftMostElement(this);
            }
            else {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "isStandalone", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return Column;
}(Container));
exports.Column = Column;
var ColumnSet = /** @class */ (function (_super) {
    __extends(ColumnSet, _super);
    function ColumnSet() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._columns = [];
        return _this;
    }
    ColumnSet.prototype.createColumnInstance = function (json, errors) {
        return createCardObjectInstance(this, json, [], // Forbidden types not supported for elements for now
        !this.isDesignMode(), function (typeName) {
            return !typeName || typeName === "Column" ? new Column() : null;
        }, function (typeName, errorType) {
            if (errorType == InstanceCreationErrorType.UnknownType) {
                return {
                    error: Enums.ValidationError.UnknownElementType,
                    message: "Unknown element type: " + typeName + ". Fallback will be used if present."
                };
            }
            else {
                return {
                    error: Enums.ValidationError.ElementTypeNotAllowed,
                    message: "Element type " + typeName + " isn't allowed in a ColumnSet."
                };
            }
        }, errors);
    };
    ColumnSet.prototype.internalRender = function () {
        this._renderedColumns = [];
        if (this._columns.length > 0) {
            // Cache hostConfig to avoid walking the parent hierarchy several times
            var hostConfig = this.hostConfig;
            var element = document.createElement("div");
            element.className = hostConfig.makeCssClassName("ac-columnSet");
            element.style.display = "flex";
            if (AdaptiveCard.useAdvancedCardBottomTruncation) {
                // See comment in Container.internalRender()
                element.style.minHeight = '-webkit-min-content';
            }
            switch (this.horizontalAlignment) {
                case Enums.HorizontalAlignment.Center:
                    element.style.justifyContent = "center";
                    break;
                case Enums.HorizontalAlignment.Right:
                    element.style.justifyContent = "flex-end";
                    break;
                default:
                    element.style.justifyContent = "flex-start";
                    break;
            }
            var totalWeight = 0;
            for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
                var column = _a[_i];
                if (column.width instanceof Shared.SizeAndUnit && (column.width.unit == Enums.SizeUnit.Weight)) {
                    totalWeight += column.width.physicalSize;
                }
            }
            for (var _b = 0, _c = this._columns; _b < _c.length; _b++) {
                var column = _c[_b];
                if (column.width instanceof Shared.SizeAndUnit && column.width.unit == Enums.SizeUnit.Weight && totalWeight > 0) {
                    var computedWeight = 100 / totalWeight * column.width.physicalSize;
                    // Best way to emulate "internal" access I know of
                    column["_computedWeight"] = computedWeight;
                }
                var renderedColumn = column.render();
                if (renderedColumn) {
                    if (this._renderedColumns.length > 0 && column.separatorElement) {
                        column.separatorElement.style.flex = "0 0 auto";
                        Utils.appendChild(element, column.separatorElement);
                    }
                    Utils.appendChild(element, renderedColumn);
                    this._renderedColumns.push(column);
                }
            }
            return this._renderedColumns.length > 0 ? element : null;
        }
        else {
            return null;
        }
    };
    ColumnSet.prototype.truncateOverflow = function (maxHeight) {
        for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
            var column = _a[_i];
            column['handleOverflow'](maxHeight);
        }
        return true;
    };
    ColumnSet.prototype.undoOverflowTruncation = function () {
        for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
            var column = _a[_i];
            column['resetOverflow']();
        }
    };
    Object.defineProperty(ColumnSet.prototype, "isSelectable", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    ColumnSet.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        if (this._columns.length > 0) {
            var columns = [];
            for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
                var column = _a[_i];
                columns.push(column.toJSON());
            }
            Utils.setProperty(result, "columns", columns);
        }
        Utils.setProperty(result, "bleed", this.bleed, false);
        return result;
    };
    ColumnSet.prototype.isFirstElement = function (element) {
        for (var i = 0; i < this._columns.length; i++) {
            if (this._columns[i].isVisible) {
                return this._columns[i] == element;
            }
        }
        return false;
    };
    ColumnSet.prototype.isBleedingAtTop = function () {
        if (this.isBleeding()) {
            return true;
        }
        if (this._renderedColumns && this._renderedColumns.length > 0) {
            for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
                var column = _a[_i];
                if (column.isBleedingAtTop()) {
                    return true;
                }
            }
        }
        return false;
    };
    ColumnSet.prototype.isBleedingAtBottom = function () {
        if (this.isBleeding()) {
            return true;
        }
        if (this._renderedColumns && this._renderedColumns.length > 0) {
            for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
                var column = _a[_i];
                if (column.isBleedingAtBottom()) {
                    return true;
                }
            }
        }
        return false;
    };
    ColumnSet.prototype.getCount = function () {
        return this._columns.length;
    };
    ColumnSet.prototype.getItemCount = function () {
        return this.getCount();
    };
    ColumnSet.prototype.getFirstVisibleRenderedItem = function () {
        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {
            return this._renderedColumns[0];
        }
        else {
            return null;
        }
    };
    ColumnSet.prototype.getLastVisibleRenderedItem = function () {
        if (this.renderedElement && this._renderedColumns && this._renderedColumns.length > 0) {
            return this._renderedColumns[this._renderedColumns.length - 1];
        }
        else {
            return null;
        }
    };
    ColumnSet.prototype.getColumnAt = function (index) {
        return this._columns[index];
    };
    ColumnSet.prototype.getItemAt = function (index) {
        return this.getColumnAt(index);
    };
    ColumnSet.prototype.getJsonTypeName = function () {
        return "ColumnSet";
    };
    ColumnSet.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        if (json["columns"] != null) {
            var jsonColumns = json["columns"];
            this._columns = [];
            for (var i = 0; i < jsonColumns.length; i++) {
                var column = this.createColumnInstance(jsonColumns[i], errors);
                if (column) {
                    this._columns.push(column);
                }
            }
        }
        this.bleed = Utils.getBoolValue(json["bleed"], this.bleed);
    };
    ColumnSet.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        var weightedColumns = 0;
        var stretchedColumns = 0;
        for (var _i = 0, _a = this._columns; _i < _a.length; _i++) {
            var column = _a[_i];
            if (typeof column.width === "number") {
                weightedColumns++;
            }
            else if (column.width === "stretch") {
                stretchedColumns++;
            }
        }
        if (weightedColumns > 0 && stretchedColumns > 0) {
            context.addFailure(this, {
                error: Enums.ValidationError.Hint,
                message: "It is not recommended to use weighted and stretched columns in the same ColumnSet, because in such a situation stretched columns will always get the minimum amount of space."
            });
        }
    };
    ColumnSet.prototype.addColumn = function (column) {
        if (!column.parent) {
            this._columns.push(column);
            column.setParent(this);
        }
        else {
            throw new Error("This column already belongs to another ColumnSet.");
        }
    };
    ColumnSet.prototype.removeItem = function (item) {
        if (item instanceof Column) {
            var itemIndex = this._columns.indexOf(item);
            if (itemIndex >= 0) {
                this._columns.splice(itemIndex, 1);
                item.setParent(null);
                this.updateLayout();
                return true;
            }
        }
        return false;
    };
    ColumnSet.prototype.indexOf = function (cardElement) {
        return cardElement instanceof Column ? this._columns.indexOf(cardElement) : -1;
    };
    ColumnSet.prototype.isLeftMostElement = function (element) {
        return this._columns.indexOf(element) == 0;
    };
    ColumnSet.prototype.isRightMostElement = function (element) {
        return this._columns.indexOf(element) == this._columns.length - 1;
    };
    ColumnSet.prototype.isTopElement = function (element) {
        return this._columns.indexOf(element) >= 0;
    };
    ColumnSet.prototype.isBottomElement = function (element) {
        return this._columns.indexOf(element) >= 0;
    };
    ColumnSet.prototype.getActionById = function (id) {
        var result = null;
        for (var i = 0; i < this._columns.length; i++) {
            result = this._columns[i].getActionById(id);
            if (result) {
                break;
            }
        }
        return result;
    };
    Object.defineProperty(ColumnSet.prototype, "bleed", {
        get: function () {
            return this.getBleed();
        },
        set: function (value) {
            this.setBleed(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnSet.prototype, "padding", {
        get: function () {
            return this.getPadding();
        },
        set: function (value) {
            this.setPadding(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnSet.prototype, "selectAction", {
        get: function () {
            return this.getSelectAction();
        },
        set: function (value) {
            this.setSelectAction(value);
        },
        enumerable: true,
        configurable: true
    });
    return ColumnSet;
}(StylableCardElementContainer));
exports.ColumnSet = ColumnSet;
function raiseImageLoadedEvent(image) {
    var card = image.getRootElement();
    var onImageLoadedHandler = (card && card.onImageLoaded) ? card.onImageLoaded : AdaptiveCard.onImageLoaded;
    if (onImageLoadedHandler) {
        onImageLoadedHandler(image);
    }
}
function raiseAnchorClickedEvent(element, anchor) {
    var card = element.getRootElement();
    var onAnchorClickedHandler = (card && card.onAnchorClicked) ? card.onAnchorClicked : AdaptiveCard.onAnchorClicked;
    return onAnchorClickedHandler != null ? onAnchorClickedHandler(element, anchor) : false;
}
function raiseExecuteActionEvent(action) {
    var card = action.parent.getRootElement();
    var onExecuteActionHandler = (card && card.onExecuteAction) ? card.onExecuteAction : AdaptiveCard.onExecuteAction;
    if (onExecuteActionHandler) {
        if (action.prepareForExecution()) {
            onExecuteActionHandler(action);
        }
    }
}
function raiseInlineCardExpandedEvent(action, isExpanded) {
    var card = action.parent.getRootElement();
    var onInlineCardExpandedHandler = (card && card.onInlineCardExpanded) ? card.onInlineCardExpanded : AdaptiveCard.onInlineCardExpanded;
    if (onInlineCardExpandedHandler) {
        onInlineCardExpandedHandler(action, isExpanded);
    }
}
function raiseInputValueChangedEvent(input) {
    var card = input.getRootElement();
    var onInputValueChangedHandler = (card && card.onInputValueChanged) ? card.onInputValueChanged : AdaptiveCard.onInputValueChanged;
    if (onInputValueChangedHandler) {
        onInputValueChangedHandler(input);
    }
}
function raiseElementVisibilityChangedEvent(element, shouldUpdateLayout) {
    if (shouldUpdateLayout === void 0) { shouldUpdateLayout = true; }
    var rootElement = element.getRootElement();
    if (shouldUpdateLayout) {
        rootElement.updateLayout();
    }
    var card = rootElement;
    var onElementVisibilityChangedHandler = (card && card.onElementVisibilityChanged) ? card.onElementVisibilityChanged : AdaptiveCard.onElementVisibilityChanged;
    if (onElementVisibilityChangedHandler != null) {
        onElementVisibilityChangedHandler(element);
    }
}
function raiseParseElementEvent(element, json, errors) {
    var card = element.getRootElement();
    var onParseElementHandler = (card && card.onParseElement) ? card.onParseElement : AdaptiveCard.onParseElement;
    if (onParseElementHandler != null) {
        onParseElementHandler(element, json, errors);
    }
}
function raiseParseActionEvent(action, json, errors) {
    var card = action.parent ? action.parent.getRootElement() : null;
    var onParseActionHandler = (card && card.onParseAction) ? card.onParseAction : AdaptiveCard.onParseAction;
    if (onParseActionHandler != null) {
        onParseActionHandler(action, json, errors);
    }
}
function raiseParseError(error, errors) {
    if (errors) {
        errors.push(error);
    }
    if (AdaptiveCard.onParseError != null) {
        AdaptiveCard.onParseError(error);
    }
}
var ContainerWithActions = /** @class */ (function (_super) {
    __extends(ContainerWithActions, _super);
    function ContainerWithActions() {
        var _this = _super.call(this) || this;
        _this._actionCollection = new ActionCollection(_this);
        return _this;
    }
    ContainerWithActions.prototype.internalRender = function () {
        var element = _super.prototype.internalRender.call(this);
        var renderedActions = this._actionCollection.render(this.hostConfig.actions.actionsOrientation, false);
        if (renderedActions) {
            Utils.appendChild(element, Utils.renderSeparation(this.hostConfig, {
                spacing: this.hostConfig.getEffectiveSpacing(this.hostConfig.actions.spacing),
                lineThickness: null,
                lineColor: null
            }, Enums.Orientation.Horizontal));
            Utils.appendChild(element, renderedActions);
        }
        if (this.renderIfEmpty) {
            return element;
        }
        else {
            return element.children.length > 0 ? element : null;
        }
    };
    ContainerWithActions.prototype.getHasExpandedAction = function () {
        if (this.renderedActionCount == 0) {
            return false;
        }
        else if (this.renderedActionCount == 1) {
            return this._actionCollection.expandedAction != null && !this.hostConfig.actions.preExpandSingleShowCardAction;
        }
        else {
            return this._actionCollection.expandedAction != null;
        }
    };
    Object.defineProperty(ContainerWithActions.prototype, "renderedActionCount", {
        get: function () {
            return this._actionCollection.renderedActionCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerWithActions.prototype, "renderIfEmpty", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    ContainerWithActions.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "actions", this._actionCollection.toJSON());
        return result;
    };
    ContainerWithActions.prototype.getActionCount = function () {
        return this._actionCollection.items.length;
    };
    ContainerWithActions.prototype.getActionAt = function (index) {
        if (index >= 0 && index < this.getActionCount()) {
            return this._actionCollection.items[index];
        }
        else {
            _super.prototype.getActionAt.call(this, index);
        }
    };
    ContainerWithActions.prototype.getActionById = function (id) {
        var result = this._actionCollection.getActionById(id);
        return result ? result : _super.prototype.getActionById.call(this, id);
    };
    ContainerWithActions.prototype.parse = function (json, errors) {
        _super.prototype.parse.call(this, json, errors);
        this._actionCollection.parse(json["actions"], errors);
    };
    ContainerWithActions.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (this._actionCollection) {
            this._actionCollection.validateProperties(context);
        }
    };
    ContainerWithActions.prototype.isLastElement = function (element) {
        return _super.prototype.isLastElement.call(this, element) && this._actionCollection.items.length == 0;
    };
    ContainerWithActions.prototype.addAction = function (action) {
        this._actionCollection.addAction(action);
    };
    ContainerWithActions.prototype.clear = function () {
        _super.prototype.clear.call(this);
        this._actionCollection.clear();
    };
    ContainerWithActions.prototype.getAllInputs = function () {
        return _super.prototype.getAllInputs.call(this).concat(this._actionCollection.getAllInputs());
    };
    ContainerWithActions.prototype.getResourceInformation = function () {
        return _super.prototype.getResourceInformation.call(this).concat(this._actionCollection.getResourceInformation());
    };
    ContainerWithActions.prototype.isBleedingAtBottom = function () {
        if (this._actionCollection.renderedActionCount == 0) {
            return _super.prototype.isBleedingAtBottom.call(this);
        }
        else {
            if (this._actionCollection.items.length == 1) {
                return this._actionCollection.expandedAction != null && !this.hostConfig.actions.preExpandSingleShowCardAction;
            }
            else {
                return this._actionCollection.expandedAction != null;
            }
        }
    };
    Object.defineProperty(ContainerWithActions.prototype, "isStandalone", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return ContainerWithActions;
}(Container));
exports.ContainerWithActions = ContainerWithActions;
var TypeRegistry = /** @class */ (function () {
    function TypeRegistry() {
        this._items = [];
        this.reset();
    }
    TypeRegistry.prototype.findTypeRegistration = function (typeName) {
        for (var i = 0; i < this._items.length; i++) {
            if (this._items[i].typeName === typeName) {
                return this._items[i];
            }
        }
        return null;
    };
    TypeRegistry.prototype.clear = function () {
        this._items = [];
    };
    TypeRegistry.prototype.registerType = function (typeName, createInstance) {
        var registrationInfo = this.findTypeRegistration(typeName);
        if (registrationInfo != null) {
            registrationInfo.createInstance = createInstance;
        }
        else {
            registrationInfo = {
                typeName: typeName,
                createInstance: createInstance
            };
            this._items.push(registrationInfo);
        }
    };
    TypeRegistry.prototype.unregisterType = function (typeName) {
        for (var i = 0; i < this._items.length; i++) {
            if (this._items[i].typeName === typeName) {
                this._items.splice(i, 1);
                return;
            }
        }
    };
    TypeRegistry.prototype.createInstance = function (typeName) {
        var registrationInfo = this.findTypeRegistration(typeName);
        return registrationInfo ? registrationInfo.createInstance() : null;
    };
    TypeRegistry.prototype.getItemCount = function () {
        return this._items.length;
    };
    TypeRegistry.prototype.getItemAt = function (index) {
        return this._items[index];
    };
    return TypeRegistry;
}());
exports.TypeRegistry = TypeRegistry;
var ElementTypeRegistry = /** @class */ (function (_super) {
    __extends(ElementTypeRegistry, _super);
    function ElementTypeRegistry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ElementTypeRegistry.prototype.reset = function () {
        this.clear();
        this.registerType("Container", function () { return new Container(); });
        this.registerType("TextBlock", function () { return new TextBlock(); });
        this.registerType("RichTextBlock", function () { return new RichTextBlock(); });
        this.registerType("TextRun", function () { return new TextRun(); });
        this.registerType("Image", function () { return new Image(); });
        this.registerType("ImageSet", function () { return new ImageSet(); });
        this.registerType("Media", function () { return new Media(); });
        this.registerType("FactSet", function () { return new FactSet(); });
        this.registerType("ColumnSet", function () { return new ColumnSet(); });
        this.registerType("ActionSet", function () { return new ActionSet(); });
        this.registerType("Input.Text", function () { return new TextInput(); });
        this.registerType("Input.Date", function () { return new DateInput(); });
        this.registerType("Input.Time", function () { return new TimeInput(); });
        this.registerType("Input.Number", function () { return new NumberInput(); });
        this.registerType("Input.ChoiceSet", function () { return new ChoiceSetInput(); });
        this.registerType("Input.Toggle", function () { return new ToggleInput(); });
    };
    return ElementTypeRegistry;
}(TypeRegistry));
exports.ElementTypeRegistry = ElementTypeRegistry;
var ActionTypeRegistry = /** @class */ (function (_super) {
    __extends(ActionTypeRegistry, _super);
    function ActionTypeRegistry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ActionTypeRegistry.prototype.reset = function () {
        this.clear();
        this.registerType(OpenUrlAction.JsonTypeName, function () { return new OpenUrlAction(); });
        this.registerType(SubmitAction.JsonTypeName, function () { return new SubmitAction(); });
        this.registerType(ShowCardAction.JsonTypeName, function () { return new ShowCardAction(); });
        this.registerType(ToggleVisibilityAction.JsonTypeName, function () { return new ToggleVisibilityAction(); });
    };
    return ActionTypeRegistry;
}(TypeRegistry));
exports.ActionTypeRegistry = ActionTypeRegistry;
// @dynamic
var AdaptiveCard = /** @class */ (function (_super) {
    __extends(AdaptiveCard, _super);
    function AdaptiveCard() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._cardTypeName = "AdaptiveCard";
        _this._fallbackCard = null;
        _this.onAnchorClicked = null;
        _this.onExecuteAction = null;
        _this.onElementVisibilityChanged = null;
        _this.onImageLoaded = null;
        _this.onInlineCardExpanded = null;
        _this.onInputValueChanged = null;
        _this.onParseElement = null;
        _this.onParseAction = null;
        _this.version = new HostConfig.Version(1, 0);
        _this.designMode = false;
        return _this;
    }
    Object.defineProperty(AdaptiveCard, "processMarkdown", {
        get: function () {
            throw new Error("The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.");
        },
        set: function (value) {
            throw new Error("The processMarkdown event has been removed. Please update your code and set onProcessMarkdown instead.");
        },
        enumerable: true,
        configurable: true
    });
    AdaptiveCard.applyMarkdown = function (text) {
        var result = {
            didProcess: false
        };
        if (AdaptiveCard.onProcessMarkdown) {
            AdaptiveCard.onProcessMarkdown(text, result);
        }
        else if (window["markdownit"]) {
            // Check for markdownit
            result.outputHtml = window["markdownit"]().render(text);
            result.didProcess = true;
        }
        else {
            console.warn("Markdown processing isn't enabled. Please see https://www.npmjs.com/package/adaptivecards#supporting-markdown");
        }
        return result;
    };
    AdaptiveCard.prototype.isVersionSupported = function () {
        if (this.bypassVersionCheck) {
            return true;
        }
        else {
            var unsupportedVersion = !this.version ||
                !this.version.isValid ||
                (AdaptiveCard.currentVersion.major < this.version.major) ||
                (AdaptiveCard.currentVersion.major == this.version.major && AdaptiveCard.currentVersion.minor < this.version.minor);
            return !unsupportedVersion;
        }
    };
    AdaptiveCard.prototype.getItemsCollectionPropertyName = function () {
        return "body";
    };
    AdaptiveCard.prototype.internalRender = function () {
        var renderedElement = _super.prototype.internalRender.call(this);
        if (AdaptiveCard.useAdvancedCardBottomTruncation) {
            // Unlike containers, the root card element should be allowed to
            // be shorter than its content (otherwise the overflow truncation
            // logic would never get triggered)
            renderedElement.style.minHeight = null;
        }
        return renderedElement;
    };
    AdaptiveCard.prototype.getHasBackground = function () {
        return true;
    };
    AdaptiveCard.prototype.getDefaultPadding = function () {
        return new Shared.PaddingDefinition(Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding, Enums.Spacing.Padding);
    };
    Object.defineProperty(AdaptiveCard.prototype, "renderIfEmpty", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdaptiveCard.prototype, "bypassVersionCheck", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdaptiveCard.prototype, "allowCustomStyle", {
        get: function () {
            return this.hostConfig.adaptiveCard && this.hostConfig.adaptiveCard.allowCustomStyle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdaptiveCard.prototype, "hasBackground", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    AdaptiveCard.prototype.getJsonTypeName = function () {
        return "AdaptiveCard";
    };
    AdaptiveCard.prototype.toJSON = function () {
        var result = _super.prototype.toJSON.call(this);
        Utils.setProperty(result, "$schema", "http://adaptivecards.io/schemas/adaptive-card.json");
        if (!this.bypassVersionCheck && this.version) {
            Utils.setProperty(result, "version", this.version.toString());
        }
        Utils.setProperty(result, "fallbackText", this.fallbackText);
        Utils.setProperty(result, "lang", this.lang);
        Utils.setProperty(result, "speak", this.speak);
        return result;
    };
    AdaptiveCard.prototype.internalValidateProperties = function (context) {
        _super.prototype.internalValidateProperties.call(this, context);
        if (this._cardTypeName != "AdaptiveCard") {
            context.addFailure(this, {
                error: Enums.ValidationError.MissingCardType,
                message: "Invalid or missing card type. Make sure the card's type property is set to \"AdaptiveCard\"."
            });
        }
        if (!this.bypassVersionCheck && !this.version) {
            context.addFailure(this, {
                error: Enums.ValidationError.PropertyCantBeNull,
                message: "The version property must be specified."
            });
        }
        else if (!this.isVersionSupported()) {
            context.addFailure(this, {
                error: Enums.ValidationError.UnsupportedCardVersion,
                message: "The specified card version (" + this.version + ") is not supported. The maximum supported card version is " + AdaptiveCard.currentVersion
            });
        }
    };
    AdaptiveCard.prototype.parse = function (json, errors) {
        this._fallbackCard = null;
        this._cardTypeName = Utils.getStringValue(json["type"]);
        this.speak = Utils.getStringValue(json["speak"]);
        var langId = Utils.getStringValue(json["lang"]);
        if (langId && typeof langId === "string") {
            try {
                this.lang = langId;
            }
            catch (e) {
                raiseParseError({
                    error: Enums.ValidationError.InvalidPropertyValue,
                    message: e.message
                }, errors);
            }
        }
        this.version = HostConfig.Version.parse(json["version"], errors);
        this.fallbackText = Utils.getStringValue(json["fallbackText"]);
        var fallbackElement = createElementInstance(null, json["fallback"], !this.isDesignMode(), errors);
        if (fallbackElement) {
            this._fallbackCard = new AdaptiveCard();
            this._fallbackCard.addItem(fallbackElement);
        }
        _super.prototype.parse.call(this, json, errors);
    };
    AdaptiveCard.prototype.render = function (target) {
        var renderedCard;
        if (this.shouldFallback() && this._fallbackCard) {
            this._fallbackCard.hostConfig = this.hostConfig;
            renderedCard = this._fallbackCard.render();
        }
        else {
            renderedCard = _super.prototype.render.call(this);
            if (renderedCard) {
                renderedCard.classList.add(this.hostConfig.makeCssClassName("ac-adaptiveCard"));
                renderedCard.tabIndex = 0;
                if (!Utils.isNullOrEmpty(this.speak)) {
                    renderedCard.setAttribute("aria-label", this.speak);
                }
            }
        }
        if (target) {
            target.appendChild(renderedCard);
            this.updateLayout();
        }
        return renderedCard;
    };
    AdaptiveCard.prototype.updateLayout = function (processChildren) {
        if (processChildren === void 0) { processChildren = true; }
        _super.prototype.updateLayout.call(this, processChildren);
        if (AdaptiveCard.useAdvancedCardBottomTruncation && this.isRendered()) {
            var card = this.renderedElement;
            var padding = this.hostConfig.getEffectiveSpacing(Enums.Spacing.Default);
            this['handleOverflow'](card.offsetHeight - padding);
        }
    };
    AdaptiveCard.prototype.shouldFallback = function () {
        return _super.prototype.shouldFallback.call(this) || !this.isVersionSupported();
    };
    Object.defineProperty(AdaptiveCard.prototype, "hasVisibleSeparator", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    AdaptiveCard.currentVersion = new HostConfig.Version(1, 2);
    AdaptiveCard.useAdvancedTextBlockTruncation = true;
    AdaptiveCard.useAdvancedCardBottomTruncation = false;
    AdaptiveCard.useMarkdownInRadioButtonAndCheckbox = true;
    AdaptiveCard.allowMarkForTextHighlighting = false;
    AdaptiveCard.alwaysBleedSeparators = false;
    AdaptiveCard.enableFullJsonRoundTrip = false;
    AdaptiveCard.useBuiltInInputValidation = true;
    AdaptiveCard.displayInputValidationErrors = true;
    AdaptiveCard.elementTypeRegistry = new ElementTypeRegistry();
    AdaptiveCard.actionTypeRegistry = new ActionTypeRegistry();
    AdaptiveCard.onAnchorClicked = null;
    AdaptiveCard.onExecuteAction = null;
    AdaptiveCard.onElementVisibilityChanged = null;
    AdaptiveCard.onImageLoaded = null;
    AdaptiveCard.onInlineCardExpanded = null;
    AdaptiveCard.onInputValueChanged = null;
    AdaptiveCard.onParseElement = null;
    AdaptiveCard.onParseAction = null;
    AdaptiveCard.onParseError = null;
    AdaptiveCard.onProcessMarkdown = null;
    return AdaptiveCard;
}(ContainerWithActions));
exports.AdaptiveCard = AdaptiveCard;
var InlineAdaptiveCard = /** @class */ (function (_super) {
    __extends(InlineAdaptiveCard, _super);
    function InlineAdaptiveCard() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.suppressStyle = false;
        return _this;
    }
    InlineAdaptiveCard.prototype.getDefaultPadding = function () {
        return new Shared.PaddingDefinition(this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding, Enums.Spacing.Padding, this.suppressStyle ? Enums.Spacing.None : Enums.Spacing.Padding, Enums.Spacing.Padding);
    };
    Object.defineProperty(InlineAdaptiveCard.prototype, "bypassVersionCheck", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineAdaptiveCard.prototype, "defaultStyle", {
        get: function () {
            if (this.suppressStyle) {
                return Enums.ContainerStyle.Default;
            }
            else {
                return this.hostConfig.actions.showCard.style ? this.hostConfig.actions.showCard.style : Enums.ContainerStyle.Emphasis;
            }
        },
        enumerable: true,
        configurable: true
    });
    InlineAdaptiveCard.prototype.render = function (target) {
        var renderedCard = _super.prototype.render.call(this, target);
        renderedCard.setAttribute("aria-live", "polite");
        renderedCard.removeAttribute("tabindex");
        return renderedCard;
    };
    InlineAdaptiveCard.prototype.getForbiddenActionTypes = function () {
        return [ShowCardAction];
    };
    return InlineAdaptiveCard;
}(AdaptiveCard));
var defaultHostConfig = new HostConfig.HostConfig({
    supportsInteractivity: true,
    spacing: {
        small: 10,
        default: 20,
        medium: 30,
        large: 40,
        extraLarge: 50,
        padding: 20
    },
    separator: {
        lineThickness: 1,
        lineColor: "#EEEEEE"
    },
    fontTypes: {
        default: {
            fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
            fontSizes: {
                small: 12,
                default: 14,
                medium: 17,
                large: 21,
                extraLarge: 26
            },
            fontWeights: {
                lighter: 200,
                default: 400,
                bolder: 600
            }
        },
        monospace: {
            fontFamily: "'Courier New', Courier, monospace",
            fontSizes: {
                small: 12,
                default: 14,
                medium: 17,
                large: 21,
                extraLarge: 26
            },
            fontWeights: {
                lighter: 200,
                default: 400,
                bolder: 600
            }
        }
    },
    imageSizes: {
        small: 40,
        medium: 80,
        large: 160
    },
    containerStyles: {
        default: {
            backgroundColor: "#FFFFFF",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        emphasis: {
            backgroundColor: "#08000000",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        accent: {
            backgroundColor: "#C7DEF9",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        good: {
            backgroundColor: "#CCFFCC",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        attention: {
            backgroundColor: "#FFC5B2",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        warning: {
            backgroundColor: "#FFE2B2",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        }
    },
    actions: {
        maxActions: 5,
        spacing: Enums.Spacing.Default,
        buttonSpacing: 10,
        showCard: {
            actionMode: Enums.ShowCardActionMode.Inline,
            inlineTopMargin: 16
        },
        actionsOrientation: Enums.Orientation.Horizontal,
        actionAlignment: Enums.ActionAlignment.Left
    },
    adaptiveCard: {
        allowCustomStyle: false
    },
    imageSet: {
        imageSize: Enums.Size.Medium,
        maxImageHeight: 100
    },
    factSet: {
        title: {
            color: Enums.TextColor.Default,
            size: Enums.TextSize.Default,
            isSubtle: false,
            weight: Enums.TextWeight.Bolder,
            wrap: true,
            maxWidth: 150,
        },
        value: {
            color: Enums.TextColor.Default,
            size: Enums.TextSize.Default,
            isSubtle: false,
            weight: Enums.TextWeight.Default,
            wrap: true,
        },
        spacing: 10
    }
});
//# sourceMappingURL=card-elements.js.map

/***/ }),

/***/ "../adaptivecards/lib/enums.js":
/*!*************************************!*\
  !*** ../adaptivecards/lib/enums.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
// Note the "weird" way these readonly fields are declared is to work around
// a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
// and adopt this syntax for all other static readonly fields.
var ActionStyle = /** @class */ (function () {
    function ActionStyle() {
    }
    ActionStyle.Default = "default";
    ActionStyle.Positive = "positive";
    ActionStyle.Destructive = "destructive";
    return ActionStyle;
}());
exports.ActionStyle = ActionStyle;
var Size;
(function (Size) {
    Size[Size["Auto"] = 0] = "Auto";
    Size[Size["Stretch"] = 1] = "Stretch";
    Size[Size["Small"] = 2] = "Small";
    Size[Size["Medium"] = 3] = "Medium";
    Size[Size["Large"] = 4] = "Large";
})(Size = exports.Size || (exports.Size = {}));
var SizeUnit;
(function (SizeUnit) {
    SizeUnit[SizeUnit["Weight"] = 0] = "Weight";
    SizeUnit[SizeUnit["Pixel"] = 1] = "Pixel";
})(SizeUnit = exports.SizeUnit || (exports.SizeUnit = {}));
var TextSize;
(function (TextSize) {
    TextSize[TextSize["Small"] = 0] = "Small";
    TextSize[TextSize["Default"] = 1] = "Default";
    TextSize[TextSize["Medium"] = 2] = "Medium";
    TextSize[TextSize["Large"] = 3] = "Large";
    TextSize[TextSize["ExtraLarge"] = 4] = "ExtraLarge";
})(TextSize = exports.TextSize || (exports.TextSize = {}));
var TextWeight;
(function (TextWeight) {
    TextWeight[TextWeight["Lighter"] = 0] = "Lighter";
    TextWeight[TextWeight["Default"] = 1] = "Default";
    TextWeight[TextWeight["Bolder"] = 2] = "Bolder";
})(TextWeight = exports.TextWeight || (exports.TextWeight = {}));
var FontType;
(function (FontType) {
    FontType[FontType["Default"] = 0] = "Default";
    FontType[FontType["Monospace"] = 1] = "Monospace";
})(FontType = exports.FontType || (exports.FontType = {}));
var Spacing;
(function (Spacing) {
    Spacing[Spacing["None"] = 0] = "None";
    Spacing[Spacing["Small"] = 1] = "Small";
    Spacing[Spacing["Default"] = 2] = "Default";
    Spacing[Spacing["Medium"] = 3] = "Medium";
    Spacing[Spacing["Large"] = 4] = "Large";
    Spacing[Spacing["ExtraLarge"] = 5] = "ExtraLarge";
    Spacing[Spacing["Padding"] = 6] = "Padding";
})(Spacing = exports.Spacing || (exports.Spacing = {}));
var TextColor;
(function (TextColor) {
    TextColor[TextColor["Default"] = 0] = "Default";
    TextColor[TextColor["Dark"] = 1] = "Dark";
    TextColor[TextColor["Light"] = 2] = "Light";
    TextColor[TextColor["Accent"] = 3] = "Accent";
    TextColor[TextColor["Good"] = 4] = "Good";
    TextColor[TextColor["Warning"] = 5] = "Warning";
    TextColor[TextColor["Attention"] = 6] = "Attention";
})(TextColor = exports.TextColor || (exports.TextColor = {}));
var HorizontalAlignment;
(function (HorizontalAlignment) {
    HorizontalAlignment[HorizontalAlignment["Left"] = 0] = "Left";
    HorizontalAlignment[HorizontalAlignment["Center"] = 1] = "Center";
    HorizontalAlignment[HorizontalAlignment["Right"] = 2] = "Right";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
var VerticalAlignment;
(function (VerticalAlignment) {
    VerticalAlignment[VerticalAlignment["Top"] = 0] = "Top";
    VerticalAlignment[VerticalAlignment["Center"] = 1] = "Center";
    VerticalAlignment[VerticalAlignment["Bottom"] = 2] = "Bottom";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
var ActionAlignment;
(function (ActionAlignment) {
    ActionAlignment[ActionAlignment["Left"] = 0] = "Left";
    ActionAlignment[ActionAlignment["Center"] = 1] = "Center";
    ActionAlignment[ActionAlignment["Right"] = 2] = "Right";
    ActionAlignment[ActionAlignment["Stretch"] = 3] = "Stretch";
})(ActionAlignment = exports.ActionAlignment || (exports.ActionAlignment = {}));
var ImageStyle;
(function (ImageStyle) {
    ImageStyle[ImageStyle["Default"] = 0] = "Default";
    ImageStyle[ImageStyle["Person"] = 1] = "Person";
})(ImageStyle = exports.ImageStyle || (exports.ImageStyle = {}));
var ShowCardActionMode;
(function (ShowCardActionMode) {
    ShowCardActionMode[ShowCardActionMode["Inline"] = 0] = "Inline";
    ShowCardActionMode[ShowCardActionMode["Popup"] = 1] = "Popup";
})(ShowCardActionMode = exports.ShowCardActionMode || (exports.ShowCardActionMode = {}));
var Orientation;
(function (Orientation) {
    Orientation[Orientation["Horizontal"] = 0] = "Horizontal";
    Orientation[Orientation["Vertical"] = 1] = "Vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));
var FillMode;
(function (FillMode) {
    FillMode[FillMode["Cover"] = 0] = "Cover";
    FillMode[FillMode["RepeatHorizontally"] = 1] = "RepeatHorizontally";
    FillMode[FillMode["RepeatVertically"] = 2] = "RepeatVertically";
    FillMode[FillMode["Repeat"] = 3] = "Repeat";
})(FillMode = exports.FillMode || (exports.FillMode = {}));
var ActionIconPlacement;
(function (ActionIconPlacement) {
    ActionIconPlacement[ActionIconPlacement["LeftOfTitle"] = 0] = "LeftOfTitle";
    ActionIconPlacement[ActionIconPlacement["AboveTitle"] = 1] = "AboveTitle";
})(ActionIconPlacement = exports.ActionIconPlacement || (exports.ActionIconPlacement = {}));
var InputTextStyle;
(function (InputTextStyle) {
    InputTextStyle[InputTextStyle["Text"] = 0] = "Text";
    InputTextStyle[InputTextStyle["Tel"] = 1] = "Tel";
    InputTextStyle[InputTextStyle["Url"] = 2] = "Url";
    InputTextStyle[InputTextStyle["Email"] = 3] = "Email";
})(InputTextStyle = exports.InputTextStyle || (exports.InputTextStyle = {}));
var InputValidationNecessity;
(function (InputValidationNecessity) {
    InputValidationNecessity[InputValidationNecessity["Optional"] = 0] = "Optional";
    InputValidationNecessity[InputValidationNecessity["Required"] = 1] = "Required";
    InputValidationNecessity[InputValidationNecessity["RequiredWithVisualCue"] = 2] = "RequiredWithVisualCue";
})(InputValidationNecessity = exports.InputValidationNecessity || (exports.InputValidationNecessity = {}));
/*
    This should really be a string enum, e.g.

        export enum ContainerStyle {
            Default = "default",
            Emphasis = "emphasis"
        }

    However, some hosts do not use a version of TypeScript
    recent enough to understand string enums. This is
    a compatible construct that does not require using
    a more recent version of TypeScript.

    Also note the "weird" way these readonly fields are declared is to work around
    a breaking change introduced in TS 3.1 wrt d.ts generation. DO NOT CHANGE
    and adopt this syntax for all other static readonly fields.
*/
var ContainerStyle = /** @class */ (function () {
    function ContainerStyle() {
    }
    ContainerStyle.Default = "default";
    ContainerStyle.Emphasis = "emphasis";
    ContainerStyle.Accent = "accent";
    ContainerStyle.Good = "good";
    ContainerStyle.Attention = "attention";
    ContainerStyle.Warning = "warning";
    return ContainerStyle;
}());
exports.ContainerStyle = ContainerStyle;
var ValidationError;
(function (ValidationError) {
    ValidationError[ValidationError["Hint"] = 0] = "Hint";
    ValidationError[ValidationError["ActionTypeNotAllowed"] = 1] = "ActionTypeNotAllowed";
    ValidationError[ValidationError["CollectionCantBeEmpty"] = 2] = "CollectionCantBeEmpty";
    ValidationError[ValidationError["Deprecated"] = 3] = "Deprecated";
    ValidationError[ValidationError["ElementTypeNotAllowed"] = 4] = "ElementTypeNotAllowed";
    ValidationError[ValidationError["InteractivityNotAllowed"] = 5] = "InteractivityNotAllowed";
    ValidationError[ValidationError["InvalidPropertyValue"] = 6] = "InvalidPropertyValue";
    ValidationError[ValidationError["MissingCardType"] = 7] = "MissingCardType";
    ValidationError[ValidationError["PropertyCantBeNull"] = 8] = "PropertyCantBeNull";
    ValidationError[ValidationError["TooManyActions"] = 9] = "TooManyActions";
    ValidationError[ValidationError["UnknownActionType"] = 10] = "UnknownActionType";
    ValidationError[ValidationError["UnknownElementType"] = 11] = "UnknownElementType";
    ValidationError[ValidationError["UnsupportedCardVersion"] = 12] = "UnsupportedCardVersion";
    ValidationError[ValidationError["DuplicateId"] = 13] = "DuplicateId";
})(ValidationError = exports.ValidationError || (exports.ValidationError = {}));
var ContainerFitStatus;
(function (ContainerFitStatus) {
    ContainerFitStatus[ContainerFitStatus["FullyInContainer"] = 0] = "FullyInContainer";
    ContainerFitStatus[ContainerFitStatus["Overflowing"] = 1] = "Overflowing";
    ContainerFitStatus[ContainerFitStatus["FullyOutOfContainer"] = 2] = "FullyOutOfContainer";
})(ContainerFitStatus = exports.ContainerFitStatus || (exports.ContainerFitStatus = {}));
//# sourceMappingURL=enums.js.map

/***/ }),

/***/ "../adaptivecards/lib/host-config.js":
/*!*******************************************!*\
  !*** ../adaptivecards/lib/host-config.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Enums = __webpack_require__(/*! ./enums */ "../adaptivecards/lib/enums.js");
var Utils = __webpack_require__(/*! ./utils */ "../adaptivecards/lib/utils.js");
var Shared = __webpack_require__(/*! ./shared */ "../adaptivecards/lib/shared.js");
var ColorDefinition = /** @class */ (function () {
    function ColorDefinition(defaultColor, subtleColor) {
        this.default = "#000000";
        this.subtle = "#666666";
        if (defaultColor) {
            this.default = defaultColor;
        }
        if (subtleColor) {
            this.subtle = subtleColor;
        }
    }
    ColorDefinition.prototype.parse = function (obj) {
        if (obj) {
            this.default = obj["default"] || this.default;
            this.subtle = obj["subtle"] || this.subtle;
        }
    };
    return ColorDefinition;
}());
exports.ColorDefinition = ColorDefinition;
var TextColorDefinition = /** @class */ (function (_super) {
    __extends(TextColorDefinition, _super);
    function TextColorDefinition() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.highlightColors = new ColorDefinition("#22000000", "#11000000");
        return _this;
    }
    TextColorDefinition.prototype.parse = function (obj) {
        _super.prototype.parse.call(this, obj);
        if (obj) {
            this.highlightColors.parse(obj["highlightColors"]);
        }
    };
    return TextColorDefinition;
}(ColorDefinition));
exports.TextColorDefinition = TextColorDefinition;
var AdaptiveCardConfig = /** @class */ (function () {
    function AdaptiveCardConfig(obj) {
        this.allowCustomStyle = false;
        if (obj) {
            this.allowCustomStyle = obj["allowCustomStyle"] || this.allowCustomStyle;
        }
    }
    return AdaptiveCardConfig;
}());
exports.AdaptiveCardConfig = AdaptiveCardConfig;
var ImageSetConfig = /** @class */ (function () {
    function ImageSetConfig(obj) {
        this.imageSize = Enums.Size.Medium;
        this.maxImageHeight = 100;
        if (obj) {
            this.imageSize = obj["imageSize"] != null ? obj["imageSize"] : this.imageSize;
            this.maxImageHeight = Utils.getNumberValue(obj["maxImageHeight"], 100);
        }
    }
    ImageSetConfig.prototype.toJSON = function () {
        return {
            imageSize: Enums.Size[this.imageSize],
            maxImageHeight: this.maxImageHeight
        };
    };
    return ImageSetConfig;
}());
exports.ImageSetConfig = ImageSetConfig;
var MediaConfig = /** @class */ (function () {
    function MediaConfig(obj) {
        this.allowInlinePlayback = true;
        if (obj) {
            this.defaultPoster = obj["defaultPoster"];
            this.allowInlinePlayback = obj["allowInlinePlayback"] || this.allowInlinePlayback;
        }
    }
    MediaConfig.prototype.toJSON = function () {
        return {
            defaultPoster: this.defaultPoster,
            allowInlinePlayback: this.allowInlinePlayback
        };
    };
    return MediaConfig;
}());
exports.MediaConfig = MediaConfig;
var FactTextDefinition = /** @class */ (function () {
    function FactTextDefinition(obj) {
        this.size = Enums.TextSize.Default;
        this.color = Enums.TextColor.Default;
        this.isSubtle = false;
        this.weight = Enums.TextWeight.Default;
        this.wrap = true;
        if (obj) {
            this.size = Utils.parseHostConfigEnum(Enums.TextSize, obj["size"], Enums.TextSize.Default);
            this.color = Utils.parseHostConfigEnum(Enums.TextColor, obj["color"], Enums.TextColor.Default);
            this.isSubtle = obj["isSubtle"] || this.isSubtle;
            this.weight = Utils.parseHostConfigEnum(Enums.TextWeight, obj["weight"], this.getDefaultWeight());
            this.wrap = obj["wrap"] != null ? obj["wrap"] : this.wrap;
        }
    }
    ;
    FactTextDefinition.prototype.getDefaultWeight = function () {
        return Enums.TextWeight.Default;
    };
    FactTextDefinition.prototype.toJSON = function () {
        return {
            size: Enums.TextSize[this.size],
            color: Enums.TextColor[this.color],
            isSubtle: this.isSubtle,
            weight: Enums.TextWeight[this.weight],
            wrap: this.wrap
        };
    };
    return FactTextDefinition;
}());
exports.FactTextDefinition = FactTextDefinition;
var FactTitleDefinition = /** @class */ (function (_super) {
    __extends(FactTitleDefinition, _super);
    function FactTitleDefinition(obj) {
        var _this = _super.call(this, obj) || this;
        _this.maxWidth = 150;
        _this.weight = Enums.TextWeight.Bolder;
        if (obj) {
            _this.maxWidth = obj["maxWidth"] != null ? obj["maxWidth"] : _this.maxWidth;
            _this.weight = Utils.parseHostConfigEnum(Enums.TextWeight, obj["weight"], Enums.TextWeight.Bolder);
        }
        return _this;
    }
    FactTitleDefinition.prototype.getDefaultWeight = function () {
        return Enums.TextWeight.Bolder;
    };
    return FactTitleDefinition;
}(FactTextDefinition));
exports.FactTitleDefinition = FactTitleDefinition;
var FactSetConfig = /** @class */ (function () {
    function FactSetConfig(obj) {
        this.title = new FactTitleDefinition();
        this.value = new FactTextDefinition();
        this.spacing = 10;
        if (obj) {
            this.title = new FactTitleDefinition(obj["title"]);
            this.value = new FactTextDefinition(obj["value"]);
            this.spacing = obj.spacing && obj.spacing != null ? obj.spacing && obj.spacing : this.spacing;
        }
    }
    return FactSetConfig;
}());
exports.FactSetConfig = FactSetConfig;
var ShowCardActionConfig = /** @class */ (function () {
    function ShowCardActionConfig(obj) {
        this.actionMode = Enums.ShowCardActionMode.Inline;
        this.inlineTopMargin = 16;
        this.style = Enums.ContainerStyle.Emphasis;
        if (obj) {
            this.actionMode = Utils.parseHostConfigEnum(Enums.ShowCardActionMode, obj["actionMode"], Enums.ShowCardActionMode.Inline);
            this.inlineTopMargin = obj["inlineTopMargin"] != null ? obj["inlineTopMargin"] : this.inlineTopMargin;
            this.style = obj["style"] && typeof obj["style"] === "string" ? obj["style"] : Enums.ContainerStyle.Emphasis;
        }
    }
    ShowCardActionConfig.prototype.toJSON = function () {
        return {
            actionMode: Enums.ShowCardActionMode[this.actionMode],
            inlineTopMargin: this.inlineTopMargin,
            style: this.style
        };
    };
    return ShowCardActionConfig;
}());
exports.ShowCardActionConfig = ShowCardActionConfig;
var ActionsConfig = /** @class */ (function () {
    function ActionsConfig(obj) {
        this.maxActions = 5;
        this.spacing = Enums.Spacing.Default;
        this.buttonSpacing = 20;
        this.showCard = new ShowCardActionConfig();
        this.preExpandSingleShowCardAction = false;
        this.actionsOrientation = Enums.Orientation.Horizontal;
        this.actionAlignment = Enums.ActionAlignment.Left;
        this.iconPlacement = Enums.ActionIconPlacement.LeftOfTitle;
        this.allowTitleToWrap = false;
        this.iconSize = 24;
        if (obj) {
            this.maxActions = obj["maxActions"] != null ? obj["maxActions"] : this.maxActions;
            this.spacing = Utils.parseHostConfigEnum(Enums.Spacing, obj.spacing && obj.spacing, Enums.Spacing.Default);
            this.buttonSpacing = obj["buttonSpacing"] != null ? obj["buttonSpacing"] : this.buttonSpacing;
            this.showCard = new ShowCardActionConfig(obj["showCard"]);
            this.preExpandSingleShowCardAction = Utils.getBoolValue(obj["preExpandSingleShowCardAction"], false);
            this.actionsOrientation = Utils.parseHostConfigEnum(Enums.Orientation, obj["actionsOrientation"], Enums.Orientation.Horizontal);
            this.actionAlignment = Utils.parseHostConfigEnum(Enums.ActionAlignment, obj["actionAlignment"], Enums.ActionAlignment.Left);
            this.iconPlacement = Utils.parseHostConfigEnum(Enums.ActionIconPlacement, obj["iconPlacement"], Enums.ActionIconPlacement.LeftOfTitle);
            this.allowTitleToWrap = obj["allowTitleToWrap"] != null ? obj["allowTitleToWrap"] : this.allowTitleToWrap;
            try {
                var sizeAndUnit = Shared.SizeAndUnit.parse(obj["iconSize"]);
                if (sizeAndUnit.unit == Enums.SizeUnit.Pixel) {
                    this.iconSize = sizeAndUnit.physicalSize;
                }
            }
            catch (e) {
                // Swallow this, keep default icon size
            }
        }
    }
    ActionsConfig.prototype.toJSON = function () {
        return {
            maxActions: this.maxActions,
            spacing: Enums.Spacing[this.spacing],
            buttonSpacing: this.buttonSpacing,
            showCard: this.showCard,
            preExpandSingleShowCardAction: this.preExpandSingleShowCardAction,
            actionsOrientation: Enums.Orientation[this.actionsOrientation],
            actionAlignment: Enums.ActionAlignment[this.actionAlignment]
        };
    };
    return ActionsConfig;
}());
exports.ActionsConfig = ActionsConfig;
var ColorSetDefinition = /** @class */ (function () {
    function ColorSetDefinition(obj) {
        this.default = new TextColorDefinition();
        this.dark = new TextColorDefinition();
        this.light = new TextColorDefinition();
        this.accent = new TextColorDefinition();
        this.good = new TextColorDefinition();
        this.warning = new TextColorDefinition();
        this.attention = new TextColorDefinition();
        this.parse(obj);
    }
    ColorSetDefinition.prototype.parseSingleColor = function (obj, propertyName) {
        if (obj) {
            this[propertyName].parse(obj[propertyName]);
        }
    };
    ColorSetDefinition.prototype.parse = function (obj) {
        if (obj) {
            this.parseSingleColor(obj, "default");
            this.parseSingleColor(obj, "dark");
            this.parseSingleColor(obj, "light");
            this.parseSingleColor(obj, "accent");
            this.parseSingleColor(obj, "good");
            this.parseSingleColor(obj, "warning");
            this.parseSingleColor(obj, "attention");
        }
    };
    return ColorSetDefinition;
}());
exports.ColorSetDefinition = ColorSetDefinition;
var ContainerStyleDefinition = /** @class */ (function () {
    function ContainerStyleDefinition(obj) {
        this.foregroundColors = new ColorSetDefinition({
            "default": { default: "#333333", subtle: "#EE333333" },
            "dark": { default: "#000000", subtle: "#66000000" },
            "light": { default: "#FFFFFF", subtle: "#33000000" },
            "accent": { default: "#2E89FC", subtle: "#882E89FC" },
            "good": { default: "#54A254", subtle: "#DD54A254" },
            "warning": { default: "#E69500", subtle: "#DDE69500" },
            "attention": { default: "#CC3300", subtle: "#DDCC3300" }
        });
        this.parse(obj);
    }
    ContainerStyleDefinition.prototype.parse = function (obj) {
        if (obj) {
            this.backgroundColor = obj["backgroundColor"];
            this.foregroundColors.parse(obj["foregroundColors"]);
            this.highlightBackgroundColor = obj["highlightBackgroundColor"];
            this.highlightForegroundColor = obj["highlightForegroundColor"];
        }
    };
    Object.defineProperty(ContainerStyleDefinition.prototype, "isBuiltIn", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return ContainerStyleDefinition;
}());
exports.ContainerStyleDefinition = ContainerStyleDefinition;
var BuiltInContainerStyleDefinition = /** @class */ (function (_super) {
    __extends(BuiltInContainerStyleDefinition, _super);
    function BuiltInContainerStyleDefinition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BuiltInContainerStyleDefinition.prototype, "isBuiltIn", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    return BuiltInContainerStyleDefinition;
}(ContainerStyleDefinition));
var ContainerStyleSet = /** @class */ (function () {
    function ContainerStyleSet(obj) {
        this._allStyles = {};
        this._allStyles[Enums.ContainerStyle.Default] = new BuiltInContainerStyleDefinition();
        this._allStyles[Enums.ContainerStyle.Emphasis] = new BuiltInContainerStyleDefinition();
        this._allStyles[Enums.ContainerStyle.Accent] = new BuiltInContainerStyleDefinition();
        this._allStyles[Enums.ContainerStyle.Good] = new BuiltInContainerStyleDefinition();
        this._allStyles[Enums.ContainerStyle.Attention] = new BuiltInContainerStyleDefinition();
        this._allStyles[Enums.ContainerStyle.Warning] = new BuiltInContainerStyleDefinition();
        if (obj) {
            this._allStyles[Enums.ContainerStyle.Default].parse(obj[Enums.ContainerStyle.Default]);
            this._allStyles[Enums.ContainerStyle.Emphasis].parse(obj[Enums.ContainerStyle.Emphasis]);
            this._allStyles[Enums.ContainerStyle.Accent].parse(obj[Enums.ContainerStyle.Accent]);
            this._allStyles[Enums.ContainerStyle.Good].parse(obj[Enums.ContainerStyle.Good]);
            this._allStyles[Enums.ContainerStyle.Attention].parse(obj[Enums.ContainerStyle.Attention]);
            this._allStyles[Enums.ContainerStyle.Warning].parse(obj[Enums.ContainerStyle.Warning]);
            var customStyleArray = obj["customStyles"];
            if (customStyleArray && Array.isArray(customStyleArray)) {
                for (var _i = 0, customStyleArray_1 = customStyleArray; _i < customStyleArray_1.length; _i++) {
                    var customStyle = customStyleArray_1[_i];
                    if (customStyle) {
                        var styleName = customStyle["name"];
                        if (styleName && typeof styleName === "string") {
                            if (this._allStyles.hasOwnProperty(styleName)) {
                                this._allStyles[styleName].parse(customStyle["style"]);
                            }
                            else {
                                this._allStyles[styleName] = new ContainerStyleDefinition(customStyle["style"]);
                            }
                        }
                    }
                }
            }
        }
    }
    ContainerStyleSet.prototype.toJSON = function () {
        var _this = this;
        var customStyleArray = [];
        Object.keys(this._allStyles).forEach(function (key) {
            if (!_this._allStyles[key].isBuiltIn) {
                customStyleArray.push({
                    name: key,
                    style: _this._allStyles[key]
                });
            }
        });
        var result = {
            default: this.default,
            emphasis: this.emphasis
        };
        if (customStyleArray.length > 0) {
            result.customStyles = customStyleArray;
        }
        return result;
    };
    ContainerStyleSet.prototype.getStyleByName = function (name, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        return this._allStyles.hasOwnProperty(name) ? this._allStyles[name] : defaultValue;
    };
    Object.defineProperty(ContainerStyleSet.prototype, "default", {
        get: function () {
            return this._allStyles[Enums.ContainerStyle.Default];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContainerStyleSet.prototype, "emphasis", {
        get: function () {
            return this._allStyles[Enums.ContainerStyle.Emphasis];
        },
        enumerable: true,
        configurable: true
    });
    return ContainerStyleSet;
}());
exports.ContainerStyleSet = ContainerStyleSet;
var Version = /** @class */ (function () {
    function Version(major, minor, label) {
        if (major === void 0) { major = 1; }
        if (minor === void 0) { minor = 1; }
        this._isValid = true;
        this._major = major;
        this._minor = minor;
        this._label = label;
    }
    Version.parse = function (versionString, errors) {
        if (!versionString) {
            return null;
        }
        var result = new Version();
        result._versionString = versionString;
        var regEx = /(\d+).(\d+)/gi;
        var matches = regEx.exec(versionString);
        if (matches != null && matches.length == 3) {
            result._major = parseInt(matches[1]);
            result._minor = parseInt(matches[2]);
        }
        else {
            result._isValid = false;
        }
        if (!result._isValid && errors) {
            errors.push({
                error: Enums.ValidationError.InvalidPropertyValue,
                message: "Invalid version string: " + result._versionString
            });
        }
        return result;
    };
    Version.prototype.toString = function () {
        return !this._isValid ? this._versionString : this._major + "." + this._minor;
    };
    Version.prototype.compareTo = function (otherVersion) {
        if (!this.isValid || !otherVersion.isValid) {
            throw new Error("Cannot compare invalid version.");
        }
        if (this.major > otherVersion.major) {
            return 1;
        }
        else if (this.major < otherVersion.major) {
            return -1;
        }
        else if (this.minor > otherVersion.minor) {
            return 1;
        }
        else if (this.minor < otherVersion.minor) {
            return -1;
        }
        return 0;
    };
    Object.defineProperty(Version.prototype, "label", {
        get: function () {
            return this._label ? this._label : this.toString();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "major", {
        get: function () {
            return this._major;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "minor", {
        get: function () {
            return this._minor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "isValid", {
        get: function () {
            return this._isValid;
        },
        enumerable: true,
        configurable: true
    });
    return Version;
}());
exports.Version = Version;
var HostCapabilities = /** @class */ (function () {
    function HostCapabilities() {
        this.capabilities = null;
    }
    HostCapabilities.prototype.setCapability = function (name, version) {
        if (!this.capabilities) {
            this.capabilities = {};
        }
        this.capabilities[name] = version;
    };
    HostCapabilities.prototype.parse = function (json, errors) {
        if (json) {
            for (var name_1 in json) {
                var jsonVersion = json[name_1];
                if (typeof jsonVersion === "string") {
                    if (jsonVersion == "*") {
                        this.setCapability(name_1, "*");
                    }
                    else {
                        var version = Version.parse(jsonVersion, errors);
                        if (version.isValid) {
                            this.setCapability(name_1, version);
                        }
                    }
                }
            }
        }
    };
    HostCapabilities.prototype.hasCapability = function (name, version) {
        if (this.capabilities && this.capabilities.hasOwnProperty(name)) {
            if (version == "*" || this.capabilities[name] == "*") {
                return true;
            }
            return version.compareTo(this.capabilities[name]) <= 0;
        }
        return false;
    };
    HostCapabilities.prototype.areAllMet = function (hostCapabilities) {
        if (this.capabilities) {
            for (var capabilityName in this.capabilities) {
                if (!hostCapabilities.hasCapability(capabilityName, this.capabilities[capabilityName])) {
                    return false;
                }
            }
        }
        return true;
    };
    return HostCapabilities;
}());
exports.HostCapabilities = HostCapabilities;
var FontTypeDefinition = /** @class */ (function () {
    function FontTypeDefinition(fontFamily) {
        this.fontFamily = "Segoe UI,Segoe,Segoe WP,Helvetica Neue,Helvetica,sans-serif";
        this.fontSizes = {
            small: 12,
            default: 14,
            medium: 17,
            large: 21,
            extraLarge: 26
        };
        this.fontWeights = {
            lighter: 200,
            default: 400,
            bolder: 600
        };
        if (fontFamily) {
            this.fontFamily = fontFamily;
        }
    }
    FontTypeDefinition.prototype.parse = function (obj) {
        this.fontFamily = obj["fontFamily"] || this.fontFamily;
        this.fontSizes = {
            small: obj.fontSizes && obj.fontSizes["small"] || this.fontSizes.small,
            default: obj.fontSizes && obj.fontSizes["default"] || this.fontSizes.default,
            medium: obj.fontSizes && obj.fontSizes["medium"] || this.fontSizes.medium,
            large: obj.fontSizes && obj.fontSizes["large"] || this.fontSizes.large,
            extraLarge: obj.fontSizes && obj.fontSizes["extraLarge"] || this.fontSizes.extraLarge
        };
        this.fontWeights = {
            lighter: obj.fontWeights && obj.fontWeights["lighter"] || this.fontWeights.lighter,
            default: obj.fontWeights && obj.fontWeights["default"] || this.fontWeights.default,
            bolder: obj.fontWeights && obj.fontWeights["bolder"] || this.fontWeights.bolder
        };
    };
    FontTypeDefinition.monospace = new FontTypeDefinition("'Courier New', Courier, monospace");
    return FontTypeDefinition;
}());
exports.FontTypeDefinition = FontTypeDefinition;
var FontTypeSet = /** @class */ (function () {
    function FontTypeSet(obj) {
        this.default = new FontTypeDefinition();
        this.monospace = new FontTypeDefinition("'Courier New', Courier, monospace");
        if (obj) {
            this.default.parse(obj["default"]);
            this.monospace.parse(obj["monospace"]);
        }
    }
    FontTypeSet.prototype.getStyleDefinition = function (style) {
        switch (style) {
            case Enums.FontType.Monospace:
                return this.monospace;
            case Enums.FontType.Default:
            default:
                return this.default;
        }
    };
    return FontTypeSet;
}());
exports.FontTypeSet = FontTypeSet;
var HostConfig = /** @class */ (function () {
    function HostConfig(obj) {
        this.hostCapabilities = new HostCapabilities();
        this.choiceSetInputValueSeparator = ",";
        this.supportsInteractivity = true;
        this.fontTypes = null;
        this.spacing = {
            small: 3,
            default: 8,
            medium: 20,
            large: 30,
            extraLarge: 40,
            padding: 15
        };
        this.separator = {
            lineThickness: 1,
            lineColor: "#EEEEEE"
        };
        this.imageSizes = {
            small: 40,
            medium: 80,
            large: 160
        };
        this.containerStyles = new ContainerStyleSet();
        this.actions = new ActionsConfig();
        this.adaptiveCard = new AdaptiveCardConfig();
        this.imageSet = new ImageSetConfig();
        this.media = new MediaConfig();
        this.factSet = new FactSetConfig();
        this.cssClassNamePrefix = null;
        this.alwaysAllowBleed = false;
        if (obj) {
            if (typeof obj === "string" || obj instanceof String) {
                obj = JSON.parse(obj);
            }
            this.choiceSetInputValueSeparator = (obj && typeof obj["choiceSetInputValueSeparator"] === "string") ? obj["choiceSetInputValueSeparator"] : this.choiceSetInputValueSeparator;
            this.supportsInteractivity = (obj && typeof obj["supportsInteractivity"] === "boolean") ? obj["supportsInteractivity"] : this.supportsInteractivity;
            this._legacyFontType = new FontTypeDefinition();
            this._legacyFontType.parse(obj);
            if (obj.fontTypes) {
                this.fontTypes = new FontTypeSet(obj.fontTypes);
            }
            if (obj.lineHeights) {
                this.lineHeights = {
                    small: obj.lineHeights["small"],
                    default: obj.lineHeights["default"],
                    medium: obj.lineHeights["medium"],
                    large: obj.lineHeights["large"],
                    extraLarge: obj.lineHeights["extraLarge"]
                };
            }
            ;
            this.imageSizes = {
                small: obj.imageSizes && obj.imageSizes["small"] || this.imageSizes.small,
                medium: obj.imageSizes && obj.imageSizes["medium"] || this.imageSizes.medium,
                large: obj.imageSizes && obj.imageSizes["large"] || this.imageSizes.large,
            };
            this.containerStyles = new ContainerStyleSet(obj["containerStyles"]);
            this.spacing = {
                small: obj.spacing && obj.spacing["small"] || this.spacing.small,
                default: obj.spacing && obj.spacing["default"] || this.spacing.default,
                medium: obj.spacing && obj.spacing["medium"] || this.spacing.medium,
                large: obj.spacing && obj.spacing["large"] || this.spacing.large,
                extraLarge: obj.spacing && obj.spacing["extraLarge"] || this.spacing.extraLarge,
                padding: obj.spacing && obj.spacing["padding"] || this.spacing.padding
            };
            this.separator = {
                lineThickness: obj.separator && obj.separator["lineThickness"] || this.separator.lineThickness,
                lineColor: obj.separator && obj.separator["lineColor"] || this.separator.lineColor
            };
            this.actions = new ActionsConfig(obj.actions || this.actions);
            this.adaptiveCard = new AdaptiveCardConfig(obj.adaptiveCard || this.adaptiveCard);
            this.imageSet = new ImageSetConfig(obj["imageSet"]);
            this.factSet = new FactSetConfig(obj["factSet"]);
        }
    }
    HostConfig.prototype.getFontTypeDefinition = function (style) {
        if (this.fontTypes) {
            return this.fontTypes.getStyleDefinition(style);
        }
        else {
            return style == Enums.FontType.Monospace ? FontTypeDefinition.monospace : this._legacyFontType;
        }
    };
    HostConfig.prototype.getEffectiveSpacing = function (spacing) {
        switch (spacing) {
            case Enums.Spacing.Small:
                return this.spacing.small;
            case Enums.Spacing.Default:
                return this.spacing.default;
            case Enums.Spacing.Medium:
                return this.spacing.medium;
            case Enums.Spacing.Large:
                return this.spacing.large;
            case Enums.Spacing.ExtraLarge:
                return this.spacing.extraLarge;
            case Enums.Spacing.Padding:
                return this.spacing.padding;
            default:
                return 0;
        }
    };
    HostConfig.prototype.paddingDefinitionToSpacingDefinition = function (paddingDefinition) {
        return new Shared.SpacingDefinition(this.getEffectiveSpacing(paddingDefinition.top), this.getEffectiveSpacing(paddingDefinition.right), this.getEffectiveSpacing(paddingDefinition.bottom), this.getEffectiveSpacing(paddingDefinition.left));
    };
    HostConfig.prototype.makeCssClassNames = function () {
        var classNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            classNames[_i] = arguments[_i];
        }
        var result = [];
        for (var _a = 0, classNames_1 = classNames; _a < classNames_1.length; _a++) {
            var className = classNames_1[_a];
            result.push((this.cssClassNamePrefix ? this.cssClassNamePrefix + "-" : "") + className);
        }
        return result;
    };
    HostConfig.prototype.makeCssClassName = function () {
        var classNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            classNames[_i] = arguments[_i];
        }
        var result = this.makeCssClassNames.apply(this, classNames).join(" ");
        return result ? result : "";
    };
    Object.defineProperty(HostConfig.prototype, "fontFamily", {
        get: function () {
            return this._legacyFontType.fontFamily;
        },
        set: function (value) {
            this._legacyFontType.fontFamily = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostConfig.prototype, "fontSizes", {
        get: function () {
            return this._legacyFontType.fontSizes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostConfig.prototype, "fontWeights", {
        get: function () {
            return this._legacyFontType.fontWeights;
        },
        enumerable: true,
        configurable: true
    });
    return HostConfig;
}());
exports.HostConfig = HostConfig;
//# sourceMappingURL=host-config.js.map

/***/ }),

/***/ "../adaptivecards/lib/shared.js":
/*!**************************************!*\
  !*** ../adaptivecards/lib/shared.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Enums = __webpack_require__(/*! ./enums */ "../adaptivecards/lib/enums.js");
exports.ContentTypes = {
    applicationJson: "application/json",
    applicationXWwwFormUrlencoded: "application/x-www-form-urlencoded"
};
var StringWithSubstitutions = /** @class */ (function () {
    function StringWithSubstitutions() {
        this._isProcessed = false;
        this._original = null;
        this._processed = null;
    }
    StringWithSubstitutions.prototype.getReferencedInputs = function (inputs, referencedInputs) {
        if (!referencedInputs) {
            throw new Error("The referencedInputs parameter cannot be null.");
        }
        for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {
            var input = inputs_1[_i];
            var matches = new RegExp("\\{{2}(" + input.id + ").value\\}{2}", "gi").exec(this._original);
            if (matches != null) {
                referencedInputs[input.id] = input;
            }
        }
    };
    StringWithSubstitutions.prototype.substituteInputValues = function (inputs, contentType) {
        this._processed = this._original;
        var regEx = /\{{2}([a-z0-9_$@]+).value\}{2}/gi;
        var matches;
        while ((matches = regEx.exec(this._original)) != null) {
            var matchedInput = null;
            for (var _i = 0, _a = Object.keys(inputs); _i < _a.length; _i++) {
                var key = _a[_i];
                if (key.toLowerCase() == matches[1].toLowerCase()) {
                    matchedInput = inputs[key];
                    break;
                }
            }
            if (matchedInput) {
                var valueForReplace = "";
                if (matchedInput.value) {
                    valueForReplace = matchedInput.value;
                }
                if (contentType === exports.ContentTypes.applicationJson) {
                    valueForReplace = JSON.stringify(valueForReplace);
                    valueForReplace = valueForReplace.slice(1, -1);
                }
                else if (contentType === exports.ContentTypes.applicationXWwwFormUrlencoded) {
                    valueForReplace = encodeURIComponent(valueForReplace);
                }
                this._processed = this._processed.replace(matches[0], valueForReplace);
            }
        }
        ;
        this._isProcessed = true;
    };
    StringWithSubstitutions.prototype.getOriginal = function () {
        return this._original;
    };
    StringWithSubstitutions.prototype.get = function () {
        if (!this._isProcessed) {
            return this._original;
        }
        else {
            return this._processed;
        }
    };
    StringWithSubstitutions.prototype.set = function (value) {
        this._original = value;
        this._isProcessed = false;
    };
    return StringWithSubstitutions;
}());
exports.StringWithSubstitutions = StringWithSubstitutions;
var SpacingDefinition = /** @class */ (function () {
    function SpacingDefinition(top, right, bottom, left) {
        if (top === void 0) { top = 0; }
        if (right === void 0) { right = 0; }
        if (bottom === void 0) { bottom = 0; }
        if (left === void 0) { left = 0; }
        this.left = 0;
        this.top = 0;
        this.right = 0;
        this.bottom = 0;
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
    }
    return SpacingDefinition;
}());
exports.SpacingDefinition = SpacingDefinition;
var PaddingDefinition = /** @class */ (function () {
    function PaddingDefinition(top, right, bottom, left) {
        if (top === void 0) { top = Enums.Spacing.None; }
        if (right === void 0) { right = Enums.Spacing.None; }
        if (bottom === void 0) { bottom = Enums.Spacing.None; }
        if (left === void 0) { left = Enums.Spacing.None; }
        this.top = Enums.Spacing.None;
        this.right = Enums.Spacing.None;
        this.bottom = Enums.Spacing.None;
        this.left = Enums.Spacing.None;
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
    }
    return PaddingDefinition;
}());
exports.PaddingDefinition = PaddingDefinition;
var SizeAndUnit = /** @class */ (function () {
    function SizeAndUnit(physicalSize, unit) {
        this.physicalSize = physicalSize;
        this.unit = unit;
    }
    SizeAndUnit.parse = function (input, requireUnitSpecifier) {
        if (requireUnitSpecifier === void 0) { requireUnitSpecifier = false; }
        var result = new SizeAndUnit(0, Enums.SizeUnit.Weight);
        if (typeof input === "number") {
            result.physicalSize = input;
            return result;
        }
        else if (typeof input === "string") {
            var regExp = /^([0-9]+)(px|\*)?$/g;
            var matches = regExp.exec(input);
            var expectedMatchCount = requireUnitSpecifier ? 3 : 2;
            if (matches && matches.length >= expectedMatchCount) {
                result.physicalSize = parseInt(matches[1]);
                if (matches.length == 3) {
                    if (matches[2] == "px") {
                        result.unit = Enums.SizeUnit.Pixel;
                    }
                }
                return result;
            }
        }
        throw new Error("Invalid size: " + input);
    };
    return SizeAndUnit;
}());
exports.SizeAndUnit = SizeAndUnit;
/**
 * Fast UUID generator, RFC4122 version 4 compliant.
 * @author Jeff Ward (jcward.com).
 * @license MIT license
 * @link http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
 **/
var UUID = /** @class */ (function () {
    function UUID() {
    }
    UUID.generate = function () {
        var d0 = Math.random() * 0xffffffff | 0;
        var d1 = Math.random() * 0xffffffff | 0;
        var d2 = Math.random() * 0xffffffff | 0;
        var d3 = Math.random() * 0xffffffff | 0;
        return UUID.lut[d0 & 0xff] + UUID.lut[d0 >> 8 & 0xff] + UUID.lut[d0 >> 16 & 0xff] + UUID.lut[d0 >> 24 & 0xff] + '-' +
            UUID.lut[d1 & 0xff] + UUID.lut[d1 >> 8 & 0xff] + '-' + UUID.lut[d1 >> 16 & 0x0f | 0x40] + UUID.lut[d1 >> 24 & 0xff] + '-' +
            UUID.lut[d2 & 0x3f | 0x80] + UUID.lut[d2 >> 8 & 0xff] + '-' + UUID.lut[d2 >> 16 & 0xff] + UUID.lut[d2 >> 24 & 0xff] +
            UUID.lut[d3 & 0xff] + UUID.lut[d3 >> 8 & 0xff] + UUID.lut[d3 >> 16 & 0xff] + UUID.lut[d3 >> 24 & 0xff];
    };
    UUID.initialize = function () {
        for (var i = 0; i < 256; i++) {
            UUID.lut[i] = (i < 16 ? '0' : '') + i.toString(16);
        }
    };
    UUID.lut = [];
    return UUID;
}());
exports.UUID = UUID;
UUID.initialize();
//# sourceMappingURL=shared.js.map

/***/ }),

/***/ "../adaptivecards/lib/text-formatters.js":
/*!***********************************************!*\
  !*** ../adaptivecards/lib/text-formatters.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var AbstractTextFormatter = /** @class */ (function () {
    function AbstractTextFormatter(regularExpression) {
        this._regularExpression = regularExpression;
    }
    AbstractTextFormatter.prototype.format = function (lang, input) {
        var matches;
        var result = input;
        while ((matches = this._regularExpression.exec(input)) != null) {
            result = result.replace(matches[0], this.internalFormat(lang, matches));
        }
        ;
        return result;
    };
    return AbstractTextFormatter;
}());
var DateFormatter = /** @class */ (function (_super) {
    __extends(DateFormatter, _super);
    function DateFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DateFormatter.prototype.internalFormat = function (lang, matches) {
        var date = new Date(Date.parse(matches[1]));
        var format = matches[2] != undefined ? matches[2].toLowerCase() : "compact";
        if (format != "compact") {
            return date.toLocaleDateString(lang, { day: "numeric", weekday: format, month: format, year: "numeric" });
        }
        else {
            return date.toLocaleDateString();
        }
    };
    return DateFormatter;
}(AbstractTextFormatter));
var TimeFormatter = /** @class */ (function (_super) {
    __extends(TimeFormatter, _super);
    function TimeFormatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TimeFormatter.prototype.internalFormat = function (lang, matches) {
        var date = new Date(Date.parse(matches[1]));
        return date.toLocaleTimeString(lang, { hour: 'numeric', minute: '2-digit' });
    };
    return TimeFormatter;
}(AbstractTextFormatter));
function formatText(lang, text) {
    var formatters = [
        new DateFormatter(/\{{2}DATE\((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:Z|(?:(?:-|\+)\d{2}:\d{2})))(?:, ?(COMPACT|LONG|SHORT))?\)\}{2}/g),
        new TimeFormatter(/\{{2}TIME\((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:Z|(?:(?:-|\+)\d{2}:\d{2})))\)\}{2}/g)
    ];
    var result = text;
    for (var i = 0; i < formatters.length; i++) {
        result = formatters[i].format(lang, result);
    }
    return result;
}
exports.formatText = formatText;
//# sourceMappingURL=text-formatters.js.map

/***/ }),

/***/ "../adaptivecards/lib/utils.js":
/*!*************************************!*\
  !*** ../adaptivecards/lib/utils.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Enums = __webpack_require__(/*! ./enums */ "../adaptivecards/lib/enums.js");
var Shared = __webpack_require__(/*! ./shared */ "../adaptivecards/lib/shared.js");
function generateUniqueId() {
    return "__ac-" + Shared.UUID.generate();
}
exports.generateUniqueId = generateUniqueId;
function isNullOrEmpty(value) {
    return value === undefined || value === null || value === "";
}
exports.isNullOrEmpty = isNullOrEmpty;
function appendChild(node, child) {
    if (child != null && child != undefined) {
        node.appendChild(child);
    }
}
exports.appendChild = appendChild;
function getStringValue(obj, defaultValue) {
    if (defaultValue === void 0) { defaultValue = undefined; }
    return typeof obj === "string" ? obj.toString() : defaultValue;
}
exports.getStringValue = getStringValue;
function getNumberValue(obj, defaultValue) {
    if (defaultValue === void 0) { defaultValue = undefined; }
    return typeof obj === "number" ? obj : defaultValue;
}
exports.getNumberValue = getNumberValue;
function getBoolValue(value, defaultValue) {
    if (typeof value === "boolean") {
        return value;
    }
    else if (typeof value === "string") {
        switch (value.toLowerCase()) {
            case "true":
                return true;
            case "false":
                return false;
            default:
                return defaultValue;
        }
    }
    return defaultValue;
}
exports.getBoolValue = getBoolValue;
function getEnumValue(targetEnum, name, defaultValue) {
    if (isNullOrEmpty(name)) {
        return defaultValue;
    }
    for (var key in targetEnum) {
        var isValueProperty = parseInt(key, 10) >= 0;
        if (isValueProperty) {
            var value = targetEnum[key];
            if (value && typeof value === "string") {
                if (value.toLowerCase() === name.toLowerCase()) {
                    return parseInt(key, 10);
                }
            }
        }
    }
    return defaultValue;
}
exports.getEnumValue = getEnumValue;
function setProperty(target, propertyName, propertyValue, defaultValue) {
    if (defaultValue === void 0) { defaultValue = undefined; }
    if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue) {
        delete target[propertyName];
    }
    else {
        target[propertyName] = propertyValue;
    }
}
exports.setProperty = setProperty;
function setNumberProperty(target, propertyName, propertyValue, defaultValue) {
    if (defaultValue === void 0) { defaultValue = undefined; }
    if (propertyValue === null || propertyValue === undefined || propertyValue === defaultValue || isNaN(propertyValue)) {
        delete target[propertyName];
    }
    else {
        target[propertyName] = propertyValue;
    }
}
exports.setNumberProperty = setNumberProperty;
function setEnumProperty(enumType, target, propertyName, propertyValue, defaultValue) {
    if (defaultValue === void 0) { defaultValue = undefined; }
    var targetValue = target[propertyName];
    var canDeleteTarget = targetValue == undefined ? true : enumType[targetValue] !== undefined;
    if (propertyValue == defaultValue) {
        if (canDeleteTarget) {
            delete target[propertyName];
        }
    }
    else {
        if (propertyValue == undefined) {
            if (canDeleteTarget) {
                delete target[propertyName];
            }
        }
        else {
            target[propertyName] = enumType[propertyValue];
        }
    }
}
exports.setEnumProperty = setEnumProperty;
function setArrayProperty(target, propertyName, propertyValue) {
    var items = [];
    if (propertyValue) {
        for (var _i = 0, propertyValue_1 = propertyValue; _i < propertyValue_1.length; _i++) {
            var item = propertyValue_1[_i];
            items.push(item.toJSON());
        }
    }
    if (items.length == 0) {
        if (target.hasOwnProperty(propertyName) && Array.isArray(target[propertyName])) {
            delete target[propertyName];
        }
    }
    else {
        setProperty(target, propertyName, items);
    }
}
exports.setArrayProperty = setArrayProperty;
function parseHostConfigEnum(targetEnum, value, defaultValue) {
    if (typeof value === "string") {
        return getEnumValue(targetEnum, value, defaultValue);
    }
    else if (typeof value === "number") {
        return value;
    }
    else {
        return defaultValue;
    }
}
exports.parseHostConfigEnum = parseHostConfigEnum;
function renderSeparation(hostConfig, separationDefinition, orientation) {
    if (separationDefinition.spacing > 0 || separationDefinition.lineThickness > 0) {
        var separator = document.createElement("div");
        separator.className = hostConfig.makeCssClassName("ac-" + (orientation == Enums.Orientation.Horizontal ? "horizontal" : "vertical") + "-separator");
        if (orientation == Enums.Orientation.Horizontal) {
            if (separationDefinition.lineThickness) {
                separator.style.paddingTop = (separationDefinition.spacing / 2) + "px";
                separator.style.marginBottom = (separationDefinition.spacing / 2) + "px";
                separator.style.borderBottom = separationDefinition.lineThickness + "px solid " + stringToCssColor(separationDefinition.lineColor);
            }
            else {
                separator.style.height = separationDefinition.spacing + "px";
            }
        }
        else {
            if (separationDefinition.lineThickness) {
                separator.style.paddingLeft = (separationDefinition.spacing / 2) + "px";
                separator.style.marginRight = (separationDefinition.spacing / 2) + "px";
                separator.style.borderRight = separationDefinition.lineThickness + "px solid " + stringToCssColor(separationDefinition.lineColor);
            }
            else {
                separator.style.width = separationDefinition.spacing + "px";
            }
        }
        separator.style.overflow = "hidden";
        return separator;
    }
    else {
        return null;
    }
}
exports.renderSeparation = renderSeparation;
function stringToCssColor(color) {
    var regEx = /#([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?/gi;
    var matches = regEx.exec(color);
    if (matches && matches[4]) {
        var a = parseInt(matches[1], 16) / 255;
        var r = parseInt(matches[2], 16);
        var g = parseInt(matches[3], 16);
        var b = parseInt(matches[4], 16);
        return "rgba(" + r + "," + g + "," + b + "," + a + ")";
    }
    else {
        return color;
    }
}
exports.stringToCssColor = stringToCssColor;
function truncate(element, maxHeight, lineHeight) {
    var fits = function () {
        // Allow a one pixel overflow to account for rounding differences
        // between browsers
        return maxHeight - element.scrollHeight >= -1.0;
    };
    if (fits())
        return;
    var fullText = element.innerHTML;
    var truncateAt = function (idx) {
        element.innerHTML = fullText.substring(0, idx) + '...';
    };
    var breakableIndices = findBreakableIndices(fullText);
    var lo = 0;
    var hi = breakableIndices.length;
    var bestBreakIdx = 0;
    // Do a binary search for the longest string that fits
    while (lo < hi) {
        var mid = Math.floor((lo + hi) / 2);
        truncateAt(breakableIndices[mid]);
        if (fits()) {
            bestBreakIdx = breakableIndices[mid];
            lo = mid + 1;
        }
        else {
            hi = mid;
        }
    }
    truncateAt(bestBreakIdx);
    // If we have extra room, try to expand the string letter by letter
    // (covers the case where we have to break in the middle of a long word)
    if (lineHeight && maxHeight - element.scrollHeight >= lineHeight - 1.0) {
        var idx = findNextCharacter(fullText, bestBreakIdx);
        while (idx < fullText.length) {
            truncateAt(idx);
            if (fits()) {
                bestBreakIdx = idx;
                idx = findNextCharacter(fullText, idx);
            }
            else {
                break;
            }
        }
        truncateAt(bestBreakIdx);
    }
}
exports.truncate = truncate;
function findBreakableIndices(html) {
    var results = [];
    var idx = findNextCharacter(html, -1);
    while (idx < html.length) {
        if (html[idx] == ' ') {
            results.push(idx);
        }
        idx = findNextCharacter(html, idx);
    }
    return results;
}
function findNextCharacter(html, currIdx) {
    currIdx += 1;
    // If we found the start of an HTML tag, keep advancing until we get
    // past it, so we don't end up truncating in the middle of the tag
    while (currIdx < html.length && html[currIdx] == '<') {
        while (currIdx < html.length && html[currIdx++] != '>')
            ;
    }
    return currIdx;
}
function getFitStatus(element, containerEnd) {
    var start = element.offsetTop;
    var end = start + element.clientHeight;
    if (end <= containerEnd) {
        return Enums.ContainerFitStatus.FullyInContainer;
    }
    else if (start < containerEnd) {
        return Enums.ContainerFitStatus.Overflowing;
    }
    else {
        return Enums.ContainerFitStatus.FullyOutOfContainer;
    }
}
exports.getFitStatus = getFitStatus;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/clipboard/dist/clipboard.js":
/*!**************************************************!*\
  !*** ./node_modules/clipboard/dist/clipboard.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * clipboard.js v2.0.1
 * https://zenorocha.github.io/clipboard.js
 * 
 * Licensed MIT © Zeno Rocha
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(7)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else { var mod; }
})(this, function (module, _select) {
    'use strict';

    var _select2 = _interopRequireDefault(_select);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    var ClipboardAction = function () {
        /**
         * @param {Object} options
         */
        function ClipboardAction(options) {
            _classCallCheck(this, ClipboardAction);

            this.resolveOptions(options);
            this.initSelection();
        }

        /**
         * Defines base properties passed from constructor.
         * @param {Object} options
         */


        _createClass(ClipboardAction, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                this.action = options.action;
                this.container = options.container;
                this.emitter = options.emitter;
                this.target = options.target;
                this.text = options.text;
                this.trigger = options.trigger;

                this.selectedText = '';
            }
        }, {
            key: 'initSelection',
            value: function initSelection() {
                if (this.text) {
                    this.selectFake();
                } else if (this.target) {
                    this.selectTarget();
                }
            }
        }, {
            key: 'selectFake',
            value: function selectFake() {
                var _this = this;

                var isRTL = document.documentElement.getAttribute('dir') == 'rtl';

                this.removeFake();

                this.fakeHandlerCallback = function () {
                    return _this.removeFake();
                };
                this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;

                this.fakeElem = document.createElement('textarea');
                // Prevent zooming on iOS
                this.fakeElem.style.fontSize = '12pt';
                // Reset box model
                this.fakeElem.style.border = '0';
                this.fakeElem.style.padding = '0';
                this.fakeElem.style.margin = '0';
                // Move element out of screen horizontally
                this.fakeElem.style.position = 'absolute';
                this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
                // Move element to the same position vertically
                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                this.fakeElem.style.top = yPosition + 'px';

                this.fakeElem.setAttribute('readonly', '');
                this.fakeElem.value = this.text;

                this.container.appendChild(this.fakeElem);

                this.selectedText = (0, _select2.default)(this.fakeElem);
                this.copyText();
            }
        }, {
            key: 'removeFake',
            value: function removeFake() {
                if (this.fakeHandler) {
                    this.container.removeEventListener('click', this.fakeHandlerCallback);
                    this.fakeHandler = null;
                    this.fakeHandlerCallback = null;
                }

                if (this.fakeElem) {
                    this.container.removeChild(this.fakeElem);
                    this.fakeElem = null;
                }
            }
        }, {
            key: 'selectTarget',
            value: function selectTarget() {
                this.selectedText = (0, _select2.default)(this.target);
                this.copyText();
            }
        }, {
            key: 'copyText',
            value: function copyText() {
                var succeeded = void 0;

                try {
                    succeeded = document.execCommand(this.action);
                } catch (err) {
                    succeeded = false;
                }

                this.handleResult(succeeded);
            }
        }, {
            key: 'handleResult',
            value: function handleResult(succeeded) {
                this.emitter.emit(succeeded ? 'success' : 'error', {
                    action: this.action,
                    text: this.selectedText,
                    trigger: this.trigger,
                    clearSelection: this.clearSelection.bind(this)
                });
            }
        }, {
            key: 'clearSelection',
            value: function clearSelection() {
                if (this.trigger) {
                    this.trigger.focus();
                }

                window.getSelection().removeAllRanges();
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.removeFake();
            }
        }, {
            key: 'action',
            set: function set() {
                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';

                this._action = action;

                if (this._action !== 'copy' && this._action !== 'cut') {
                    throw new Error('Invalid "action" value, use either "copy" or "cut"');
                }
            },
            get: function get() {
                return this._action;
            }
        }, {
            key: 'target',
            set: function set(target) {
                if (target !== undefined) {
                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
                        if (this.action === 'copy' && target.hasAttribute('disabled')) {
                            throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                        }

                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                            throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                        }

                        this._target = target;
                    } else {
                        throw new Error('Invalid "target" value, use a valid Element');
                    }
                }
            },
            get: function get() {
                return this._target;
            }
        }]);

        return ClipboardAction;
    }();

    module.exports = ClipboardAction;
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var is = __webpack_require__(6);
var delegate = __webpack_require__(5);

/**
 * Validates all params and calls the right
 * listener function based on its target type.
 *
 * @param {String|HTMLElement|HTMLCollection|NodeList} target
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listen(target, type, callback) {
    if (!target && !type && !callback) {
        throw new Error('Missing required arguments');
    }

    if (!is.string(type)) {
        throw new TypeError('Second argument must be a String');
    }

    if (!is.fn(callback)) {
        throw new TypeError('Third argument must be a Function');
    }

    if (is.node(target)) {
        return listenNode(target, type, callback);
    }
    else if (is.nodeList(target)) {
        return listenNodeList(target, type, callback);
    }
    else if (is.string(target)) {
        return listenSelector(target, type, callback);
    }
    else {
        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
    }
}

/**
 * Adds an event listener to a HTML element
 * and returns a remove listener function.
 *
 * @param {HTMLElement} node
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNode(node, type, callback) {
    node.addEventListener(type, callback);

    return {
        destroy: function() {
            node.removeEventListener(type, callback);
        }
    }
}

/**
 * Add an event listener to a list of HTML elements
 * and returns a remove listener function.
 *
 * @param {NodeList|HTMLCollection} nodeList
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenNodeList(nodeList, type, callback) {
    Array.prototype.forEach.call(nodeList, function(node) {
        node.addEventListener(type, callback);
    });

    return {
        destroy: function() {
            Array.prototype.forEach.call(nodeList, function(node) {
                node.removeEventListener(type, callback);
            });
        }
    }
}

/**
 * Add an event listener to a selector
 * and returns a remove listener function.
 *
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Object}
 */
function listenSelector(selector, type, callback) {
    return delegate(document.body, selector, type, callback);
}

module.exports = listen;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(0), __webpack_require__(2), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else { var mod; }
})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {
    'use strict';

    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);

    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);

    var _goodListener2 = _interopRequireDefault(_goodListener);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
        return typeof obj;
    } : function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    var _createClass = function () {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }

        return function (Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function _possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var Clipboard = function (_Emitter) {
        _inherits(Clipboard, _Emitter);

        /**
         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
         * @param {Object} options
         */
        function Clipboard(trigger, options) {
            _classCallCheck(this, Clipboard);

            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));

            _this.resolveOptions(options);
            _this.listenClick(trigger);
            return _this;
        }

        /**
         * Defines if attributes would be resolved using internal setter functions
         * or custom functions that were passed in the constructor.
         * @param {Object} options
         */


        _createClass(Clipboard, [{
            key: 'resolveOptions',
            value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

                this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
                this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
                this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                this.container = _typeof(options.container) === 'object' ? options.container : document.body;
            }
        }, {
            key: 'listenClick',
            value: function listenClick(trigger) {
                var _this2 = this;

                this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
                    return _this2.onClick(e);
                });
            }
        }, {
            key: 'onClick',
            value: function onClick(e) {
                var trigger = e.delegateTarget || e.currentTarget;

                if (this.clipboardAction) {
                    this.clipboardAction = null;
                }

                this.clipboardAction = new _clipboardAction2.default({
                    action: this.action(trigger),
                    target: this.target(trigger),
                    text: this.text(trigger),
                    container: this.container,
                    trigger: trigger,
                    emitter: this
                });
            }
        }, {
            key: 'defaultAction',
            value: function defaultAction(trigger) {
                return getAttributeValue('action', trigger);
            }
        }, {
            key: 'defaultTarget',
            value: function defaultTarget(trigger) {
                var selector = getAttributeValue('target', trigger);

                if (selector) {
                    return document.querySelector(selector);
                }
            }
        }, {
            key: 'defaultText',
            value: function defaultText(trigger) {
                return getAttributeValue('text', trigger);
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                this.listener.destroy();

                if (this.clipboardAction) {
                    this.clipboardAction.destroy();
                    this.clipboardAction = null;
                }
            }
        }], [{
            key: 'isSupported',
            value: function isSupported() {
                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];

                var actions = typeof action === 'string' ? [action] : action;
                var support = !!document.queryCommandSupported;

                actions.forEach(function (action) {
                    support = support && !!document.queryCommandSupported(action);
                });

                return support;
            }
        }]);

        return Clipboard;
    }(_tinyEmitter2.default);

    /**
     * Helper function to retrieve attribute value.
     * @param {String} suffix
     * @param {Element} element
     */
    function getAttributeValue(suffix, element) {
        var attribute = 'data-clipboard-' + suffix;

        if (!element.hasAttribute(attribute)) {
            return;
        }

        return element.getAttribute(attribute);
    }

    module.exports = Clipboard;
});

/***/ }),
/* 4 */
/***/ (function(module, exports) {

var DOCUMENT_NODE_TYPE = 9;

/**
 * A polyfill for Element.matches()
 */
if (typeof Element !== 'undefined' && !Element.prototype.matches) {
    var proto = Element.prototype;

    proto.matches = proto.matchesSelector ||
                    proto.mozMatchesSelector ||
                    proto.msMatchesSelector ||
                    proto.oMatchesSelector ||
                    proto.webkitMatchesSelector;
}

/**
 * Finds the closest parent that matches a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @return {Function}
 */
function closest (element, selector) {
    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
        if (typeof element.matches === 'function' &&
            element.matches(selector)) {
          return element;
        }
        element = element.parentNode;
    }
}

module.exports = closest;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var closest = __webpack_require__(4);

/**
 * Delegates event to a selector.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function _delegate(element, selector, type, callback, useCapture) {
    var listenerFn = listener.apply(this, arguments);

    element.addEventListener(type, listenerFn, useCapture);

    return {
        destroy: function() {
            element.removeEventListener(type, listenerFn, useCapture);
        }
    }
}

/**
 * Delegates event to a selector.
 *
 * @param {Element|String|Array} [elements]
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @param {Boolean} useCapture
 * @return {Object}
 */
function delegate(elements, selector, type, callback, useCapture) {
    // Handle the regular Element usage
    if (typeof elements.addEventListener === 'function') {
        return _delegate.apply(null, arguments);
    }

    // Handle Element-less usage, it defaults to global delegation
    if (typeof type === 'function') {
        // Use `document` as the first parameter, then apply arguments
        // This is a short way to .unshift `arguments` without running into deoptimizations
        return _delegate.bind(null, document).apply(null, arguments);
    }

    // Handle Selector-based usage
    if (typeof elements === 'string') {
        elements = document.querySelectorAll(elements);
    }

    // Handle Array-like based usage
    return Array.prototype.map.call(elements, function (element) {
        return _delegate(element, selector, type, callback, useCapture);
    });
}

/**
 * Finds closest match and invokes callback.
 *
 * @param {Element} element
 * @param {String} selector
 * @param {String} type
 * @param {Function} callback
 * @return {Function}
 */
function listener(element, selector, type, callback) {
    return function(e) {
        e.delegateTarget = closest(e.target, selector);

        if (e.delegateTarget) {
            callback.call(element, e);
        }
    }
}

module.exports = delegate;


/***/ }),
/* 6 */
/***/ (function(module, exports) {

/**
 * Check if argument is a HTML element.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.node = function(value) {
    return value !== undefined
        && value instanceof HTMLElement
        && value.nodeType === 1;
};

/**
 * Check if argument is a list of HTML elements.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.nodeList = function(value) {
    var type = Object.prototype.toString.call(value);

    return value !== undefined
        && (type === '[object NodeList]' || type === '[object HTMLCollection]')
        && ('length' in value)
        && (value.length === 0 || exports.node(value[0]));
};

/**
 * Check if argument is a string.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.string = function(value) {
    return typeof value === 'string'
        || value instanceof String;
};

/**
 * Check if argument is a function.
 *
 * @param {Object} value
 * @return {Boolean}
 */
exports.fn = function(value) {
    var type = Object.prototype.toString.call(value);

    return type === '[object Function]';
};


/***/ }),
/* 7 */
/***/ (function(module, exports) {

function select(element) {
    var selectedText;

    if (element.nodeName === 'SELECT') {
        element.focus();

        selectedText = element.value;
    }
    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
        var isReadOnly = element.hasAttribute('readonly');

        if (!isReadOnly) {
            element.setAttribute('readonly', '');
        }

        element.select();
        element.setSelectionRange(0, element.value.length);

        if (!isReadOnly) {
            element.removeAttribute('readonly');
        }

        selectedText = element.value;
    }
    else {
        if (element.hasAttribute('contenteditable')) {
            element.focus();
        }

        var selection = window.getSelection();
        var range = document.createRange();

        range.selectNodeContents(element);
        selection.removeAllRanges();
        selection.addRange(range);

        selectedText = selection.toString();
    }

    return selectedText;
}

module.exports = select;


/***/ })
/******/ ]);
});

/***/ }),

/***/ "./src/adaptive-card-schema.ts":
/*!*************************************!*\
  !*** ./src/adaptive-card-schema.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
exports.adaptiveCardSchema = {
    "$schema": "http://json-schema.org/draft-06/schema#",
    "id": "http://adaptivecards.io/schemas/adaptive-card.json",
    "type": "object",
    "title": "Microsoft Adaptive Card Schema",
    "additionalProperties": true,
    "allOf": [
        {
            "$ref": "#/definitions/AdaptiveCard"
        }
    ],
    "properties": {
        "version": {
            "type": "string",
            "description": "version of schema that this card was authored "
        },
        "minVersion": {
            "type": "string",
            "description": "if a client doesn't support the minVersion the card should be rejected and return the fallbackText.  If it does, then the elements that are not supported are safe to ignore"
        },
        "fallbackText": {
            "type": "string",
            "description": "if a client is not able to show the card, show fallbackText to the user. This can be in markdown format. "
        },
        "speak": {
            "type": "string",
            "description": "Specifies what should be spoken for this entire Item. This is simple text or SSML fragment"
        }
    },
    "required": [
        "version"
    ],
    "definitions": {
        "Action": {
            "anyOf": [
                {
                    "$ref": "#/definitions/Action.Submit"
                },
                {
                    "$ref": "#/definitions/Action.ShowCard"
                },
                {
                    "$ref": "#/definitions/Action.OpenUrl"
                }
            ]
        },
        "Action.OpenUrl": {
            "additionalProperties": true,
            "description": "When Action.OpenUrl is invoked it will show the given url, either by launching it to an external web browser or showing in-situ with embedded web browser.",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Label for button or link that represents this action"
                },
                "type": {
                    "type": "string",
                    "description": "Must be Action.OpenUrl",
                    "enum": [
                        "Action.OpenUrl"
                    ]
                },
                "url": {
                    "type": "string",
                    "description": "The URL to open"
                }
            },
            "required": [
                "type",
                "url"
            ],
            "type": "object"
        },
        "Action.ShowCard": {
            "type": "object",
            "additionalProperties": true,
            "description": "Action.ShowCard defines an inline AdaptiveCard which is shown to the user when it is clicked.",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Must be Action.ShowCard",
                    "enum": [
                        "Action.ShowCard"
                    ]
                },
                "title": {
                    "type": "string",
                    "description": "Label for button or link that represents this action"
                },
                "card": {
                    "$ref": "#/definitions/AdaptiveCard"
                }
            },
            "required": [
                "type",
                "card"
            ]
        },
        "Action.Submit": {
            "type": "object",
            "additionalProperties": true,
            "description": "Submit action gathers up input fields, merges with optional data field and generates event to client asking for data to be submitted. It is up to the client to determine how that data is processed. For example: With BotFramework bots the client would send an activity through the messaging medium to the bot.",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Must be Action.Submit",
                    "enum": [
                        "Action.Submit"
                    ]
                },
                "title": {
                    "type": "string",
                    "description": "Label for button or link that represents this action"
                },
                "data": {
                    "type": ["string", "object"],
                    "description": "initial data that input fields will be combined with. This is essentially 'hidden' properties"
                }
            },
            "required": [
                "type"
            ]
        },
        "Actions": {
            "additionalItems": true,
            "items": {
                "$ref": "#/definitions/Action"
            },
            "type": "array"
        },
        "AdaptiveCard": {
            "additionalProperties": true,
            "type": "object",
            "description": "Card schema for an adaptive card",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Must be AdaptiveCard",
                    "enum": [
                        "AdaptiveCard"
                    ]
                },
                "actions": {
                    "description": "The Actions to show in the card's action bar",
                    "$ref": "#/definitions/Actions"
                },
                "body": {
                    "description": "The Card Elements to show in the primary card region",
                    "$ref": "#/definitions/CardElements"
                }
            },
            "required": [
                "type",
                "version"
            ]
        },
        "CardElement": {
            "additionalProperties": true,
            "properties": {
                "type": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "description": "A unique Id associated with the element"
                },
                "spacing": {
                    "$ref": "#/definitions/SpacingStyle"
                },
                "separator": {
                    "type": "boolean",
                    "description": "The Separator object type describes the look and feel of a separation line between two elements.",
                    "default": false
                }
            },
            "required": [
                "type"
            ]
        },
        "CardElements": {
            "type": "array",
            "additionalItems": true,
            "items": [
                {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/TextBlock"
                        },
                        {
                            "$ref": "#/definitions/Image"
                        },
                        {
                            "$ref": "#/definitions/Container"
                        },
                        {
                            "$ref": "#/definitions/ColumnSet"
                        },
                        {
                            "$ref": "#/definitions/FactSet"
                        },
                        {
                            "$ref": "#/definitions/ImageSet"
                        },
                        {
                            "$ref": "#/definitions/Input.Text"
                        },
                        {
                            "$ref": "#/definitions/Input.Number"
                        },
                        {
                            "$ref": "#/definitions/Input.Date"
                        },
                        {
                            "$ref": "#/definitions/Input.Time"
                        },
                        {
                            "$ref": "#/definitions/Input.Toggle"
                        },
                        {
                            "$ref": "#/definitions/Input.ChoiceSet"
                        }
                    ]
                }
            ]
        },
        "Input.Choice": {
            "type": "object",
            "description": "Describes a Choice input. The value should be a simple string without a \",\"",
            "additionalProperties": true,
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Input.Choice"
                    ]
                },
                "title": {
                    "type": "string",
                    "description": "The text for a choice"
                },
                "value": {
                    "type": "string",
                    "description": "The raw value for the choice. NOTE: do not use a \",\" in the value, since MultiSelect ChoiceSet returns a comma-delimited string of choice values"
                }
            },
            "required": [
                "title",
                "value"
            ]
        },
        "ChoiceInputStyle": {
            "type": "string",
            "description": "Style hint for Input.ChoiceSet",
            "enum": [
                "compact",
                "expanded"
            ]
        },
        "Column": {
            "additionalProperties": true,
            "type": "object",
            "description": "Defines a container that is part of a ColumnSet",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "items": {
                    "description": "The Card Elements to include in the Column",
                    "$ref": "#/definitions/CardElements"
                },
                "selectAction": {
                    "description": "An Action that will be invoked when the Column is tapped or selected",
                    "$ref": "#/definitions/Action"
                },
                "width": {
                    "type": [
                        "string",
                        "number"
                    ],
                    "description": "\"auto\", \"stretch\", or a number representing relative width of the column in the column group"
                },
                "type": {
                    "type": "string",
                    "description": "Must be Column",
                    "enum": [
                        "Column"
                    ]
                }
            },
            "required": [
                "items"
            ]
        },
        "ColumnSet": {
            "additionalProperties": true,
            "type": "object",
            "description": "ColumnSet divides a region into Column's allowing elements to sit side-by-side",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "columns": {
                    "type": "array",
                    "description": "The array of Columns to divide the region into",
                    "items": {
                        "$ref": "#/definitions/Column"
                    }
                },
                "selectAction": {
                    "$ref": "#/definitions/Action",
                    "description": "The Action that is executed when the ColumnSet is clicked/tapped"
                },
                "type": {
                    "type": "string",
                    "description": "Must be ColumnSet",
                    "enum": [
                        "ColumnSet"
                    ]
                }
            }
        },
        "Container": {
            "additionalProperties": true,
            "type": "object",
            "description": "Containers group items together",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "items": {
                    "description": "The Card Elements to render inside the Container",
                    "$ref": "#/definitions/CardElements"
                },
                "selectAction": {
                    "description": "An Action that will be invoked when the Image is tapped or selected",
                    "$ref": "#/definitions/Action"
                },
                "style": {
                    "type": "string",
                    "description": "Style hint for Container",
                    "enum": [
                        "default",
                        "emphasis"
                    ]
                },
                "type": {
                    "type": "string",
                    "description": "Must be Container",
                    "enum": [
                        "Container"
                    ]
                }
            },
            "required": [
                "items"
            ]
        },
        "Fact": {
            "additionalProperties": true,
            "type": "object",
            "description": "Describes a Fact in a FactSet as a key/value pair",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "Fact"
                    ]
                },
                "title": {
                    "type": "string",
                    "description": "The title of the fact"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the fact"
                }
            },
            "required": [
                "title",
                "value"
            ]
        },
        "FactSet": {
            "additionalProperties": true,
            "type": "object",
            "description": "The FactSet Item makes it simple to display a series of facts (e.g. name/value pairs) in a tabular form.",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "facts": {
                    "type": "array",
                    "description": "The array of Facts",
                    "items": {
                        "$ref": "#/definitions/Fact"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Must be FactSet",
                    "enum": [
                        "FactSet"
                    ]
                }
            },
            "required": [
                "facts"
            ]
        },
        "HorizontalAlignment": {
            "type": "string",
            "description": "Controls how Items are horizontally positioned within their container.",
            "enum": [
                "left",
                "center",
                "right"
            ]
        },
        "Image": {
            "additionalProperties": true,
            "type": "object",
            "description": "The Image Item allows for the inclusion of images in an Adaptive Card.",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "altText": {
                    "type": "string",
                    "description": "Alternate text for the image for accessibility"
                },
                "horizontalAlignment": {
                    "$ref": "#/definitions/HorizontalAlignment"
                },
                "selectAction": {
                    "description": "An Action that will be invoked when the Image is tapped or selected",
                    "$ref": "#/definitions/Action"
                },
                "size": {
                    "type": "object",
                    "$ref": "#/definitions/ImageSize"
                },
                "style": {
                    "$ref": "#/definitions/ImageStyle"
                },
                "type": {
                    "type": "string",
                    "description": "Must be Image",
                    "enum": [
                        "Image"
                    ]
                },
                "url": {
                    "type": "string",
                    "description": "The URL to the image."
                }
            },
            "required": [
                "url"
            ]
        },
        "ImageSet": {
            "additionalProperties": true,
            "type": "object",
            "description": "The ImageSet allows for the inclusion of a collection images like a photogallery.",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "images": {
                    "type": "array",
                    "description": "The array of Image elements to show",
                    "items": {
                        "$ref": "#/definitions/Image"
                    }
                },
                "imageSize": {
                    "$ref": "#/definitions/ImageSize"
                },
                "type": {
                    "type": "string",
                    "description": "Must be ImageSet",
                    "enum": [
                        "ImageSet"
                    ]
                }
            },
            "required": [
                "images"
            ]
        },
        "ImageSize": {
            "type": "string",
            "description": "Controls the approximate size of the image. The physical dimensions will vary per host. Specify \"auto\" for true image dimension or \"stretch\" to force it to fill the container",
            "default": "auto",
            "enum": [
                "auto",
                "stretch",
                "small",
                "medium",
                "large"
            ]
        },
        "ImageStyle": {
            "type": "string",
            "description": "Controls the way Images are displayed",
            "enum": [
                "default",
                "person"
            ]
        },
        "Input.ChoiceSet": {
            "additionalProperties": true,
            "type": "object",
            "description": "Shows an array of Choice objects",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "choices": {
                    "type": "array",
                    "description": "the choice options",
                    "items": {
                        "$ref": "#/definitions/Input.Choice"
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
                },
                "isMultiSelect": {
                    "type": "boolean",
                    "description": "allow multiple choices to be selected",
                    "default": false
                },
                "style": {
                    "$ref": "#/definitions/ChoiceInputStyle"
                },
                "type": {
                    "description": "Must be Input.ChoiceInput",
                    "enum": [
                        "Input.ChoiceSet"
                    ],
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "The initial choice (or set of choices) that should be selected. For multi-select, specifcy a comma-separated string of values"
                }
            },
            "required": [
                "id",
                "choices"
            ]
        },
        "Input.Date": {
            "additionalProperties": true,
            "type": "object",
            "description": "Input.Date collects Date from the user,",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
                },
                "max": {
                    "type": "string",
                    "description": "hint of maximum value expressed in ISO-8601 format (may be ignored by some clients)"
                },
                "min": {
                    "type": "string",
                    "description": "hint of minimum value expressed in ISO-8601 format (may be ignored by some clients)"
                },
                "placeholder": {
                    "type": "string",
                    "description": "Title Description of the input desired"
                },
                "type": {
                    "type": "string",
                    "description": "The type must be Input.Date",
                    "enum": [
                        "Input.Date"
                    ]
                },
                "value": {
                    "type": "string",
                    "description": "The initial value for a field expressed in ISO-8601 format"
                }
            },
            "required": [
                "id"
            ]
        },
        "Input.Number": {
            "additionalProperties": true,
            "type": "object",
            "description": "Input.Number collects number from the user,",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
                },
                "max": {
                    "type": "number",
                    "description": "hint of maximum value (may be ignored by some clients)"
                },
                "min": {
                    "type": "number",
                    "description": "hint of minimum value (may be ignored by some clients)"
                },
                "placeholder": {
                    "type": "string",
                    "description": "Title Description of the input desired"
                },
                "type": {
                    "type": "string",
                    "description": "The type must be Input.Number",
                    "enum": [
                        "Input.Number"
                    ]
                },
                "value": {
                    "type": "number",
                    "description": "The initial value for a field"
                }
            },
            "required": [
                "id"
            ]
        },
        "Input.Text": {
            "additionalProperties": true,
            "type": "object",
            "description": "Input.Text collects text from the user,",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
                },
                "isMultiline": {
                    "type": "boolean",
                    "description": "Do you want to allow multiple lines of input"
                },
                "maxLength": {
                    "type": "number",
                    "description": "hint of maximum length characters to collect (may be ignored by some clients)"
                },
                "placeholder": {
                    "type": "string",
                    "description": "Title Description of the input desired"
                },
                "style": {
                    "$ref": "#/definitions/TextInputStyle"
                },
                "type": {
                    "type": "string",
                    "description": "Input.Text",
                    "enum": [
                        "Input.Text"
                    ]
                },
                "value": {
                    "type": "string",
                    "description": "The initial value for a field"
                }
            },
            "required": [
                "id"
            ]
        },
        "Input.Time": {
            "additionalProperties": true,
            "type": "object",
            "description": "Input.Time collects Time from the user,",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
                },
                "max": {
                    "type": "string",
                    "description": "hint of maximum value (may be ignored by some clients)"
                },
                "min": {
                    "type": "string",
                    "description": "hint of minimum value (may be ignored by some clients)"
                },
                "placeholder": {
                    "type": "string",
                    "description": "Title Description of the input desired"
                },
                "type": {
                    "type": "string",
                    "description": "The type must be Input.Time",
                    "enum": [
                        "Input.Time"
                    ]
                },
                "value": {
                    "type": "string",
                    "description": "The initial value for a field expressed in ISO-8601 format"
                }
            },
            "required": [
                "id"
            ]
        },
        "Input.Toggle": {
            "additionalProperties": true,
            "type": "object",
            "description": "Input.Toggle collects a true/false response from the user",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Id for the value (will be used to identify collected input when SUBMIT is clicked)"
                },
                "title": {
                    "type": "string",
                    "description": "Title for the toggle"
                },
                "type": {
                    "type": "string",
                    "description": "Input.Toggle",
                    "enum": [
                        "Input.Toggle"
                    ]
                },
                "value": {
                    "type": "string",
                    "description": "The current selected value (default:false)"
                },
                "valueOff": {
                    "type": "string",
                    "description": "The value when toggle is off (default:false)"
                },
                "valueOn": {
                    "type": "string",
                    "description": "The value when toggle is on (default:true)"
                }
            },
            "required": [
                "id",
                "title"
            ]
        },
        "TextBlock": {
            "additionalProperties": true,
            "type": "object",
            "description": "The TextBlock Item allows for the inclusion of text, with various font sizes, weight and color, in Adaptive Cards.",
            "allOf": [
                {
                    "$ref": "#/definitions/CardElement"
                }
            ],
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Controls the color of TextBlock Items.",
                    "enum": [
                        "default",
                        "dark",
                        "light",
                        "accent",
                        "good",
                        "warning",
                        "attention"
                    ]
                },
                "horizontalAlignment": {
                    "$ref": "#/definitions/HorizontalAlignment"
                },
                "isSubtle": {
                    "type": "boolean",
                    "description": "Indicates whether the color of the text should be slightly toned down to appear less prominent"
                },
                "maxLines": {
                    "type": "number",
                    "description": "When Wrap is true, you can specify the maximum number of lines to allow the textBlock to use."
                },
                "size": {
                    "type": "string",
                    "description": "controls size of the text.",
                    "enum": [
                        "small",
                        "default",
                        "medium",
                        "large",
                        "extraLarge"
                    ]
                },
                "text": {
                    "type": "string",
                    "description": "The actual text to display"
                },
                "type": {
                    "type": "string",
                    "description": "Must be TextBlock",
                    "enum": [
                        "TextBlock"
                    ]
                },
                "weight": {
                    "type": "string",
                    "description": "Controls the weight of TextBlock Items",
                    "enum": [
                        "lighter",
                        "default",
                        "bolder"
                    ]
                },
                "wrap": {
                    "type": "boolean",
                    "description": "True if be is allowed to wrap"
                }
            },
            "required": [
                "text"
            ]
        },
        "SeparatorStyle": {
            "type": "object",
            "description": "Indicates whether there should be a visible separator (e.g. a line) between the element and the one before it. If this property is not specified, no separator is displayed. If it is, a separator line is displayed. A separator will only appear if there was a preceding element.",
            "properties": {
                "thickness": {
                    "type": "string",
                    "description": "Specifies the thickness of the separation line.",
                    "enum": [
                        "default",
                        "thick"
                    ]
                },
                "color": {
                    "type": "string",
                    "description": "Specifies the color of the separation line.",
                    "enum": [
                        "default",
                        "accent"
                    ]
                }
            }
        },
        "SpacingStyle": {
            "type": "string",
            "description": "Controls the amount of spacing between this element and the previous element.",
            "enum": [
                "none",
                "small",
                "default",
                "medium",
                "large",
                "extraLarge",
                "padding"
            ]
        },
        "TextInputStyle": {
            "type": "string",
            "description": "Style hint for Input.Text.",
            "enum": [
                "text",
                "tel",
                "url",
                "email"
            ]
        }
    }
};


/***/ }),

/***/ "./src/adaptivecards-designer-standalone.ts":
/*!**************************************************!*\
  !*** ./src/adaptivecards-designer-standalone.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
__export(__webpack_require__(/*! ./strings */ "./src/strings.ts"));
__export(__webpack_require__(/*! ./shared */ "./src/shared.ts"));
__export(__webpack_require__(/*! ./containers/host-container */ "./src/containers/host-container.ts"));
__export(__webpack_require__(/*! ./containers/default/default-container */ "./src/containers/default/default-container.ts"));
__export(__webpack_require__(/*! ./card-designer-surface */ "./src/card-designer-surface.ts"));
__export(__webpack_require__(/*! ./card-designer */ "./src/card-designer.ts"));
__export(__webpack_require__(/*! ./constants */ "./src/constants.ts"));
__export(__webpack_require__(/*! ./draggable-element */ "./src/draggable-element.ts"));
__export(__webpack_require__(/*! ./designer-peers */ "./src/designer-peers.ts"));
__export(__webpack_require__(/*! ./peer-command */ "./src/peer-command.ts"));
__export(__webpack_require__(/*! ./miscellaneous */ "./src/miscellaneous.ts"));
__export(__webpack_require__(/*! ./settings-manager */ "./src/settings-manager.ts"));
__export(__webpack_require__(/*! ./side-panel */ "./src/side-panel.ts"));
__export(__webpack_require__(/*! ./tool-box */ "./src/tool-box.ts"));
__export(__webpack_require__(/*! ./toolbar */ "./src/toolbar.ts"));
__export(__webpack_require__(/*! ./tool-palette */ "./src/tool-palette.ts"));
__export(__webpack_require__(/*! ./splitter */ "./src/splitter.ts"));
__export(__webpack_require__(/*! ./base-tree-item */ "./src/base-tree-item.ts"));
__export(__webpack_require__(/*! ./designer-peer-treeitem */ "./src/designer-peer-treeitem.ts"));
__export(__webpack_require__(/*! ./data */ "./src/data.ts"));
__export(__webpack_require__(/*! ./catalogue */ "./src/catalogue.ts"));
__export(__webpack_require__(/*! ./containers/host-container */ "./src/containers/host-container.ts"));
__export(__webpack_require__(/*! ./containers/default/default-container */ "./src/containers/default/default-container.ts"));


/***/ }),

/***/ "./src/adaptivecards-designer.ts":
/*!***************************************!*\
  !*** ./src/adaptivecards-designer.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var containers = __webpack_require__(/*! ./containers */ "./src/containers/index.ts");
__export(__webpack_require__(/*! ./adaptivecards-designer-standalone */ "./src/adaptivecards-designer-standalone.ts"));
__export(__webpack_require__(/*! ./containers/index */ "./src/containers/index.ts"));
exports.defaultMicrosoftHosts = [
    new containers.WebChatContainer("Bot Framework WebChat", "containers/webchat-container.css"),
    new containers.OutlookContainer("Outlook Actionable Messages", "containers/outlook-container.css"),
    new containers.DarkTeamsContainer("Microsoft Teams - Dark", "containers/teams-container-dark.css"),
    new containers.LightTeamsContainer("Microsoft Teams - Light", "containers/teams-container-light.css"),
    new containers.DarkCortanaContainer("Cortana Skills - Dark", "containers/cortana-container-dark.css"),
    new containers.LightCortanaContainer("Cortana Skills - Light", "containers/cortana-container-light.css"),
    new containers.TimelineContainer("Windows Timeline", "containers/timeline-container.css"),
    new containers.BotFrameworkContainer("Bot Framework Other Channels (Image render)", "containers/bf-image-container.css"),
    new containers.CortanaClassicContainer("Cortana Skills (Classic)", "containers/cortana-classic-container.css"),
    new containers.ToastContainer("Windows Notifications (Preview)", "containers/toast-container.css"),
];


/***/ }),

/***/ "./src/base-tree-item.ts":
/*!*******************************!*\
  !*** ./src/base-tree-item.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var draggable_element_1 = __webpack_require__(/*! ./draggable-element */ "./src/draggable-element.ts");
var BaseTreeItem = /** @class */ (function (_super) {
    __extends(BaseTreeItem, _super);
    function BaseTreeItem() {
        var _this = _super.call(this) || this;
        _this._isExpanded = true;
        _this._isSelected = false;
        _this._level = 0;
        return _this;
    }
    BaseTreeItem.prototype.click = function (e) {
        _super.prototype.click.call(this, e);
        this.selected();
    };
    BaseTreeItem.prototype.getIconClass = function () {
        return null;
    };
    BaseTreeItem.prototype.getAdditionalText = function () {
        return null;
    };
    BaseTreeItem.prototype.getAdditionalTextClass = function () {
        return "acd-tree-item-additionalText";
    };
    BaseTreeItem.prototype.getIndentationLevelIncrement = function () {
        return 8;
    };
    BaseTreeItem.prototype.getDragSourceElement = function () {
        return this._treeItemElement;
    };
    BaseTreeItem.prototype.selected = function () {
        // Do nothing in base implementation
    };
    BaseTreeItem.prototype.internalRender = function () {
        var _this = this;
        var rootElement = document.createElement("div");
        this._treeItemElement = document.createElement("div");
        this._treeItemElement.classList.add("acd-tree-item");
        this._treeItemElement.style.display = "flex";
        this._treeItemElement.style.alignItems = "center";
        this._treeItemElement.style.paddingLeft = this.getIndentationLevelIncrement() * (1 + this.level) + "px";
        this._expandCollapseElement = document.createElement("div");
        this._expandCollapseElement.classList.add("acd-tree-item-expandCollapseButton");
        this._expandCollapseElement.style.flex = "0 0 auto";
        this._expandCollapseElement.style.visibility = this.getChildCount() > 0 ? "visible" : "hidden";
        this._expandCollapseElement.onclick = function (e) {
            _this._isExpanded = !_this._isExpanded;
            _this.updateLayout();
            e.cancelBubble = true;
            e.preventDefault();
        };
        this._treeItemElement.appendChild(this._expandCollapseElement);
        var textElement = document.createElement("div");
        textElement.classList.add("acd-tree-item-text");
        textElement.style.flex = "1 1 auto";
        textElement.style.display = "flex";
        textElement.style.alignItems = "center";
        textElement.style.whiteSpace = "nowrap";
        textElement.style.textOverflow = "ellipsis";
        textElement.style.overflow = "hidden";
        if (this.getIconClass()) {
            var iconElement = document.createElement("div");
            iconElement.classList.add("acd-icon", "acd-treeView-icon", this.getIconClass());
            textElement.appendChild(iconElement);
        }
        var labelSpan = document.createElement("span");
        labelSpan.classList.add("acd-tree-item-typeName");
        labelSpan.innerText = this.getLabelText();
        textElement.appendChild(labelSpan);
        var text = this.getAdditionalText();
        if (text && text != "") {
            var additionalTextSpan = document.createElement("span");
            additionalTextSpan.classList.add(this.getAdditionalTextClass());
            additionalTextSpan.innerText = " [" + text + "]";
            textElement.appendChild(additionalTextSpan);
        }
        this._treeItemElement.appendChild(textElement);
        rootElement.appendChild(this._treeItemElement);
        this._childContainerElement = document.createElement("div");
        for (var i = 0; i < this.getChildCount(); i++) {
            var renderedChildItem = this.getChildAt(i).render();
            this._childContainerElement.appendChild(renderedChildItem);
        }
        rootElement.appendChild(this._childContainerElement);
        this.updateLayout();
        return rootElement;
    };
    BaseTreeItem.prototype.updateLayout = function () {
        if (this._isExpanded) {
            this._childContainerElement.classList.remove("acd-hidden");
            this._expandCollapseElement.classList.remove(BaseTreeItem.collapsedIconClass);
            this._expandCollapseElement.classList.add(BaseTreeItem.expandedIconClass);
        }
        else {
            this._childContainerElement.classList.add("acd-hidden");
            this._expandCollapseElement.classList.add(BaseTreeItem.collapsedIconClass);
            this._expandCollapseElement.classList.remove(BaseTreeItem.expandedIconClass);
        }
    };
    BaseTreeItem.prototype.expand = function () {
        this._isExpanded = true;
        this.updateLayout();
    };
    BaseTreeItem.prototype.isDraggable = function () {
        return false;
    };
    Object.defineProperty(BaseTreeItem.prototype, "level", {
        get: function () {
            return this._level;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseTreeItem.prototype, "isSelected", {
        get: function () {
            return this._isSelected;
        },
        set: function (value) {
            this._isSelected = value;
            if (this._isSelected) {
                this._treeItemElement.classList.add("selected");
            }
            else {
                this._treeItemElement.classList.remove("selected");
            }
        },
        enumerable: true,
        configurable: true
    });
    BaseTreeItem.collapsedIconClass = "acd-icon-chevronRight";
    BaseTreeItem.expandedIconClass = "acd-icon-chevronDown";
    return BaseTreeItem;
}(draggable_element_1.DraggableElement));
exports.BaseTreeItem = BaseTreeItem;


/***/ }),

/***/ "./src/card-designer-surface.ts":
/*!**************************************!*\
  !*** ./src/card-designer-surface.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var Controls = __webpack_require__(/*! adaptivecards-controls */ "../adaptivecards-controls/lib/adaptivecards-controls.js");
var draggable_element_1 = __webpack_require__(/*! ./draggable-element */ "./src/draggable-element.ts");
var DesignerPeers = __webpack_require__(/*! ./designer-peers */ "./src/designer-peers.ts");
var ACData = __webpack_require__(/*! adaptivecards-templating */ "../adaptivecards-templating/lib/adaptivecards-templating.js");
var Shared = __webpack_require__(/*! ./shared */ "./src/shared.ts");
var DesignerPeerCategory = /** @class */ (function () {
    function DesignerPeerCategory() {
    }
    DesignerPeerCategory.Unknown = "Unknown";
    DesignerPeerCategory.Containers = "Containers";
    DesignerPeerCategory.Elements = "Elements";
    DesignerPeerCategory.Inputs = "Inputs";
    DesignerPeerCategory.Actions = "Actions";
    return DesignerPeerCategory;
}());
var DesignerPeerRegistry = /** @class */ (function () {
    function DesignerPeerRegistry() {
        this._items = [];
        this.defaultRegistration = new DesignerPeers.DesignerPeerRegistrationBase(DesignerPeerCategory.Unknown, "acd-icon-unknownPeer");
        this.reset();
    }
    DesignerPeerRegistry.prototype.clear = function () {
        this._items = [];
    };
    DesignerPeerRegistry.prototype.findTypeRegistration = function (sourceType) {
        for (var i = 0; i < this._items.length; i++) {
            if (this._items[i].sourceType === sourceType) {
                return this._items[i];
            }
        }
        return null;
    };
    DesignerPeerRegistry.prototype.registerPeer = function (sourceType, peerType, category, iconClass) {
        if (iconClass === void 0) { iconClass = null; }
        var registrationInfo = this.findTypeRegistration(sourceType);
        if (registrationInfo != null) {
            registrationInfo.peerType = peerType;
        }
        else {
            registrationInfo = new DesignerPeers.DesignerPeerRegistration(sourceType, peerType, category, iconClass);
            this._items.push(registrationInfo);
        }
    };
    DesignerPeerRegistry.prototype.unregisterPeer = function (sourceType) {
        for (var i = 0; i < this._items.length; i++) {
            if (this._items[i].sourceType === sourceType) {
                this._items.splice(i, 1);
                return;
            }
        }
    };
    return DesignerPeerRegistry;
}());
exports.DesignerPeerRegistry = DesignerPeerRegistry;
var CardElementPeerRegistry = /** @class */ (function (_super) {
    __extends(CardElementPeerRegistry, _super);
    function CardElementPeerRegistry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardElementPeerRegistry.prototype.reset = function () {
        this.clear();
        this.registerPeer(Adaptive.AdaptiveCard, DesignerPeers.AdaptiveCardPeer, DesignerPeerCategory.Containers, "acd-icon-adaptiveCard");
        this.registerPeer(Adaptive.Container, DesignerPeers.ContainerPeer, DesignerPeerCategory.Containers, "acd-icon-container");
        this.registerPeer(Adaptive.ColumnSet, DesignerPeers.ColumnSetPeer, DesignerPeerCategory.Containers, "acd-icon-columnSet");
        this.registerPeer(Adaptive.Column, DesignerPeers.ColumnPeer, DesignerPeerCategory.Containers, "acd-icon-column");
        this.registerPeer(Adaptive.ImageSet, DesignerPeers.ImageSetPeer, DesignerPeerCategory.Containers, "acd-icon-imageSet");
        this.registerPeer(Adaptive.FactSet, DesignerPeers.FactSetPeer, DesignerPeerCategory.Containers, "acd-icon-factSet");
        this.registerPeer(Adaptive.TextBlock, DesignerPeers.TextBlockPeer, DesignerPeerCategory.Elements, "acd-icon-textBlock");
        this.registerPeer(Adaptive.RichTextBlock, DesignerPeers.RichTextBlockPeer, DesignerPeerCategory.Elements, "acd-icon-richTextBlock");
        this.registerPeer(Adaptive.Image, DesignerPeers.ImagePeer, DesignerPeerCategory.Elements, "acd-icon-image");
        this.registerPeer(Adaptive.Media, DesignerPeers.MediaPeer, DesignerPeerCategory.Elements, "acd-icon-media");
        this.registerPeer(Adaptive.ActionSet, DesignerPeers.ActionSetPeer, DesignerPeerCategory.Elements, "acd-icon-actionSet");
        this.registerPeer(Adaptive.TextInput, DesignerPeers.TextInputPeer, DesignerPeerCategory.Inputs, "acd-icon-inputText");
        this.registerPeer(Adaptive.DateInput, DesignerPeers.DateInputPeer, DesignerPeerCategory.Inputs, "acd-icon-inputDate");
        this.registerPeer(Adaptive.TimeInput, DesignerPeers.TimeInputPeer, DesignerPeerCategory.Inputs, "acd-icon-inputTime");
        this.registerPeer(Adaptive.ToggleInput, DesignerPeers.ToggleInputPeer, DesignerPeerCategory.Inputs, "acd-icon-inputToggle");
        this.registerPeer(Adaptive.NumberInput, DesignerPeers.NumberInputPeer, DesignerPeerCategory.Inputs, "acd-icon-inputNumber");
        this.registerPeer(Adaptive.ChoiceSetInput, DesignerPeers.ChoiceSetInputPeer, DesignerPeerCategory.Inputs, "acd-icon-inputChoiceSet");
    };
    CardElementPeerRegistry.prototype.createPeerInstance = function (designerSurface, parent, cardElement) {
        var registrationInfo = this.findTypeRegistration(cardElement.constructor);
        var peer = registrationInfo ? new registrationInfo.peerType(parent, designerSurface, registrationInfo, cardElement) : new DesignerPeers.CardElementPeer(parent, designerSurface, this.defaultRegistration, cardElement);
        return peer;
    };
    return CardElementPeerRegistry;
}(DesignerPeerRegistry));
exports.CardElementPeerRegistry = CardElementPeerRegistry;
var ActionPeerRegistry = /** @class */ (function (_super) {
    __extends(ActionPeerRegistry, _super);
    function ActionPeerRegistry() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ActionPeerRegistry.prototype.reset = function () {
        this.clear();
        this.registerPeer(Adaptive.HttpAction, DesignerPeers.HttpActionPeer, DesignerPeerCategory.Actions, "acd-icon-actionHttp");
        this.registerPeer(Adaptive.SubmitAction, DesignerPeers.SubmitActionPeer, DesignerPeerCategory.Actions, "acd-icon-actionSubmit");
        this.registerPeer(Adaptive.OpenUrlAction, DesignerPeers.OpenUrlActionPeer, DesignerPeerCategory.Actions, "acd-icon-actionOpenUrl");
        this.registerPeer(Adaptive.ShowCardAction, DesignerPeers.ShowCardActionPeer, DesignerPeerCategory.Actions, "acd-icon-actionShowCard");
        this.registerPeer(Adaptive.ToggleVisibilityAction, DesignerPeers.ToggleVisibilityActionPeer, DesignerPeerCategory.Actions, "acd-icon-actionToggleVisibility");
    };
    ActionPeerRegistry.prototype.createPeerInstance = function (designerSurface, parent, action) {
        var registrationInfo = this.findTypeRegistration(action.constructor);
        var peer = registrationInfo ? new registrationInfo.peerType(parent, designerSurface, registrationInfo, action) : new DesignerPeers.ActionPeer(parent, designerSurface, this.defaultRegistration, action);
        return peer;
    };
    return ActionPeerRegistry;
}(DesignerPeerRegistry));
exports.ActionPeerRegistry = ActionPeerRegistry;
var DragHandle = /** @class */ (function (_super) {
    __extends(DragHandle, _super);
    function DragHandle() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DragHandle.prototype.internalRender = function () {
        var element = document.createElement("div");
        element.classList.add("acd-peerButton", "acd-icon-drag");
        element.title = "Drag to move this element";
        element.style.visibility = "hidden";
        element.style.position = "absolute";
        element.style.zIndex = "500";
        return element;
    };
    return DragHandle;
}(draggable_element_1.DraggableElement));
var CardDesignerSurface = /** @class */ (function () {
    function CardDesignerSurface(parentElement) {
        var _this = this;
        this._updateCount = 0;
        this._allPeers = [];
        this._lastParseErrors = [];
        this._isPreviewMode = false;
        this.fixedHeightCard = false;
        this.parentElement = parentElement;
        var rootElement = document.createElement("div");
        rootElement.style.position = "relative";
        rootElement.style.width = "100%";
        rootElement.style.height = "100%";
        this._cardHost = document.createElement("div");
        this._cardHost.style.height = "100%";
        rootElement.appendChild(this._cardHost);
        this._designerSurface = document.createElement("div");
        this._designerSurface.classList.add("acd-designersurface");
        this._designerSurface.tabIndex = 0;
        this._designerSurface.style.position = "absolute";
        this._designerSurface.style.left = "0";
        this._designerSurface.style.top = "0";
        this._designerSurface.style.width = "100%";
        this._designerSurface.style.height = "100%";
        this._designerSurface.onkeyup = function (e) {
            if (_this._selectedPeer) {
                switch (e.keyCode) {
                    case Controls.KEY_ESCAPE:
                        _this.setSelectedPeer(_this._selectedPeer.parent);
                        break;
                    case Controls.KEY_DELETE:
                        _this.removeSelected();
                        break;
                }
            }
            return !e.cancelBubble;
        };
        this._designerSurface.onpointermove = function (e) {
            var clientRect = _this._designerSurface.getBoundingClientRect();
            _this.tryDrop({ x: e.x - clientRect.left, y: e.y - clientRect.top }, _this.draggedPeer);
        };
        this._designerSurface.onpointerup = function (e) {
            if (_this.draggedPeer) {
                _this.endDrag();
            }
        };
        rootElement.appendChild(this._designerSurface);
        this.parentElement.innerHTML = "";
        this.parentElement.appendChild(rootElement);
    }
    CardDesignerSurface.prototype.updatePeerCommandsLayout = function () {
        if (this._selectedPeer) {
            var peerRect = this._selectedPeer.getBoundingRect();
            var dragHandleRect = this._dragHandle.renderedElement.getBoundingClientRect();
            var removeButtonRect = this._removeCommandElement.getBoundingClientRect();
            var commandsHostRect = this._peerCommandsHostElement.getBoundingClientRect();
            this._dragHandle.renderedElement.style.left = (peerRect.left - dragHandleRect.width) + "px";
            this._dragHandle.renderedElement.style.top = (peerRect.top - dragHandleRect.height) + "px";
            this._removeCommandElement.style.left = peerRect.right + "px";
            this._removeCommandElement.style.top = (peerRect.top - removeButtonRect.height) + "px";
            this._peerCommandsHostElement.style.left = (peerRect.right - commandsHostRect.width) + "px";
            this._peerCommandsHostElement.style.top = (peerRect.bottom + 2) + "px";
            this._dragHandle.renderedElement.style.visibility = this._selectedPeer.isDraggable() ? "visible" : "hidden";
            this._removeCommandElement.style.visibility = this._selectedPeer.canBeRemoved() ? "visible" : "hidden";
            this._peerCommandsHostElement.style.visibility = this._peerCommandsHostElement.childElementCount > 0 ? "visible" : "hidden";
        }
        else {
            this._dragHandle.renderedElement.style.visibility = "hidden";
            this._removeCommandElement.style.visibility = "hidden";
            this._peerCommandsHostElement.style.visibility = "hidden";
        }
    };
    CardDesignerSurface.prototype.setSelectedPeer = function (value) {
        if (this._selectedPeer != value) {
            if (this._selectedPeer) {
                this._selectedPeer.isSelected = false;
            }
            this._selectedPeer = value;
            this._peerCommandsHostElement.innerHTML = "";
            if (this._selectedPeer) {
                this._selectedPeer.isSelected = true;
                var commands = this._selectedPeer.getCommands();
                for (var _i = 0, commands_1 = commands; _i < commands_1.length; _i++) {
                    var command = commands_1[_i];
                    this._peerCommandsHostElement.appendChild(command.render());
                }
                this._designerSurface.focus();
            }
            this.updatePeerCommandsLayout();
            if (this.onSelectedPeerChanged) {
                this.onSelectedPeerChanged(this._selectedPeer);
            }
        }
    };
    CardDesignerSurface.prototype.peerChanged = function (peer, updatePropertySheet) {
        this._lastParseErrors = [];
        this.renderCard();
        this.updateLayout();
        if (updatePropertySheet && this.onSelectedPeerChanged) {
            this.onSelectedPeerChanged(this._selectedPeer);
        }
    };
    CardDesignerSurface.prototype.peerRemoved = function (peer) {
        this._allPeers.splice(this._allPeers.indexOf(peer), 1);
        if (peer == this._selectedPeer) {
            this.setSelectedPeer(null);
        }
        if (this._updateCount == 0) {
            this.renderCard();
            this.updateLayout();
        }
    };
    CardDesignerSurface.prototype.renderCard = function () {
        this._cardHost.innerHTML = "";
        if (this.card) {
            if (this.onCardValidated) {
                this.onCardValidated(this._lastParseErrors, this.card.validateProperties());
            }
            var cardToRender = void 0;
            if (this.isPreviewMode) {
                if (Shared.GlobalSettings.enableDataBindingSupport) {
                    var cardPayload = this.card.toJSON();
                    try {
                        var template = new ACData.Template(cardPayload);
                        var context = new ACData.EvaluationContext();
                        context.$root = this.sampleData;
                        var expandedCardPayload = template.expand(context);
                        cardToRender = new Adaptive.AdaptiveCard();
                        cardToRender.hostConfig = this.card.hostConfig;
                        cardToRender.parse(expandedCardPayload);
                    }
                    catch (e) {
                        console.log("Template expansion error: " + e.message);
                    }
                }
                if (!cardToRender) {
                    cardToRender = this.card;
                    cardToRender.designMode = false;
                }
            }
            else {
                cardToRender = this.card;
                cardToRender.designMode = true;
            }
            var renderedCard = cardToRender.render();
            if (this.fixedHeightCard) {
                renderedCard.style.height = "100%";
            }
            this._cardHost.appendChild(renderedCard);
        }
    };
    CardDesignerSurface.prototype.addPeer = function (peer) {
        var _this = this;
        if (this._allPeers.indexOf(peer) < 0) {
            this._allPeers.push(peer);
            peer.render();
            peer.onSelectedChanged = function (peer) {
                if (peer.isSelected) {
                    _this.setSelectedPeer(peer);
                }
                else {
                    if (_this._selectedPeer == peer) {
                        _this.setSelectedPeer(null);
                    }
                }
            };
            peer.onChanged = function (sender, updatePropertySheet) { _this.peerChanged(sender, updatePropertySheet); };
            peer.onPeerRemoved = function (sender) { _this.peerRemoved(sender); };
            peer.onPeerAdded = function (sender, newPeer) {
                _this.addPeer(newPeer);
                _this.updateLayout();
            };
            peer.onStartDrag = function (sender) { _this.startDrag(sender); };
            peer.onEndDrag = function (sender) { _this.endDrag(); };
            peer.addElementsToDesignerSurface(this._designerSurface);
            for (var i = 0; i < peer.getChildCount(); i++) {
                this.addPeer(peer.getChildAt(i));
            }
        }
    };
    CardDesignerSurface.prototype.internalFindDropTarget = function (pointerPosition, currentPeer, forPeer) {
        if (currentPeer == forPeer) {
            return null;
        }
        var result = null;
        var lookDeeper = currentPeer instanceof DesignerPeers.ActionPeer;
        if (!lookDeeper) {
            var boundingRect = currentPeer.getBoundingRect();
            lookDeeper = boundingRect.isInside(pointerPosition);
        }
        if (lookDeeper) {
            var canDrop = currentPeer.canDrop(forPeer);
            if (canDrop) {
                result = currentPeer;
            }
            for (var i = 0; i < currentPeer.getChildCount(); i++) {
                var deeperResult = this.internalFindDropTarget(pointerPosition, currentPeer.getChildAt(i), forPeer);
                if (deeperResult) {
                    result = deeperResult;
                    break;
                }
            }
        }
        return result;
    };
    CardDesignerSurface.prototype.findCardElementPeer = function (cardElement) {
        for (var i = 0; i < this._allPeers.length; i++) {
            var peer = this._allPeers[i];
            if (peer instanceof DesignerPeers.CardElementPeer && peer.cardElement == cardElement) {
                return peer;
            }
        }
        return null;
    };
    CardDesignerSurface.prototype.findActionPeer = function (action) {
        for (var i = 0; i < this._allPeers.length; i++) {
            var peer = this._allPeers[i];
            if (peer instanceof DesignerPeers.ActionPeer && peer.action == action) {
                return peer;
            }
        }
        return null;
    };
    CardDesignerSurface.prototype.inlineCardExpanded = function (action, isExpanded) {
        var peer = this.findCardElementPeer(action.card);
        if (isExpanded) {
            if (!peer) {
                var registration = CardDesignerSurface.cardElementPeerRegistry.findTypeRegistration(Adaptive.AdaptiveCard);
                peer = new registration.peerType(peer, this, registration, action.card);
                var parentPeer = this.findActionPeer(action);
                if (parentPeer) {
                    parentPeer.insertChild(peer);
                }
                else {
                    this._rootPeer.insertChild(peer);
                }
            }
            else {
                peer.addElementsToDesignerSurface(this._designerSurface, true);
            }
        }
        else {
            if (peer) {
                peer.removeElementsFromDesignerSurface(true);
            }
        }
        this.updateLayout();
    };
    Object.defineProperty(CardDesignerSurface.prototype, "draggedPeer", {
        get: function () {
            return this._draggedPeer;
        },
        set: function (value) {
            if (this._draggedPeer != value) {
                if (this._draggedPeer) {
                    this._draggedPeer.dragging = false;
                }
                this._draggedPeer = value;
                if (this._draggedPeer) {
                    this._draggedPeer.dragging = true;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    CardDesignerSurface.prototype.getDesignerSurfaceOffset = function () {
        var clientRect = this._designerSurface.getBoundingClientRect();
        return { x: clientRect.left, y: clientRect.top };
    };
    CardDesignerSurface.prototype.findDropTarget = function (pointerPosition, peer) {
        return this.internalFindDropTarget(pointerPosition, this._rootPeer, peer);
    };
    CardDesignerSurface.prototype.findPeer = function (cardObject) {
        for (var _i = 0, _a = this._allPeers; _i < _a.length; _i++) {
            var peer = _a[_i];
            if (peer.getCardObject() === cardObject) {
                return peer;
            }
        }
        return undefined;
    };
    CardDesignerSurface.prototype.beginUpdate = function () {
        this._updateCount++;
    };
    CardDesignerSurface.prototype.endUpdate = function (renderCard) {
        if (this._updateCount > 0) {
            this._updateCount--;
            if (this._updateCount == 0) {
                if (renderCard) {
                    this.renderCard();
                }
                this.updateLayout();
            }
        }
    };
    CardDesignerSurface.prototype.render = function () {
        var _this = this;
        this._designerSurface.innerHTML = "";
        this._allPeers = [];
        this.setSelectedPeer(null);
        this.renderCard();
        if (this.card) {
            this._rootPeer = CardDesignerSurface.cardElementPeerRegistry.createPeerInstance(this, null, this.card);
            this.addPeer(this._rootPeer);
        }
        this._removeCommandElement = document.createElement("div");
        this._removeCommandElement.classList.add("acd-peerButton", "acd-icon-remove");
        this._removeCommandElement.title = "Remove";
        this._removeCommandElement.style.visibility = "hidden";
        this._removeCommandElement.style.position = "absolute";
        this._removeCommandElement.style.zIndex = "500";
        this._removeCommandElement.onclick = function (e) {
            _this.removeSelected();
        };
        this._dragHandle = new DragHandle();
        this._dragHandle.onStartDrag = function (sender) {
            _this._dragHandle.endDrag();
            _this.startDrag(_this._selectedPeer);
        };
        this._dragHandle.render();
        this._peerCommandsHostElement = document.createElement("div");
        this._peerCommandsHostElement.style.visibility = "hidden";
        this._peerCommandsHostElement.style.position = "absolute";
        this._peerCommandsHostElement.style.display = "flex";
        this._peerCommandsHostElement.style.zIndex = "500";
        this._designerSurface.appendChild(this._dragHandle.renderedElement);
        this._designerSurface.appendChild(this._removeCommandElement);
        this._designerSurface.appendChild(this._peerCommandsHostElement);
        this.updateLayout();
    };
    CardDesignerSurface.prototype.setCardPayloadAsObject = function (payload) {
        this._lastParseErrors = [];
        this.card.parse(payload, this._lastParseErrors);
        this.render();
    };
    CardDesignerSurface.prototype.setCardPayloadAsString = function (payload) {
        this.setCardPayloadAsObject(JSON.parse(payload));
    };
    CardDesignerSurface.prototype.updateLayout = function (isFullRefresh) {
        if (isFullRefresh === void 0) { isFullRefresh = true; }
        for (var i = 0; i < this._allPeers.length; i++) {
            this._allPeers[i].updateLayout();
        }
        this.updatePeerCommandsLayout();
        if (this.onLayoutUpdated) {
            this.onLayoutUpdated(isFullRefresh);
        }
    };
    CardDesignerSurface.prototype.removeSelected = function () {
        if (this.selectedPeer) {
            this.beginUpdate();
            try {
                var parent_1 = this.selectedPeer.parent;
                if (this.selectedPeer.remove(false, true)) {
                    this.setSelectedPeer(parent_1);
                }
            }
            finally {
                this.endUpdate(true);
            }
        }
    };
    CardDesignerSurface.prototype.startDrag = function (peer) {
        if (!this.draggedPeer) {
            this._designerSurface.classList.add("dragging");
            this.draggedPeer = peer;
            this.setSelectedPeer(this.draggedPeer);
        }
    };
    CardDesignerSurface.prototype.endDrag = function () {
        if (this.draggedPeer) {
            // Ensure that the dragged peer's elements are at the top in Z order
            this.draggedPeer.removeElementsFromDesignerSurface(true);
            this.draggedPeer.addElementsToDesignerSurface(this._designerSurface, true);
            this._dropTarget.renderedElement.classList.remove("dragover");
            this.draggedPeer = null;
            this._designerSurface.classList.remove("dragging");
        }
    };
    CardDesignerSurface.prototype.tryDrop = function (pointerPosition, peer) {
        var result = false;
        if (peer) {
            if (this._dropTarget) {
                this._dropTarget.renderedElement.classList.remove("dragover");
            }
            var newDropTarget = this.findDropTarget(pointerPosition, peer);
            if (newDropTarget) {
                this._dropTarget = newDropTarget;
                this._dropTarget.renderedElement.classList.add("dragover");
                result = this._dropTarget.tryDrop(peer, pointerPosition);
            }
        }
        return result;
    };
    CardDesignerSurface.prototype.isPointerOver = function (x, y) {
        var clientRect = this._designerSurface.getBoundingClientRect();
        return (x >= clientRect.left) && (x <= clientRect.right) && (y >= clientRect.top) && (y <= clientRect.bottom);
    };
    CardDesignerSurface.prototype.pageToClientCoordinates = function (x, y) {
        var clientRect = this._designerSurface.getBoundingClientRect();
        return {
            x: x - clientRect.left,
            y: y - clientRect.top
        };
    };
    Object.defineProperty(CardDesignerSurface.prototype, "rootPeer", {
        get: function () {
            return this._rootPeer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesignerSurface.prototype, "selectedPeer", {
        get: function () {
            return this._selectedPeer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesignerSurface.prototype, "card", {
        get: function () {
            return this._card;
        },
        set: function (value) {
            var _this = this;
            if (value != this._card) {
                if (this._card) {
                    this._card.onInlineCardExpanded = null;
                }
                this._card = value;
                if (this._card) {
                    this._card.onInlineCardExpanded = function (action, isExpanded) { _this.inlineCardExpanded(action, isExpanded); };
                }
                this.render();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesignerSurface.prototype, "isPreviewMode", {
        get: function () {
            return this._isPreviewMode;
        },
        set: function (value) {
            if (this._isPreviewMode != value) {
                this._isPreviewMode = value;
                if (this._isPreviewMode) {
                    this._designerSurface.classList.add("acd-hidden");
                    this._dragHandle.renderedElement.classList.add("acd-hidden");
                    this._removeCommandElement.classList.add("acd-hidden");
                    this._peerCommandsHostElement.classList.add("acd-hidden");
                }
                else {
                    this._designerSurface.classList.remove("acd-hidden");
                    this._dragHandle.renderedElement.classList.remove("acd-hidden");
                    this._removeCommandElement.classList.remove("acd-hidden");
                    this._peerCommandsHostElement.classList.remove("acd-hidden");
                }
                this.renderCard();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesignerSurface.prototype, "sampleData", {
        get: function () {
            return this._sampleData;
        },
        set: function (value) {
            this._sampleData = value;
            if (this.isPreviewMode) {
                this.renderCard();
            }
        },
        enumerable: true,
        configurable: true
    });
    CardDesignerSurface.cardElementPeerRegistry = new CardElementPeerRegistry();
    CardDesignerSurface.actionPeerRegistry = new ActionPeerRegistry();
    return CardDesignerSurface;
}());
exports.CardDesignerSurface = CardDesignerSurface;


/***/ }),

/***/ "./src/card-designer.ts":
/*!******************************!*\
  !*** ./src/card-designer.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Clipboard = __webpack_require__(/*! clipboard */ "./node_modules/clipboard/dist/clipboard.js");
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var Constants = __webpack_require__(/*! ./constants */ "./src/constants.ts");
var Designer = __webpack_require__(/*! ./card-designer-surface */ "./src/card-designer-surface.ts");
var sample_picker_dialog_1 = __webpack_require__(/*! ./sample-picker-dialog */ "./src/sample-picker-dialog.ts");
var adaptive_card_schema_1 = __webpack_require__(/*! ./adaptive-card-schema */ "./src/adaptive-card-schema.ts");
var fullscreen_handler_1 = __webpack_require__(/*! ./fullscreen-handler */ "./src/fullscreen-handler.ts");
var toolbar_1 = __webpack_require__(/*! ./toolbar */ "./src/toolbar.ts");
var miscellaneous_1 = __webpack_require__(/*! ./miscellaneous */ "./src/miscellaneous.ts");
var tool_palette_1 = __webpack_require__(/*! ./tool-palette */ "./src/tool-palette.ts");
var default_container_1 = __webpack_require__(/*! ./containers/default/default-container */ "./src/containers/default/default-container.ts");
var side_panel_1 = __webpack_require__(/*! ./side-panel */ "./src/side-panel.ts");
var tool_box_1 = __webpack_require__(/*! ./tool-box */ "./src/tool-box.ts");
var data_1 = __webpack_require__(/*! ./data */ "./src/data.ts");
var data_treeitem_1 = __webpack_require__(/*! ./data-treeitem */ "./src/data-treeitem.ts");
var strings_1 = __webpack_require__(/*! ./strings */ "./src/strings.ts");
var Shared = __webpack_require__(/*! ./shared */ "./src/shared.ts");
var CardDesigner = /** @class */ (function () {
    function CardDesigner(hostContainers) {
        if (hostContainers === void 0) { hostContainers = null; }
        this._isAttached = false;
        this._isMonacoEditorLoaded = false;
        this._undoStack = [];
        this._undoStackIndex = -1;
        this.preventCardUpdate = false;
        this._cardEditorUpdateCounter = 0;
        this.preventJsonUpdate = false;
        this._fullScreenHandler = new fullscreen_handler_1.FullScreenHandler();
        this.toolbar = new toolbar_1.Toolbar();
        this.sampleCatalogueUrl = undefined;
        Adaptive.AdaptiveCard.enableFullJsonRoundTrip = true;
        Adaptive.AdaptiveCard.onProcessMarkdown = function (text, result) {
            CardDesigner.internalProcessMarkdown(text, result);
        };
        this._hostContainers = hostContainers ? hostContainers : [];
        this.prepareToolbar();
    }
    CardDesigner.internalProcessMarkdown = function (text, result) {
        if (CardDesigner.onProcessMarkdown) {
            CardDesigner.onProcessMarkdown(text, result);
        }
        else {
            // Check for markdownit
            if (window["markdownit"]) {
                result.outputHtml = window["markdownit"]().render(text);
                result.didProcess = true;
            }
        }
    };
    CardDesigner.prototype.togglePreview = function () {
        this._designerSurface.isPreviewMode = !this._designerSurface.isPreviewMode;
        if (this._designerSurface.isPreviewMode) {
            this._togglePreviewButton.toolTip = "Return to Design mode";
        }
        else {
            this._togglePreviewButton.toolTip = "Switch to Preview mode";
            this._designerSurface.updateLayout();
        }
        this.buildTreeView();
    };
    CardDesigner.prototype.buildTreeView = function () {
        if (this._treeViewToolbox.content) {
            this._treeViewToolbox.content.innerHTML = "";
            if (this.designerSurface.isPreviewMode) {
                this.treeViewToolbox.content.innerHTML =
                    '<div style="padding: 8px; display: flex; justify-content: center;">' +
                        '<div>The Card Structure isn\'t available in Preview mode.</div>' +
                        '</div>';
            }
            else {
                this._treeViewToolbox.content.appendChild(this.designerSurface.rootPeer.treeItem.render());
            }
        }
    };
    CardDesigner.prototype.setupDataTreeItemEvents = function (treeItem) {
        var _this = this;
        treeItem.onStartDrag = function (sender) {
            _this._draggedPaletteItem = new tool_palette_1.DataPaletteItem(treeItem.field);
            _this._draggedElement = _this._draggedPaletteItem.renderDragVisual();
            _this._draggedElement.style.position = "absolute";
            _this._draggedElement.style.left = _this._currentMousePosition.x + "px";
            _this._draggedElement.style.top = _this._currentMousePosition.y + "px";
            document.body.appendChild(_this._draggedElement);
            treeItem.endDrag();
        };
        for (var i = 0; i < treeItem.getChildCount(); i++) {
            this.setupDataTreeItemEvents(treeItem.getChildAt(i));
        }
    };
    CardDesigner.prototype.buildDataExplorer = function () {
        if (this._dataToolbox && this._dataToolbox.content) {
            this._dataToolbox.content.innerHTML = "";
            if (this._dataStructure) {
                var treeItem = new data_treeitem_1.DataTreeItem(this._dataStructure);
                this._dataToolbox.content.appendChild(treeItem.render());
                this.setupDataTreeItemEvents(treeItem);
            }
        }
    };
    CardDesigner.prototype.buildPropertySheet = function (peer) {
        if (this._propertySheetToolbox.content) {
            this._propertySheetToolbox.content.innerHTML = "";
            var card = void 0;
            if (peer) {
                card = peer.buildPropertySheetCard(this.currentTargetVersion);
            }
            else {
                card = new Adaptive.AdaptiveCard();
                card.parse({
                    type: "AdaptiveCard",
                    version: "1.0",
                    body: [
                        {
                            type: "TextBlock",
                            wrap: true,
                            text: "**Nothing is selected**"
                        },
                        {
                            type: "TextBlock",
                            wrap: true,
                            text: "Select an element in the card to modify its properties."
                        }
                    ]
                });
                card.padding = new Adaptive.PaddingDefinition(Adaptive.Spacing.Small, Adaptive.Spacing.Small, Adaptive.Spacing.Small, Adaptive.Spacing.Small);
            }
            // card.hostConfig = this._propertySheetHostConfig;
            card.hostConfig = miscellaneous_1.defaultHostConfig;
            this._propertySheetToolbox.content.appendChild(card.render());
        }
    };
    CardDesigner.prototype.addPaletteItem = function (paletteItem, hostElement) {
        var _this = this;
        paletteItem.render();
        paletteItem.onStartDrag = function (sender) {
            _this._draggedPaletteItem = sender;
            _this._draggedElement = sender.renderDragVisual();
            _this._draggedElement.style.position = "absolute";
            _this._draggedElement.style.left = _this._currentMousePosition.x + "px";
            _this._draggedElement.style.top = _this._currentMousePosition.y + "px";
            document.body.appendChild(_this._draggedElement);
        };
        hostElement.appendChild(paletteItem.renderedElement);
    };
    CardDesigner.prototype.buildPalette = function () {
        if (!this._isAttached) {
            return;
        }
        this._toolPaletteToolbox.content.innerHTML = "";
        var categorizedTypes = {};
        for (var i_1 = 0; i_1 < Adaptive.AdaptiveCard.elementTypeRegistry.getItemCount(); i_1++) {
            var dummyCardElement = Adaptive.AdaptiveCard.elementTypeRegistry.getItemAt(i_1).createInstance();
            var peerRegistration = Designer.CardDesignerSurface.cardElementPeerRegistry.findTypeRegistration(dummyCardElement.constructor);
            if (peerRegistration) {
                if (!categorizedTypes.hasOwnProperty(peerRegistration.category)) {
                    categorizedTypes[peerRegistration.category] = [];
                }
                var paletteItem = new tool_palette_1.ElementPaletteItem(Adaptive.AdaptiveCard.elementTypeRegistry.getItemAt(i_1), peerRegistration);
                categorizedTypes[peerRegistration.category].push(paletteItem);
            }
        }
        if (this.customPaletteItems) {
            for (var _i = 0, _a = this.customPaletteItems; _i < _a.length; _i++) {
                var item = _a[_i];
                if (!categorizedTypes.hasOwnProperty(item.category)) {
                    categorizedTypes[item.category] = [];
                }
                categorizedTypes[item.category].push(item);
            }
        }
        for (var category in categorizedTypes) {
            var node = document.createElement('div');
            node.innerText = category;
            node.className = "acd-palette-category";
            this._toolPaletteToolbox.content.appendChild(node);
            for (var i = 0; i < categorizedTypes[category].length; i++) {
                this.addPaletteItem(categorizedTypes[category][i], this._toolPaletteToolbox.content);
            }
        }
    };
    CardDesigner.prototype.endDrag = function () {
        if (this._draggedPaletteItem) {
            this._draggedPaletteItem.endDrag();
            this._draggedElement.remove();
            this._draggedPaletteItem = null;
            this._draggedElement = null;
        }
    };
    CardDesigner.prototype.renderErrorPaneElement = function (message, cardObject) {
        var _this = this;
        var errorElement = document.createElement("div");
        errorElement.className = "acd-error-pane-message";
        if (cardObject) {
            errorElement.classList.add("selectable");
            errorElement.title = "Click to select this element";
            errorElement.onclick = function (e) {
                var peer = _this.designerSurface.findPeer(cardObject);
                if (peer) {
                    peer.isSelected = true;
                    peer.scrollIntoView();
                }
            };
        }
        errorElement.innerText = message;
        return errorElement;
    };
    CardDesigner.prototype.recreateDesignerSurface = function () {
        var _this = this;
        var styleSheetLinkElement = document.getElementById("adaptiveCardStylesheet");
        if (styleSheetLinkElement == null) {
            styleSheetLinkElement = document.createElement("link");
            styleSheetLinkElement.id = "adaptiveCardStylesheet";
            document.getElementsByTagName("head")[0].appendChild(styleSheetLinkElement);
        }
        styleSheetLinkElement.rel = "stylesheet";
        styleSheetLinkElement.type = "text/css";
        if (miscellaneous_1.Utils.isAbsoluteUrl(this.activeHostContainer.styleSheet)) {
            styleSheetLinkElement.href = this.activeHostContainer.styleSheet;
        }
        else {
            styleSheetLinkElement.href = miscellaneous_1.Utils.joinPaths(this._assetPath, this.activeHostContainer.styleSheet);
        }
        var _cardArea = document.getElementById("cardArea");
        if (_cardArea) {
            _cardArea.style.backgroundColor = this.activeHostContainer.getBackgroundColor();
        }
        this.activeHostContainer.initialize();
        this._designerHostElement.innerHTML = "";
        this.activeHostContainer.renderTo(this._designerHostElement);
        var wasInPreviewMode = this._designerSurface ? this._designerSurface.isPreviewMode : false;
        this._designerSurface = new Designer.CardDesignerSurface(this.activeHostContainer.cardHost);
        this._designerSurface.fixedHeightCard = this.activeHostContainer.isFixedHeight;
        this._designerSurface.onSelectedPeerChanged = function (peer) {
            _this.buildPropertySheet(peer);
        };
        this._designerSurface.onLayoutUpdated = function (isFullRefresh) {
            if (isFullRefresh) {
                _this.scheduleUpdateJsonFromCard();
            }
            _this.buildTreeView();
        };
        this._designerSurface.onCardValidated = function (parseErrors, validationResults) {
            var errorPane = document.getElementById("errorPane");
            errorPane.innerHTML = "";
            if (parseErrors.length > 0) {
                var errorMessages = [];
                for (var _i = 0, parseErrors_1 = parseErrors; _i < parseErrors_1.length; _i++) {
                    var error = parseErrors_1[_i];
                    if (errorMessages.indexOf(error.message) < 0) {
                        errorMessages.push(error.message);
                    }
                }
                for (var _a = 0, errorMessages_1 = errorMessages; _a < errorMessages_1.length; _a++) {
                    var message = errorMessages_1[_a];
                    errorPane.appendChild(_this.renderErrorPaneElement("[Error] " + message));
                }
            }
            if (validationResults.failures.length > 0) {
                for (var _b = 0, _c = validationResults.failures; _b < _c.length; _b++) {
                    var failure = _c[_b];
                    for (var _d = 0, _e = failure.errors; _d < _e.length; _d++) {
                        var error = _e[_d];
                        errorPane.appendChild(_this.renderErrorPaneElement("[" + failure.cardObject.getJsonTypeName() + "] " + error.message, failure.cardObject));
                    }
                }
            }
            if (errorPane.childElementCount > 0) {
                errorPane.classList.remove("acd-hidden");
            }
            else {
                errorPane.classList.add("acd-hidden");
            }
        };
        this.buildPalette();
        this.buildPropertySheet(null);
        if (this._card) {
            this._card.hostConfig = this.activeHostContainer.getHostConfig();
        }
        this._designerSurface.card = this._card;
        this.updateSampleData();
        this._designerSurface.isPreviewMode = wasInPreviewMode;
        this.updateFullLayout();
    };
    CardDesigner.prototype.activeHostContainerChanged = function () {
        this.recreateDesignerSurface();
        if (this.onActiveHostContainerChanged) {
            this.onActiveHostContainerChanged(this);
        }
    };
    CardDesigner.prototype.updateToolboxLayout = function (toolbox, hostPanelRect) {
        if (toolbox) {
            var jsonEditorHeaderRect = toolbox.getHeaderBoundingRect();
            toolbox.content.style.height = (hostPanelRect.height - jsonEditorHeaderRect.height) + "px";
        }
    };
    CardDesigner.prototype.updateJsonEditorsLayout = function () {
        if (this._isMonacoEditorLoaded) {
            var jsonEditorsPaneRect = this._jsonEditorsPanel.contentHost.getBoundingClientRect();
            this.updateToolboxLayout(this._cardEditorToolbox, jsonEditorsPaneRect);
            this._cardEditor.layout();
            if (this._sampleDataEditorToolbox) {
                this.updateToolboxLayout(this._sampleDataEditorToolbox, jsonEditorsPaneRect);
                this._sampleDataEditor.layout();
            }
        }
    };
    CardDesigner.prototype.updateFullLayout = function () {
        this.scheduleLayoutUpdate();
        this.updateJsonEditorsLayout();
    };
    CardDesigner.prototype.cardPayloadChanged = function () {
        if (this.onCardPayloadChanged) {
            this.onCardPayloadChanged(this);
        }
    };
    CardDesigner.prototype.beginCardEditorUpdate = function () {
        this._cardEditorUpdateCounter++;
    };
    CardDesigner.prototype.endCardEditorUpdate = function () {
        if (this._cardEditorUpdateCounter > 0) {
            this._cardEditorUpdateCounter--;
        }
    };
    CardDesigner.prototype.setCardPayload = function (payload, addToUndoStack) {
        if (this._isMonacoEditorLoaded) {
            this.beginCardEditorUpdate();
            try {
                this._cardEditor.setValue(JSON.stringify(payload, null, 4));
                this.updateCardFromJson(addToUndoStack);
            }
            finally {
                this.endCardEditorUpdate();
            }
        }
        this.cardPayloadChanged();
    };
    CardDesigner.prototype.setSampleDataPayload = function (payload) {
        if (this._isMonacoEditorLoaded && this._sampleDataEditor) {
            this._sampleDataEditor.setValue(JSON.stringify(payload, null, 4));
        }
    };
    CardDesigner.prototype.updateJsonFromCard = function (addToUndoStack) {
        if (addToUndoStack === void 0) { addToUndoStack = true; }
        try {
            this.preventCardUpdate = true;
            if (!this.preventJsonUpdate && this._isMonacoEditorLoaded) {
                var cardPayload = this.card.toJSON();
                this.setCardPayload(cardPayload, addToUndoStack);
            }
        }
        finally {
            this.preventCardUpdate = false;
        }
    };
    CardDesigner.prototype.scheduleUpdateJsonFromCard = function () {
        var _this = this;
        clearTimeout(this.jsonUpdateTimer);
        if (!this.preventJsonUpdate) {
            this.jsonUpdateTimer = setTimeout(function () { _this.updateJsonFromCard(); }, 100);
        }
    };
    CardDesigner.prototype.getCurrentCardEditorPayload = function () {
        return this._isMonacoEditorLoaded ? this._cardEditor.getValue() : Constants.defaultPayload;
    };
    CardDesigner.prototype.getCurrentSampleDataEditorPayload = function () {
        return this._isMonacoEditorLoaded && this._sampleDataEditor ? this._sampleDataEditor.getValue() : "";
    };
    CardDesigner.prototype.updateCardFromJson = function (addToUndoStack) {
        try {
            this.preventJsonUpdate = true;
            var currentEditorPayload = this.getCurrentCardEditorPayload();
            if (addToUndoStack) {
                try {
                    var parsed = JSON.parse(currentEditorPayload);
                    this.addToUndoStack(parsed);
                }
                catch (_a) {
                    // do nothing
                }
            }
            if (!this.preventCardUpdate) {
                this.designerSurface.setCardPayloadAsString(currentEditorPayload);
                this.cardPayloadChanged();
            }
        }
        finally {
            this.preventJsonUpdate = false;
        }
    };
    CardDesigner.prototype.scheduleUpdateCardFromJson = function () {
        var _this = this;
        clearTimeout(this.cardUpdateTimer);
        if (!this.preventCardUpdate) {
            this.cardUpdateTimer = setTimeout(function () { _this.updateCardFromJson(true); }, 300);
        }
    };
    CardDesigner.prototype.scheduleLayoutUpdate = function () {
        var _this = this;
        clearTimeout(this.updateLayoutTimer);
        this.updateLayoutTimer = setTimeout(function () { _this.designerSurface.updateLayout(false); }, 50);
    };
    CardDesigner.prototype.prepareToolbar = function () {
        var _this = this;
        if (Shared.GlobalSettings.showVersionPicker) {
            this._versionChoicePicker = new toolbar_1.ToolbarChoicePicker(CardDesigner.ToolbarCommands.VersionPicker);
            this._versionChoicePicker.label = "Target version:";
            this._versionChoicePicker.width = 80;
            this._versionChoicePicker.alignment = toolbar_1.ToolbarElementAlignment.Right;
            this._versionChoicePicker.separator = true;
            for (var i = 0; i < Shared.SupportedTargetVersions.length; i++) {
                this._versionChoicePicker.choices.push({
                    name: Shared.SupportedTargetVersions[i].label,
                    value: i.toString()
                });
            }
            this.toolbar.addElement(this._versionChoicePicker);
        }
        this._fullScreenButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.FullScreen, "Enter Full Screen", "acd-icon-fullScreen", function (sender) { _this._fullScreenHandler.toggleFullScreen(); });
        this._fullScreenButton.displayCaption = false;
        this._fullScreenButton.toolTip = "Enter full screen";
        this._fullScreenButton.alignment = toolbar_1.ToolbarElementAlignment.Right;
        // Hide full screen button by default. This button is useless
        // and should really be plain and simple removed in a future version
        this._fullScreenButton.isVisible = false;
        this.toolbar.addElement(this._fullScreenButton);
        var openSampleButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.OpenPayload, "Open Sample", "acd-icon-open", function (sender) {
            var dialog = new sample_picker_dialog_1.SamplePickerDialog();
            dialog.title = "Pick a sample";
            dialog.width = "30%";
            dialog.height = "60%";
            dialog.catalogueUrl = _this.sampleCatalogueUrl;
            dialog.onClose = function (d) {
                if (dialog.selectedSample) {
                    dialog.selectedSample.onDownloaded = function () {
                        try {
                            var cardPayload = JSON.parse(dialog.selectedSample.cardPayload);
                            _this.setCardPayload(cardPayload, true);
                        }
                        catch (_a) {
                            alert("The sample could not be loaded.");
                        }
                        if (!Adaptive.isNullOrEmpty(dialog.selectedSample.sampleData)) {
                            try {
                                var sampleDataPayload = JSON.parse(dialog.selectedSample.sampleData);
                                _this.setSampleDataPayload(sampleDataPayload);
                                _this.dataStructure = data_1.FieldDefinition.create(sampleDataPayload);
                            }
                            catch (_b) {
                                alert("The sample could not be loaded.");
                            }
                        }
                    };
                    dialog.selectedSample.download();
                }
            };
            dialog.open();
        });
        this.toolbar.addElement(openSampleButton);
        if (this._hostContainers && this._hostContainers.length > 0) {
            this._hostContainerChoicePicker = new toolbar_1.ToolbarChoicePicker(CardDesigner.ToolbarCommands.HostAppPicker);
            this._hostContainerChoicePicker.separator = true;
            this._hostContainerChoicePicker.label = "Select host app:";
            this._hostContainerChoicePicker.width = 350;
            for (var i = 0; i < this._hostContainers.length; i++) {
                this._hostContainerChoicePicker.choices.push({
                    name: this._hostContainers[i].name,
                    value: i.toString(),
                });
            }
            this._hostContainerChoicePicker.onChanged = function (sender) {
                _this.activeHostContainer = _this._hostContainers[Number.parseInt(_this._hostContainerChoicePicker.value)];
                _this.activeHostContainerChanged();
            };
            this.toolbar.addElement(this._hostContainerChoicePicker);
        }
        this._undoButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.Undo, "Undo", "acd-icon-undo", function (sender) { _this.undo(); });
        this._undoButton.separator = true;
        this._undoButton.toolTip = "Undo your last change";
        this._undoButton.isEnabled = false;
        this._undoButton.displayCaption = false;
        this.toolbar.addElement(this._undoButton);
        this._redoButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.Redo, "Redo", "acd-icon-redo", function (sender) { _this.redo(); });
        this._redoButton.toolTip = "Redo your last changes";
        this._redoButton.isEnabled = false;
        this._redoButton.displayCaption = false;
        this.toolbar.addElement(this._redoButton);
        this._newCardButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.NewCard, "New card", "acd-icon-newCard", function (sender) { _this.newCard(); });
        this._newCardButton.separator = true;
        this.toolbar.addElement(this._newCardButton);
        this._copyJSONButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.CopyJSON, "Copy card JSON", "acd-icon-copy");
        this.toolbar.addElement(this._copyJSONButton);
        this._togglePreviewButton = new toolbar_1.ToolbarButton(CardDesigner.ToolbarCommands.TogglePreview, "Preview mode", "acd-icon-preview", function (sender) { _this.togglePreview(); });
        this._togglePreviewButton.separator = true;
        this._togglePreviewButton.allowToggle = true;
        this._togglePreviewButton.isVisible = Shared.GlobalSettings.enableDataBindingSupport;
        this.toolbar.addElement(this._togglePreviewButton);
        this._fullScreenHandler = new fullscreen_handler_1.FullScreenHandler();
        this._fullScreenHandler.onFullScreenChanged = function (isFullScreen) {
            _this._fullScreenButton.toolTip = isFullScreen ? "Exit full screen" : "Enter full screen";
            _this.updateFullLayout();
        };
    };
    CardDesigner.prototype.onResize = function () {
        this._cardEditor.layout();
        if (this._sampleDataEditor) {
            this._sampleDataEditor.layout();
        }
    };
    CardDesigner.prototype.updateSampleData = function () {
        try {
            this._sampleData = JSON.parse(this.getCurrentSampleDataEditorPayload());
            this.designerSurface.sampleData = this._sampleData;
        }
        catch (_a) {
            // Swallow expression, the payload isn't a valid JSON document
        }
    };
    CardDesigner.prototype.monacoModuleLoaded = function (monaco) {
        var _this = this;
        if (monaco === void 0) { monaco = null; }
        if (!monaco) {
            monaco = window["monaco"];
        }
        var monacoConfiguration = {
            schemas: [
                {
                    uri: "http://adaptivecards.io/schemas/adaptive-card.json",
                    schema: adaptive_card_schema_1.adaptiveCardSchema,
                    fileMatch: ["*"],
                }
            ],
            validate: false,
            allowComments: true
        };
        // TODO: set this in our editor instead of defaults
        monaco.languages.json.jsonDefaults.setDiagnosticsOptions(monacoConfiguration);
        // Setup card JSON editor
        this._cardEditorToolbox.content = document.createElement("div");
        this._cardEditorToolbox.content.style.overflow = "hidden";
        this._cardEditor = monaco.editor.create(this._cardEditorToolbox.content, {
            folding: true,
            fontSize: 13.5,
            language: 'json',
            minimap: {
                enabled: false
            }
        });
        this._cardEditor.onDidChangeModelContent(function () {
            if (_this._cardEditorUpdateCounter == 0) {
                _this.scheduleUpdateCardFromJson();
            }
        });
        if (this._sampleDataEditorToolbox) {
            // Setup sample data JSON editor
            this._sampleDataEditorToolbox.content = document.createElement("div");
            this._sampleDataEditorToolbox.content.style.overflow = "hidden";
            this._sampleDataEditor = monaco.editor.create(this._sampleDataEditorToolbox.content, {
                folding: true,
                fontSize: 13.5,
                language: 'json',
                minimap: {
                    enabled: false
                }
            });
            this._sampleDataEditor.onDidChangeModelContent(function () {
                _this.updateSampleData();
            });
        }
        window.addEventListener('resize', function () { _this.onResize(); });
        this._isMonacoEditorLoaded = true;
        this.updateJsonEditorsLayout();
        this.updateJsonFromCard(false);
    };
    CardDesigner.prototype.updateToolbar = function () {
        this._undoButton.isEnabled = this.canUndo;
        this._redoButton.isEnabled = this.canRedo;
    };
    CardDesigner.prototype.addToUndoStack = function (payload) {
        var doAdd = true;
        if (this._undoStack.length > 0) {
            doAdd = this._undoStack[this._undoStack.length - 1] != payload;
        }
        if (doAdd) {
            var undoPayloadsToDiscard = this._undoStack.length - (this._undoStackIndex + 1);
            if (undoPayloadsToDiscard > 0) {
                this._undoStack.splice(this._undoStackIndex + 1, undoPayloadsToDiscard);
            }
            this._undoStack.push(payload);
            if (this._undoStack.length > CardDesigner.MAX_UNDO_STACK_SIZE) {
                this._undoStack.splice(0, 1);
            }
            this._undoStackIndex = this._undoStack.length - 1;
            this.updateToolbar();
        }
    };
    CardDesigner.prototype.handlePointerUp = function (e) {
        this.endDrag();
        this.designerSurface.endDrag();
    };
    CardDesigner.prototype.handlePointerMove = function (e) {
        this._currentMousePosition = { x: e.x, y: e.y };
        var isPointerOverDesigner = this.designerSurface.isPointerOver(this._currentMousePosition.x, this._currentMousePosition.y);
        var peerDropped = false;
        if (this._draggedPaletteItem && isPointerOverDesigner) {
            var peer = this._draggedPaletteItem.createPeer(this.designerSurface);
            var clientCoordinates = this.designerSurface.pageToClientCoordinates(this._currentMousePosition.x, this._currentMousePosition.y);
            if (this.designerSurface.tryDrop(clientCoordinates, peer)) {
                this.endDrag();
                this.designerSurface.startDrag(peer);
                peerDropped = true;
            }
        }
        if (!peerDropped && this._draggedElement) {
            this._draggedElement.style.left = this._currentMousePosition.x - 10 + "px";
            this._draggedElement.style.top = this._currentMousePosition.y - 10 + "px";
        }
    };
    CardDesigner.prototype.attachTo = function (root) {
        var _this = this;
        var styleSheetLinkElement = document.createElement("link");
        styleSheetLinkElement.id = "__ac-designer";
        styleSheetLinkElement.rel = "stylesheet";
        styleSheetLinkElement.type = "text/css";
        styleSheetLinkElement.href = miscellaneous_1.Utils.joinPaths(this._assetPath, "adaptivecards-designer.css");
        document.getElementsByTagName("head")[0].appendChild(styleSheetLinkElement);
        if (this._hostContainers && this._hostContainers.length > 0) {
            this._activeHostContainer = this._hostContainers[0];
        }
        else {
            this._activeHostContainer = new default_container_1.DefaultContainer("Default", "adaptivecards-defaulthost.css");
        }
        root.style.flex = "1 1 auto";
        root.style.display = "flex";
        root.style.flexDirection = "column";
        root.style.overflow = "hidden";
        root.innerHTML =
            '<div id="toolbarHost"></div>' +
                '<div class="content" style="display: flex; flex: 1 1 auto; overflow-y: hidden;">' +
                '<div id="leftCollapsedPaneTabHost" class="acd-verticalCollapsedTabContainer acd-dockedLeft" style="border-right: 1px solid #D2D2D2;"></div>' +
                '<div id="toolPalettePanel" class="acd-toolPalette-pane"></div>' +
                '<div style="display: flex; flex-direction: column; flex: 1 1 100%; overflow: hidden;">' +
                '<div style="display: flex; flex: 1 1 100%; overflow: hidden;">' +
                '<div id="cardArea" class="acd-designer-cardArea">' +
                '<div style="flex: 1 1 100%; overflow: auto;">' +
                '<div id="designerHost" style="margin: 20px 40px 20px 20px;"></div>' +
                '</div>' +
                '<div id="errorPane" class="acd-error-pane acd-hidden"></div>' +
                '</div>' +
                '<div id="treeViewPanel" class="acd-treeView-pane"></div>' +
                '<div id="propertySheetPanel" class="acd-propertySheet-pane"></div>' +
                '</div>' +
                '<div id="jsonEditorPanel" class="acd-json-editor-pane"></div>' +
                '<div id="bottomCollapsedPaneTabHost" class="acd-horizontalCollapsedTabContainer" style="border-top: 1px solid #D2D2D2;"></div>' +
                '</div>' +
                '<div id="rightCollapsedPaneTabHost" class="acd-verticalCollapsedTabContainer acd-dockedRight" style="border-left: 1px solid #D2D2D2;"></div>' +
                '</div>';
        this.toolbar.attachTo(document.getElementById("toolbarHost"));
        if (this._versionChoicePicker) {
            this._versionChoicePicker.selectedIndex = Shared.SupportedTargetVersions.indexOf(Shared.Versions.v1_2);
            this._versionChoicePicker.onChanged = function (sender) {
                _this.buildPropertySheet(_this._designerSurface.selectedPeer);
            };
        }
        if (this._copyJSONButton.isVisible) {
            new Clipboard(this._copyJSONButton.renderedElement, {
                text: function (trigger) { return JSON.stringify(_this.card.toJSON(), null, 4); }
            });
        }
        // Tool palette panel
        var toolPaletteHost = document.createElement("div");
        toolPaletteHost.className = "acd-dockedPane";
        this._toolPaletteToolbox = new tool_box_1.Toolbox("toolPalette", strings_1.Strings.toolboxes.toolPalette.title);
        this._toolPaletteToolbox.content = toolPaletteHost;
        var toolPalettePanel = new side_panel_1.SidePanel("toolPalettePanel", side_panel_1.SidePanelAlignment.Left, document.getElementById("leftCollapsedPaneTabHost"));
        toolPalettePanel.addToolbox(this._toolPaletteToolbox);
        toolPalettePanel.isResizable = false;
        toolPalettePanel.attachTo(document.getElementById("toolPalettePanel"));
        // JSON editors panel
        this._cardEditorToolbox = new tool_box_1.Toolbox("cardEditor", strings_1.Strings.toolboxes.cardEditor.title);
        this._cardEditorToolbox.content = document.createElement("div");
        this._cardEditorToolbox.content.style.padding = "8px";
        this._cardEditorToolbox.content.innerText = strings_1.Strings.loadingEditor;
        this._jsonEditorsPanel = new side_panel_1.SidePanel("jsonEditorPanel", side_panel_1.SidePanelAlignment.Bottom, document.getElementById("bottomCollapsedPaneTabHost"));
        this._jsonEditorsPanel.onResized = function (sender) {
            _this.updateJsonEditorsLayout();
        };
        this._jsonEditorsPanel.onToolboxResized = function (sender) {
            _this.updateJsonEditorsLayout();
        };
        this._jsonEditorsPanel.onToolboxExpandedOrCollapsed = function (sender) {
            _this.updateJsonEditorsLayout();
        };
        this._jsonEditorsPanel.addToolbox(this._cardEditorToolbox);
        if (Shared.GlobalSettings.enableDataBindingSupport && Shared.GlobalSettings.showSampleDataEditorToolbox) {
            this._sampleDataEditorToolbox = new tool_box_1.Toolbox("sampleDataEditor", strings_1.Strings.toolboxes.sampleDataEditor.title);
            this._sampleDataEditorToolbox.content = document.createElement("div");
            this._sampleDataEditorToolbox.content.style.padding = "8px";
            this._sampleDataEditorToolbox.content.innerText = strings_1.Strings.loadingEditor;
            this._sampleDataEditorToolbox.commands = [
                {
                    title: "Copy the structure of this data into the Data Structure toolbox",
                    iconClass: "acd-icon-dataStructure",
                    execute: function (sender) {
                        _this.dataStructure = data_1.FieldDefinition.create(JSON.parse(_this.getCurrentSampleDataEditorPayload()));
                    }
                }
            ];
            this._jsonEditorsPanel.addToolbox(this._sampleDataEditorToolbox);
        }
        this._jsonEditorsPanel.attachTo(document.getElementById("jsonEditorPanel"));
        // Property sheet panel
        var propertySheetHost = document.createElement("div");
        propertySheetHost.className = "acd-propertySheet-host";
        this._propertySheetToolbox = new tool_box_1.Toolbox("propertySheet", strings_1.Strings.toolboxes.propertySheet.title);
        this._propertySheetToolbox.content = propertySheetHost;
        var propertySheetPanel = new side_panel_1.SidePanel("propertySheetPanel", side_panel_1.SidePanelAlignment.Right, document.getElementById("rightCollapsedPaneTabHost"));
        propertySheetPanel.addToolbox(this._propertySheetToolbox);
        propertySheetPanel.onResized = function (sender) {
            _this.scheduleLayoutUpdate();
        };
        propertySheetPanel.attachTo(document.getElementById("propertySheetPanel"));
        // Tree view panel
        var treeViewHost = document.createElement("div");
        treeViewHost.className = "acd-treeView-host";
        this._treeViewToolbox = new tool_box_1.Toolbox("treeView", strings_1.Strings.toolboxes.cardStructure.title);
        this._treeViewToolbox.content = treeViewHost;
        var treeViewPanel = new side_panel_1.SidePanel("treeViewPanel", side_panel_1.SidePanelAlignment.Right, document.getElementById("rightCollapsedPaneTabHost"));
        treeViewPanel.addToolbox(this._treeViewToolbox);
        treeViewPanel.onResized = function (sender) {
            _this.scheduleLayoutUpdate();
        };
        if (Shared.GlobalSettings.enableDataBindingSupport && Shared.GlobalSettings.showDataStructureToolbox) {
            var dataExplorerHost = document.createElement("div");
            dataExplorerHost.className = "acd-treeView-host";
            this._dataToolbox = new tool_box_1.Toolbox("data", strings_1.Strings.toolboxes.dataStructure.title);
            this._dataToolbox.content = dataExplorerHost;
            treeViewPanel.addToolbox(this._dataToolbox);
        }
        treeViewPanel.attachTo(document.getElementById("treeViewPanel"));
        this._designerHostElement = document.getElementById("designerHost");
        window.addEventListener("pointermove", function (e) { _this.handlePointerMove(e); });
        window.addEventListener("resize", function () { _this.scheduleLayoutUpdate(); });
        window.addEventListener("pointerup", function (e) { _this.handlePointerUp(e); });
        this._isAttached = true;
        this.recreateDesignerSurface();
        var card = new Adaptive.AdaptiveCard();
        card.onImageLoaded = function (image) {
            _this.scheduleLayoutUpdate();
        };
        this.card = card;
    };
    CardDesigner.prototype.undo = function () {
        if (this.canUndo) {
            this._undoStackIndex--;
            var card = this._undoStack[this._undoStackIndex];
            this.setCardPayload(card, false);
            this.updateToolbar();
        }
    };
    CardDesigner.prototype.redo = function () {
        if (this._undoStackIndex < this._undoStack.length - 1) {
            this._undoStackIndex++;
            var card = this._undoStack[this._undoStackIndex];
            this.setCardPayload(card, false);
            this.updateToolbar();
        }
    };
    CardDesigner.prototype.newCard = function () {
        var card = {
            type: "AdaptiveCard",
            version: "1.0",
            body: []
        };
        this.setCardPayload(card, true);
    };
    CardDesigner.prototype.setCard = function (payload) {
        try {
            this.preventJsonUpdate = true;
            if (!this.preventCardUpdate) {
                this.designerSurface.setCardPayloadAsObject(payload);
            }
        }
        finally {
            this.preventJsonUpdate = false;
        }
        this.updateJsonFromCard();
    };
    CardDesigner.prototype.getCard = function () {
        return this.designerSurface.card.toJSON();
    };
    Object.defineProperty(CardDesigner.prototype, "currentTargetVersion", {
        get: function () {
            if (this._versionChoicePicker) {
                return Shared.SupportedTargetVersions[parseInt(this._versionChoicePicker.value)];
            }
            else {
                return Shared.Versions.latest;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "dataStructure", {
        get: function () {
            return this._dataStructure;
        },
        set: function (value) {
            this._dataStructure = value;
            this.buildDataExplorer();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "sampleData", {
        get: function () {
            return this._sampleData;
        },
        set: function (value) {
            this._sampleData = value;
            this.setSampleDataPayload(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "activeHostContainer", {
        get: function () {
            return this._activeHostContainer;
        },
        set: function (value) {
            if (this._activeHostContainer !== value) {
                this._activeHostContainer = value;
                this.activeHostContainerChanged();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "canUndo", {
        get: function () {
            return this._undoStackIndex >= 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "canRedo", {
        get: function () {
            return this._undoStackIndex < this._undoStack.length - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "card", {
        get: function () {
            return this._card;
        },
        set: function (value) {
            if (this._card != value) {
                if (this._card) {
                    this._card.designMode = false;
                }
                this._card = value;
                if (this._card) {
                    this._card.designMode = true;
                    this._card.hostConfig = this.activeHostContainer.getHostConfig();
                }
                this.recreateDesignerSurface();
                this.updateCardFromJson(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "designerSurface", {
        get: function () {
            return this._designerSurface;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "treeViewToolbox", {
        get: function () {
            return this._treeViewToolbox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "propertySheetToolbox", {
        get: function () {
            return this._propertySheetToolbox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "jsonEditorToolbox", {
        get: function () {
            return this._cardEditorToolbox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "toolPaletteToolbox", {
        get: function () {
            return this._toolPaletteToolbox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "dataToolbox", {
        get: function () {
            return this._dataToolbox;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "assetPath", {
        get: function () {
            return this._assetPath;
        },
        set: function (value) {
            this._assetPath = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardDesigner.prototype, "customPaletteItems", {
        get: function () {
            return this._customPeletteItems;
        },
        set: function (value) {
            this._customPeletteItems = value;
            this.buildPalette();
        },
        enumerable: true,
        configurable: true
    });
    CardDesigner.onProcessMarkdown = null;
    CardDesigner.MAX_UNDO_STACK_SIZE = 50;
    return CardDesigner;
}());
exports.CardDesigner = CardDesigner;
(function (CardDesigner) {
    var ToolbarCommands = /** @class */ (function () {
        function ToolbarCommands() {
        }
        ToolbarCommands.FullScreen = "__fullScreenButton";
        ToolbarCommands.OpenPayload = "__openPayload";
        ToolbarCommands.HostAppPicker = "__hostAppPicker";
        ToolbarCommands.VersionPicker = "__versionPicker";
        ToolbarCommands.Undo = "__undoButton";
        ToolbarCommands.Redo = "__redoButton";
        ToolbarCommands.NewCard = "__newCardButton";
        ToolbarCommands.CopyJSON = "__copyJsonButton";
        ToolbarCommands.TogglePreview = "__togglePreviewButton";
        return ToolbarCommands;
    }());
    CardDesigner.ToolbarCommands = ToolbarCommands;
})(CardDesigner = exports.CardDesigner || (exports.CardDesigner = {}));
exports.CardDesigner = CardDesigner;


/***/ }),

/***/ "./src/catalogue.ts":
/*!**************************!*\
  !*** ./src/catalogue.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var downloader_1 = __webpack_require__(/*! ./downloader */ "./src/downloader.ts");
var CatalogueEntry = /** @class */ (function () {
    function CatalogueEntry(displayName, cardPayloadUrl, sampleDataUrl) {
        this.displayName = displayName;
        this.cardPayloadUrl = cardPayloadUrl;
        this._cardPayloadDownloaded = false;
        this._sampleDataDownloaded = false;
        this.onDownloaded = null;
        this.sampleDataUrl = sampleDataUrl;
    }
    CatalogueEntry.prototype.downloadCompleted = function () {
        if (this._cardPayloadDownloaded && this._sampleDataDownloaded && this.onDownloaded) {
            this.onDownloaded(this);
        }
    };
    CatalogueEntry.prototype.download = function () {
        var _this = this;
        var payloadDownloader = new downloader_1.Downloader(this.cardPayloadUrl);
        payloadDownloader.onSuccess = function () {
            _this._cardPayload = payloadDownloader.data;
            _this._cardPayloadDownloaded = true;
            _this.downloadCompleted();
        };
        payloadDownloader.onError = function () {
            _this._cardPayloadDownloaded = true;
            _this.downloadCompleted();
        };
        payloadDownloader.download();
        if (!Adaptive.isNullOrEmpty(this.sampleDataUrl)) {
            var sampleDataDownloader_1 = new downloader_1.Downloader(this.sampleDataUrl);
            sampleDataDownloader_1.onSuccess = function () {
                _this._sampleData = sampleDataDownloader_1.data;
                _this._sampleDataDownloaded = true;
                _this.downloadCompleted();
            };
            sampleDataDownloader_1.onError = function () {
                _this._sampleDataDownloaded = true;
                _this.downloadCompleted();
            };
            sampleDataDownloader_1.download();
        }
        else {
            this._sampleDataDownloaded = true;
            this.downloadCompleted();
        }
    };
    Object.defineProperty(CatalogueEntry.prototype, "cardPayload", {
        get: function () {
            return this._cardPayload;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CatalogueEntry.prototype, "sampleData", {
        get: function () {
            return this._sampleData;
        },
        enumerable: true,
        configurable: true
    });
    return CatalogueEntry;
}());
exports.CatalogueEntry = CatalogueEntry;
function parseCatalogue(input) {
    var entries = null;
    if (Array.isArray(input)) {
        entries = input;
    }
    else {
        entries = Array.isArray(input["entries"]) ? input["entried"] : null;
    }
    var result = [];
    if (entries != null) {
        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
            var entry = entries_1[_i];
            if (typeof entry === "object") {
                var displayName = Adaptive.getStringValue(entry["displayName"]);
                var cardPayloadUrl = Adaptive.getStringValue(entry["cardPayloadUrl"]);
                if (!Adaptive.isNullOrEmpty(displayName) && !Adaptive.isNullOrEmpty(cardPayloadUrl)) {
                    result.push(new CatalogueEntry(displayName, cardPayloadUrl, Adaptive.getStringValue(entry["dataSampleUrl"])));
                }
            }
        }
    }
    return result;
}
exports.parseCatalogue = parseCatalogue;


/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
exports.otherTestPayload = "{\n\t\"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n\t\"type\": \"AdaptiveCard\",\n\t\"version\": \"1.0\",\n\t\"body\": [\n\t\t{\n\t\t\t\"type\": \"ActionSet\",\n\t\t\t\"actions\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"Action.ShowCard\",\n\t\t\t\t\t\"title\": \"Set due date\",\n\t\t\t\t\t\"card\": {\n\t\t\t\t\t\t\"type\": \"AdaptiveCard\",\n\t\t\t\t\t\t\"body\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"Input.Date\",\n\t\t\t\t\t\t\t\t\"id\": \"dueDate\",\n\t\t\t\t\t\t\t\t\"title\": \"Select due date\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"Input.Text\",\n\t\t\t\t\t\t\t\t\"id\": \"comment\",\n\t\t\t\t\t\t\t\t\"isMultiline\": true,\n\t\t\t\t\t\t\t\t\"placeholder\": \"Add a comment\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"actions\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"type\": \"Action.OpenUrl\",\n\t\t\t\t\t\t\t\t\"title\": \"OK\",\n\t\t\t\t\t\t\t\t\"url\": \"https://adaptivecards.io\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"Action.OpenUrl\",\n\t\t\t\t\t\"title\": \"View\",\n\t\t\t\t\t\"url\": \"https://adaptivecards.io\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}";
exports.defaultPayload = "{\n    \"type\": \"AdaptiveCard\",\n    \"body\": [\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Medium\",\n            \"weight\": \"Bolder\",\n            \"text\": \"Publish Adaptive Card schema\"\n        },\n        {\n            \"type\": \"ColumnSet\",\n            \"columns\": [\n                {\n                    \"type\": \"Column\",\n                    \"items\": [\n                        {\n                            \"type\": \"Image\",\n                            \"style\": \"Person\",\n                            \"url\": \"https://pbs.twimg.com/profile_images/3647943215/d7f12830b3c17a5a9e4afcc370e3a37e_400x400.jpeg\",\n                            \"size\": \"Small\"\n                        }\n                    ],\n                    \"width\": \"auto\"\n                },\n                {\n                    \"type\": \"Column\",\n                    \"items\": [\n                        {\n                            \"type\": \"TextBlock\",\n                            \"weight\": \"Bolder\",\n                            \"text\": \"Matt Hidinger\",\n                            \"wrap\": true\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"spacing\": \"None\",\n                            \"text\": \"Created {{DATE(2017-02-14T06:08:39Z,SHORT)}}\",\n                            \"isSubtle\": true,\n                            \"wrap\": true\n                        }\n                    ],\n                    \"width\": \"stretch\"\n                }\n            ]\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"Now that we have defined the main rules and features of the format, we need to produce a schema and publish it to GitHub. The schema will be the starting point of our reference documentation.\",\n            \"wrap\": true\n        },\n        {\n            \"type\": \"FactSet\",\n            \"facts\": [\n                {\n                    \"title\": \"Board:\",\n                    \"value\": \"Adaptive Card\"\n                },\n                {\n                    \"title\": \"List:\",\n                    \"value\": \"Backlog\"\n                },\n                {\n                    \"title\": \"Assigned to:\",\n                    \"value\": \"Matt Hidinger\"\n                },\n                {\n                    \"title\": \"Due date:\",\n                    \"value\": \"Not set\"\n                }\n            ]\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.ShowCard\",\n            \"title\": \"Set due date\",\n            \"card\": {\n                \"type\": \"AdaptiveCard\",\n                \"body\": [\n                    {\n                        \"type\": \"Input.Date\",\n                        \"id\": \"dueDate\"\n                    },\n                    {\n                        \"type\": \"Input.Text\",\n                        \"id\": \"comment\",\n                        \"placeholder\": \"Add a comment\",\n                        \"isMultiline\": true\n                    }\n                ],\n                \"actions\": [\n                    {\n                        \"type\": \"Action.OpenUrl\",\n                        \"title\": \"OK\",\n                        \"url\": \"http://adaptivecards.io\"\n                    }\n                ],\n                \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\"\n            }\n        },\n        {\n            \"type\": \"Action.OpenUrl\",\n            \"title\": \"View\",\n            \"url\": \"http://adaptivecards.io\"\n        }\n    ],\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"version\": \"1.0\"\n}";
exports.defaultTemplatePayload = "{\n    \"type\": \"AdaptiveCard\",\n    \"body\": [\n        {\n            \"type\": \"Container\",\n            \"items\": [\n                {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"This example uses [Adaptive Card Templating](https://docs.microsoft.com/en-us/adaptive-cards/templating/) *(Preview)*\",\n                    \"size\": \"Medium\",\n                    \"wrap\": true\n                },\n                {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"Click the **Preview mode** toolbar button to see the card bound to the **Sample Data** in the lower-right. Sample Data helps design your card by simulating the real data.\",\n                    \"wrap\": true\n                },\n                {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"When you're ready to populate it with real data, use the Adaptive Card [templating SDKs](https://docs.microsoft.com/en-us/adaptive-cards/templating/sdk).\",\n                    \"wrap\": true\n                }\n            ],\n            \"style\": \"good\",\n            \"bleed\": true\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"size\": \"Medium\",\n            \"weight\": \"Bolder\",\n            \"text\": \"{title}\"\n        },\n        {\n            \"type\": \"ColumnSet\",\n            \"columns\": [\n                {\n                    \"type\": \"Column\",\n                    \"items\": [\n                        {\n                            \"type\": \"Image\",\n                            \"style\": \"Person\",\n                            \"url\": \"{creator.profileImage}\",\n                            \"size\": \"Small\"\n                        }\n                    ],\n                    \"width\": \"auto\"\n                },\n                {\n                    \"type\": \"Column\",\n                    \"items\": [\n                        {\n                            \"type\": \"TextBlock\",\n                            \"weight\": \"Bolder\",\n                            \"text\": \"{creator.name}\",\n                            \"wrap\": true\n                        },\n                        {\n                            \"type\": \"TextBlock\",\n                            \"spacing\": \"None\",\n                            \"text\": \"Created {{DATE({createdUtc},SHORT)}}\",\n                            \"isSubtle\": true,\n                            \"wrap\": true\n                        }\n                    ],\n                    \"width\": \"stretch\"\n                }\n            ]\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"{description}\",\n            \"wrap\": true\n        },\n        {\n            \"type\": \"FactSet\",\n            \"facts\": [\n                {\n                    \"$data\": \"{properties}\",\n                    \"title\": \"{key}:\",\n                    \"value\": \"{value}\"\n                }\n            ]\n        }\n    ],\n    \"actions\": [\n        {\n            \"type\": \"Action.ShowCard\",\n            \"title\": \"Set due date\",\n            \"card\": {\n                \"type\": \"AdaptiveCard\",\n                \"body\": [\n                    {\n                        \"type\": \"Input.Date\",\n                        \"id\": \"dueDate\"\n                    },\n                    {\n                        \"type\": \"Input.Text\",\n                        \"id\": \"comment\",\n                        \"placeholder\": \"Add a comment\",\n                        \"isMultiline\": true\n                    }\n                ],\n                \"actions\": [\n                    {\n                        \"type\": \"Action.Submit\",\n                        \"title\": \"OK\"\n                    }\n                ],\n                \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\"\n            }\n        },\n        {\n            \"type\": \"Action.OpenUrl\",\n            \"title\": \"View\",\n            \"url\": \"{viewUrl}\"\n        }\n    ],\n    \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n    \"version\": \"1.0\"\n}";
exports.defaultDataPayload = "{\n    \"title\": \"Publish Adaptive Card Schema\",\n    \"description\": \"Now that we have defined the main rules and features of the format, we need to produce a schema and publish it to GitHub. The schema will be the starting point of our reference documentation.\",\n    \"creator\": {\n        \"name\": \"Matt Hidinger\",\n        \"profileImage\": \"https://pbs.twimg.com/profile_images/3647943215/d7f12830b3c17a5a9e4afcc370e3a37e_400x400.jpeg\"\n    },\n    \"createdUtc\": \"2017-02-14T06:08:39Z\",\n    \"viewUrl\": \"https://adaptivecards.io\",\n    \"properties\": [\n        { \"key\": \"Board\", \"value\": \"Adaptive Cards\" },\n        { \"key\": \"List\", \"value\": \"Backlog\" },\n        { \"key\": \"Assigned to\", \"value\": \"Matt Hidinger\" },\n        { \"key\": \"Due date\", \"value\": \"Not set\" }\n    ]\n}";


/***/ }),

/***/ "./src/containers/bf-image/bf-image-container.ts":
/*!*******************************************************!*\
  !*** ./src/containers/bf-image/bf-image-container.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var host_container_1 = __webpack_require__(/*! ../host-container */ "./src/containers/host-container.ts");
var hostConfig = __webpack_require__(/*! ../../hostConfigs/render-to-image.json */ "./src/hostConfigs/render-to-image.json");
var BotFrameworkContainer = /** @class */ (function (_super) {
    __extends(BotFrameworkContainer, _super);
    function BotFrameworkContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BotFrameworkContainer.prototype.renderTo = function (hostElement) {
        this.cardHost.classList.add("bf-images-card");
        var frame = document.createElement("div");
        frame.className = "bf-images-frame";
        frame.appendChild(this.cardHost);
        hostElement.appendChild(frame);
    };
    BotFrameworkContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfig);
    };
    return BotFrameworkContainer;
}(host_container_1.HostContainer));
exports.BotFrameworkContainer = BotFrameworkContainer;


/***/ }),

/***/ "./src/containers/cortana-classic/cortana-classic-container.ts":
/*!*********************************************************************!*\
  !*** ./src/containers/cortana-classic/cortana-classic-container.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var host_container_1 = __webpack_require__(/*! ../host-container */ "./src/containers/host-container.ts");
var hostConfig = __webpack_require__(/*! ../../hostConfigs/cortana-skills-classic.json */ "./src/hostConfigs/cortana-skills-classic.json");
var CortanaClassicContainer = /** @class */ (function (_super) {
    __extends(CortanaClassicContainer, _super);
    function CortanaClassicContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CortanaClassicContainer.prototype.renderTo = function (hostElement) {
        this.cardHost.classList.add("cortana-card");
        var leftSide = document.createElement("div");
        leftSide.classList.add("cortana-leftside");
        var topLeft = document.createElement("div");
        topLeft.classList.add("cortana-topleft");
        var middleLeft = document.createElement("div");
        middleLeft.classList.add("cortana-middleleft");
        var bottomLeft = document.createElement("div");
        bottomLeft.classList.add("cortana-bottomleft");
        leftSide.appendChild(topLeft);
        leftSide.appendChild(middleLeft);
        leftSide.appendChild(bottomLeft);
        var rightSide = document.createElement("div");
        rightSide.classList.add("cortana-rightside");
        var header = document.createElement("div");
        header.classList.add("cortana-header");
        var searchBox = document.createElement("div");
        searchBox.classList.add("cortana-searchbox");
        var magnifyingGlass = document.createElement("div");
        magnifyingGlass.classList.add("cortana-searchbox-magnifyingglass");
        var searchBoxMiddle = document.createElement("div");
        searchBoxMiddle.classList.add("cortana-searchbox-middle");
        var microphone = document.createElement("div");
        microphone.classList.add("cortana-searchbox-microphone");
        searchBox.appendChild(magnifyingGlass);
        searchBox.appendChild(searchBoxMiddle);
        searchBox.appendChild(microphone);
        rightSide.appendChild(header);
        rightSide.appendChild(this.cardHost);
        rightSide.appendChild(searchBox);
        var frame = document.createElement("div");
        frame.classList.add("cortana-frame");
        frame.appendChild(leftSide);
        frame.appendChild(rightSide);
        hostElement.classList.add("cortana-outer-frame");
        hostElement.appendChild(frame);
    };
    CortanaClassicContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfig);
    };
    return CortanaClassicContainer;
}(host_container_1.HostContainer));
exports.CortanaClassicContainer = CortanaClassicContainer;


/***/ }),

/***/ "./src/containers/cortana/cortana-container.ts":
/*!*****************************************************!*\
  !*** ./src/containers/cortana/cortana-container.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var host_container_1 = __webpack_require__(/*! ../host-container */ "./src/containers/host-container.ts");
var hostConfigLight = __webpack_require__(/*! ../../hostConfigs/cortana-skills-light.json */ "./src/hostConfigs/cortana-skills-light.json");
var hostConfigDark = __webpack_require__(/*! ../../hostConfigs/cortana-skills-dark.json */ "./src/hostConfigs/cortana-skills-dark.json");
var BaseCortanaContainer = /** @class */ (function (_super) {
    __extends(BaseCortanaContainer, _super);
    function BaseCortanaContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaseCortanaContainer.prototype.renderTo = function (hostElement) {
        var frame = document.createElement("div");
        frame.appendChild(this.cardHost);
        hostElement.appendChild(frame);
    };
    return BaseCortanaContainer;
}(host_container_1.HostContainer));
var LightCortanaContainer = /** @class */ (function (_super) {
    __extends(LightCortanaContainer, _super);
    function LightCortanaContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LightCortanaContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfigLight);
    };
    return LightCortanaContainer;
}(BaseCortanaContainer));
exports.LightCortanaContainer = LightCortanaContainer;
var DarkCortanaContainer = /** @class */ (function (_super) {
    __extends(DarkCortanaContainer, _super);
    function DarkCortanaContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DarkCortanaContainer.prototype.getBackgroundColor = function () {
        return "#201E1F";
    };
    DarkCortanaContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfigDark);
    };
    return DarkCortanaContainer;
}(BaseCortanaContainer));
exports.DarkCortanaContainer = DarkCortanaContainer;


/***/ }),

/***/ "./src/containers/default/default-container.ts":
/*!*****************************************************!*\
  !*** ./src/containers/default/default-container.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var host_container_1 = __webpack_require__(/*! ../host-container */ "./src/containers/host-container.ts");
var DefaultContainer = /** @class */ (function (_super) {
    __extends(DefaultContainer, _super);
    function DefaultContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DefaultContainer.prototype.renderTo = function (hostElement) {
        hostElement.classList.add("card-frame");
        hostElement.appendChild(this.cardHost);
    };
    return DefaultContainer;
}(host_container_1.HostContainer));
exports.DefaultContainer = DefaultContainer;


/***/ }),

/***/ "./src/containers/host-container.ts":
/*!******************************************!*\
  !*** ./src/containers/host-container.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var hostConfig = __webpack_require__(/*! ../hostConfigs/sample.json */ "./src/hostConfigs/sample.json");
var HostContainer = /** @class */ (function () {
    function HostContainer(name, styleSheet) {
        this.supportsActionBar = false;
        this.name = name;
        this.styleSheet = styleSheet;
        this._cardHost = document.createElement("div");
        this._cardHost.className = "cardHost";
    }
    HostContainer.prototype.initialize = function () {
        Adaptive.AdaptiveCard.elementTypeRegistry.reset();
        Adaptive.AdaptiveCard.actionTypeRegistry.reset();
        Adaptive.AdaptiveCard.useMarkdownInRadioButtonAndCheckbox = true;
        Adaptive.AdaptiveCard.useAdvancedCardBottomTruncation = false;
        Adaptive.AdaptiveCard.useAdvancedTextBlockTruncation = true;
    };
    HostContainer.prototype.getBackgroundColor = function () {
        return "#F6F6F6";
    };
    HostContainer.prototype.parseElement = function (element, json) {
        // Do nothing in base implementation
    };
    HostContainer.prototype.anchorClicked = function (element, anchor) {
        // Not handled by the host container by default
        return false;
    };
    HostContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfig);
    };
    Object.defineProperty(HostContainer.prototype, "cardHost", {
        get: function () {
            return this._cardHost;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostContainer.prototype, "isFixedHeight", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return HostContainer;
}());
exports.HostContainer = HostContainer;


/***/ }),

/***/ "./src/containers/index.ts":
/*!*********************************!*\
  !*** ./src/containers/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
__export(__webpack_require__(/*! ./host-container */ "./src/containers/host-container.ts"));
__export(__webpack_require__(/*! ./default/default-container */ "./src/containers/default/default-container.ts"));
__export(__webpack_require__(/*! ./bf-image/bf-image-container */ "./src/containers/bf-image/bf-image-container.ts"));
__export(__webpack_require__(/*! ./cortana-classic/cortana-classic-container */ "./src/containers/cortana-classic/cortana-classic-container.ts"));
__export(__webpack_require__(/*! ./cortana/cortana-container */ "./src/containers/cortana/cortana-container.ts"));
__export(__webpack_require__(/*! ./notifications/toast-container */ "./src/containers/notifications/toast-container.ts"));
__export(__webpack_require__(/*! ./outlook/outlook-container */ "./src/containers/outlook/outlook-container.ts"));
__export(__webpack_require__(/*! ./skype/skype-container */ "./src/containers/skype/skype-container.ts"));
__export(__webpack_require__(/*! ./teams/teams-container */ "./src/containers/teams/teams-container.ts"));
__export(__webpack_require__(/*! ./timeline/timeline-container */ "./src/containers/timeline/timeline-container.ts"));
__export(__webpack_require__(/*! ./webchat/webchat-container */ "./src/containers/webchat/webchat-container.ts"));


/***/ }),

/***/ "./src/containers/notifications/toast-container.ts":
/*!*********************************************************!*\
  !*** ./src/containers/notifications/toast-container.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var host_container_1 = __webpack_require__(/*! ../host-container */ "./src/containers/host-container.ts");
var hostConfig = __webpack_require__(/*! ../../hostConfigs/windows-notification.json */ "./src/hostConfigs/windows-notification.json");
var ToastContainer = /** @class */ (function (_super) {
    __extends(ToastContainer, _super);
    function ToastContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToastContainer.prototype.renderTo = function (hostElement) {
        this.cardHost.classList.add("toast-card");
        var frame = document.createElement("div");
        frame.className = "toast-frame";
        frame.appendChild(this.cardHost);
        hostElement.appendChild(frame);
    };
    ToastContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfig);
    };
    return ToastContainer;
}(host_container_1.HostContainer));
exports.ToastContainer = ToastContainer;


/***/ }),

/***/ "./src/containers/outlook/outlook-container.ts":
/*!*****************************************************!*\
  !*** ./src/containers/outlook/outlook-container.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var host_container_1 = __webpack_require__(/*! ../host-container */ "./src/containers/host-container.ts");
var hostConfig = __webpack_require__(/*! ../../hostConfigs/outlook-desktop.json */ "./src/hostConfigs/outlook-desktop.json");
var OutlookContainer = /** @class */ (function (_super) {
    __extends(OutlookContainer, _super);
    function OutlookContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OutlookContainer.prototype.renderTo = function (hostElement) {
        hostElement.classList.add("outlook-frame");
        hostElement.appendChild(this.cardHost);
    };
    OutlookContainer.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        Adaptive.AdaptiveCard.actionTypeRegistry.unregisterType("Action.Submit");
        Adaptive.AdaptiveCard.actionTypeRegistry.registerType("Action.Http", function () { return new Adaptive.HttpAction(); });
        Adaptive.AdaptiveCard.useMarkdownInRadioButtonAndCheckbox = false;
    };
    OutlookContainer.prototype.parsePadding = function (json) {
        if (json) {
            if (typeof json === "string") {
                var uniformPadding = Adaptive.getEnumValue(Adaptive.Spacing, json, Adaptive.Spacing.None);
                return new Adaptive.PaddingDefinition(uniformPadding, uniformPadding, uniformPadding, uniformPadding);
            }
            else if (typeof json === "object") {
                return new Adaptive.PaddingDefinition(Adaptive.getEnumValue(Adaptive.Spacing, json["top"], Adaptive.Spacing.None), Adaptive.getEnumValue(Adaptive.Spacing, json["right"], Adaptive.Spacing.None), Adaptive.getEnumValue(Adaptive.Spacing, json["bottom"], Adaptive.Spacing.None), Adaptive.getEnumValue(Adaptive.Spacing, json["left"], Adaptive.Spacing.None));
            }
        }
        return null;
    };
    OutlookContainer.prototype.parseElement = function (element, json) {
        if (element instanceof Adaptive.AdaptiveCard) {
            var card = element;
            var actionArray = [];
            card["resources"] = { actions: actionArray };
            if (typeof json["resources"] === "object") {
                var actionResources = json["resources"]["actions"];
                for (var i = 0; i < actionResources.length; i++) {
                    var action = Adaptive.AdaptiveCard.actionTypeRegistry.createInstance(actionResources[i]["type"]);
                    if (action) {
                        action.parse(actionResources[i]);
                        action.setParent(card);
                        actionArray.push(action);
                    }
                }
            }
        }
        if (element instanceof Adaptive.Image) {
            element.backgroundColor = json["backgroundColor"];
        }
        if (element instanceof Adaptive.Container) {
            var padding = this.parsePadding(json["padding"]);
            if (padding) {
                element.padding = padding;
            }
        }
        if (element instanceof Adaptive.ColumnSet) {
            var padding = this.parsePadding(json["padding"]);
            if (padding) {
                element.padding = padding;
            }
        }
    };
    OutlookContainer.prototype.anchorClicked = function (element, anchor) {
        var regEx = /^action:([a-z0-9]+)$/ig;
        var rootCard = element.getRootElement();
        var matches = regEx.exec(anchor.href);
        if (matches) {
            var actionId = matches[1];
            if (rootCard) {
                var actionArray = rootCard["resources"]["actions"];
                for (var i = 0; i < actionArray.length; i++) {
                    if (actionArray[i].id == actionId) {
                        actionArray[i].execute();
                        return true;
                    }
                }
            }
        }
        return false;
    };
    OutlookContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfig);
    };
    return OutlookContainer;
}(host_container_1.HostContainer));
exports.OutlookContainer = OutlookContainer;


/***/ }),

/***/ "./src/containers/skype/skype-container.ts":
/*!*************************************************!*\
  !*** ./src/containers/skype/skype-container.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var host_container_1 = __webpack_require__(/*! ../host-container */ "./src/containers/host-container.ts");
var hostConfig = __webpack_require__(/*! ../../hostConfigs/skype.json */ "./src/hostConfigs/skype.json");
var SkypeContainer = /** @class */ (function (_super) {
    __extends(SkypeContainer, _super);
    function SkypeContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SkypeContainer.prototype.renderTo = function (hostElement) {
        this.cardHost.classList.add("skype-card");
        var frame = document.createElement("div");
        frame.className = "skype-frame";
        // Draw the hexagon bot logo
        var hexagonOuter = document.createElement("div");
        hexagonOuter.className = "skype-hexagon-outer";
        var hexagonInner = document.createElement("div");
        hexagonInner.className = "skype-hexagon-inner";
        var botLogo = document.createElement("div");
        botLogo.className = "skype-bot-logo";
        hexagonOuter.appendChild(hexagonInner);
        hexagonInner.appendChild(botLogo);
        frame.appendChild(hexagonOuter);
        frame.appendChild(this.cardHost);
        hostElement.appendChild(frame);
    };
    SkypeContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfig);
    };
    return SkypeContainer;
}(host_container_1.HostContainer));
exports.SkypeContainer = SkypeContainer;


/***/ }),

/***/ "./src/containers/teams/teams-container.ts":
/*!*************************************************!*\
  !*** ./src/containers/teams/teams-container.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var host_container_1 = __webpack_require__(/*! ../host-container */ "./src/containers/host-container.ts");
var hostConfigLight = __webpack_require__(/*! ../../hostConfigs/microsoft-teams-light.json */ "./src/hostConfigs/microsoft-teams-light.json");
var hostConfigDark = __webpack_require__(/*! ../../hostConfigs/microsoft-teams-dark.json */ "./src/hostConfigs/microsoft-teams-dark.json");
var BaseTeamsContainer = /** @class */ (function (_super) {
    __extends(BaseTeamsContainer, _super);
    function BaseTeamsContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaseTeamsContainer.prototype.renderTo = function (hostElement) {
        var outerFrame = document.createElement("div");
        outerFrame.className = "teams-frame";
        // Draw the hexagon bot logo
        var hexagonOuter = document.createElement("div");
        hexagonOuter.className = "teams-hexagon-outer";
        var hexagonInner = document.createElement("div");
        hexagonInner.className = "teams-hexagon-inner";
        var botLogo = document.createElement("div");
        botLogo.className = "teams-bot-logo";
        hexagonOuter.appendChild(hexagonInner);
        hexagonInner.appendChild(botLogo);
        outerFrame.appendChild(hexagonOuter);
        var innerFrame = document.createElement("div");
        innerFrame.className = "teams-inner-frame";
        this.cardHost.classList.add("teams-card");
        var botNameAndTime = document.createElement("div");
        botNameAndTime.className = "teams-botNameAndTime";
        botNameAndTime.innerText = "Test Bot    2:36 PM";
        innerFrame.appendChild(botNameAndTime);
        innerFrame.appendChild(this.cardHost);
        outerFrame.appendChild(innerFrame);
        hostElement.appendChild(outerFrame);
    };
    return BaseTeamsContainer;
}(host_container_1.HostContainer));
var LightTeamsContainer = /** @class */ (function (_super) {
    __extends(LightTeamsContainer, _super);
    function LightTeamsContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LightTeamsContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfigLight);
    };
    return LightTeamsContainer;
}(BaseTeamsContainer));
exports.LightTeamsContainer = LightTeamsContainer;
var DarkTeamsContainer = /** @class */ (function (_super) {
    __extends(DarkTeamsContainer, _super);
    function DarkTeamsContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DarkTeamsContainer.prototype.getBackgroundColor = function () {
        return "#201E1F";
    };
    DarkTeamsContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfigDark);
    };
    return DarkTeamsContainer;
}(BaseTeamsContainer));
exports.DarkTeamsContainer = DarkTeamsContainer;


/***/ }),

/***/ "./src/containers/timeline/timeline-container.ts":
/*!*******************************************************!*\
  !*** ./src/containers/timeline/timeline-container.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var host_container_1 = __webpack_require__(/*! ../host-container */ "./src/containers/host-container.ts");
var hostConfig = __webpack_require__(/*! ../../hostConfigs/windows-timeline.json */ "./src/hostConfigs/windows-timeline.json");
var TimelineContainer = /** @class */ (function (_super) {
    __extends(TimelineContainer, _super);
    function TimelineContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TimelineContainer.prototype.initialize = function () {
        Adaptive.AdaptiveCard.elementTypeRegistry.reset();
        Adaptive.AdaptiveCard.actionTypeRegistry.reset();
        Adaptive.AdaptiveCard.useMarkdownInRadioButtonAndCheckbox = true;
        Adaptive.AdaptiveCard.useAdvancedCardBottomTruncation = true;
        Adaptive.AdaptiveCard.useAdvancedTextBlockTruncation = true;
    };
    TimelineContainer.prototype.renderTo = function (hostElement) {
        var target = document.getElementById("designerHost");
        var frame = document.createElement("div");
        frame.className = "timeline-frame";
        target.appendChild(frame);
        var cardContainer = document.createElement("div");
        cardContainer.className = "timeline-card";
        frame.appendChild(cardContainer);
        this.cardHost.style.height = "100%";
        this.cardHost.style.width = "100%";
        this.cardHost.style.overflow = "hidden";
        cardContainer.appendChild(this.cardHost);
        hostElement.appendChild(frame);
    };
    TimelineContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfig);
    };
    Object.defineProperty(TimelineContainer.prototype, "isFixedHeight", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    return TimelineContainer;
}(host_container_1.HostContainer));
exports.TimelineContainer = TimelineContainer;


/***/ }),

/***/ "./src/containers/webchat/webchat-container.ts":
/*!*****************************************************!*\
  !*** ./src/containers/webchat/webchat-container.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var host_container_1 = __webpack_require__(/*! ../host-container */ "./src/containers/host-container.ts");
var hostConfig = __webpack_require__(/*! ../../hostConfigs/webchat.json */ "./src/hostConfigs/webchat.json");
var WebChatContainer = /** @class */ (function (_super) {
    __extends(WebChatContainer, _super);
    function WebChatContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WebChatContainer.prototype.renderTo = function (hostElement) {
        this.cardHost.classList.add("webChatOuterContainer");
        var frame = document.createElement("div");
        frame.className = "webChatInnerContainer";
        frame.appendChild(this.cardHost);
        hostElement.appendChild(frame);
    };
    WebChatContainer.prototype.getHostConfig = function () {
        return new Adaptive.HostConfig(hostConfig);
    };
    return WebChatContainer;
}(host_container_1.HostContainer));
exports.WebChatContainer = WebChatContainer;


/***/ }),

/***/ "./src/data-treeitem.ts":
/*!******************************!*\
  !*** ./src/data-treeitem.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var base_tree_item_1 = __webpack_require__(/*! ./base-tree-item */ "./src/base-tree-item.ts");
var DataTreeItem = /** @class */ (function (_super) {
    __extends(DataTreeItem, _super);
    function DataTreeItem(field) {
        var _this = _super.call(this) || this;
        _this._children = null;
        _this.field = field;
        _this._level = 0;
        var currentField = field;
        while (currentField) {
            _this._level++;
            currentField = currentField.parent;
        }
        return _this;
    }
    DataTreeItem.prototype.buildChildList = function () {
        if (!this._children) {
            this._children = [];
            var properties = this.field.children;
            if (properties) {
                var keys = Object.keys(properties);
                for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                    var key = keys_1[_i];
                    this._children.push(new DataTreeItem(properties[key]));
                }
            }
        }
    };
    DataTreeItem.prototype.getLabelText = function () {
        return this.field.name;
    };
    DataTreeItem.prototype.getAdditionalText = function () {
        return this.field.typeName;
    };
    DataTreeItem.prototype.getAdditionalTextClass = function () {
        return "acd-data-tree-item-additionalText";
    };
    DataTreeItem.prototype.isDraggable = function () {
        return true;
    };
    DataTreeItem.prototype.getChildCount = function () {
        this.buildChildList();
        return this._children.length;
    };
    DataTreeItem.prototype.getChildAt = function (index) {
        this.buildChildList();
        return this._children[index];
    };
    return DataTreeItem;
}(base_tree_item_1.BaseTreeItem));
exports.DataTreeItem = DataTreeItem;


/***/ }),

/***/ "./src/data.ts":
/*!*********************!*\
  !*** ./src/data.ts ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ValueKind;
(function (ValueKind) {
    ValueKind[ValueKind["String"] = 0] = "String";
    ValueKind[ValueKind["Boolean"] = 1] = "Boolean";
    ValueKind[ValueKind["Number"] = 2] = "Number";
})(ValueKind = exports.ValueKind || (exports.ValueKind = {}));
var DataType = /** @class */ (function () {
    function DataType(owner) {
        this.owner = owner;
    }
    DataType.create = function (parent, value) {
        if (typeof value === "string") {
            return new ValueData(parent, ValueKind.String);
        }
        else if (typeof value === "boolean") {
            return new ValueData(parent, ValueKind.Boolean);
        }
        else if (typeof value === "number") {
            return new ValueData(parent, ValueKind.Number);
        }
        else if (typeof value === "object") {
            if (Array.isArray(value)) {
                return ArrayData.create(parent, value);
            }
            else {
                return ObjectData.create(parent, value);
            }
        }
        else {
            throw new Error("Unsupported data type: " + typeof value);
        }
    };
    DataType.prototype.getChildFields = function () {
        return null;
    };
    DataType.prototype.qualifyFieldName = function (fieldName, fieldIsLeaf) {
        return fieldName;
    };
    Object.defineProperty(DataType.prototype, "isCollection", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return DataType;
}());
exports.DataType = DataType;
var ValueData = /** @class */ (function (_super) {
    __extends(ValueData, _super);
    function ValueData(owner, valueKind) {
        var _this = _super.call(this, owner) || this;
        _this.owner = owner;
        _this.valueKind = valueKind;
        return _this;
    }
    Object.defineProperty(ValueData.prototype, "typeName", {
        get: function () {
            return ValueKind[this.valueKind];
        },
        enumerable: true,
        configurable: true
    });
    return ValueData;
}(DataType));
exports.ValueData = ValueData;
var ArrayData = /** @class */ (function (_super) {
    __extends(ArrayData, _super);
    function ArrayData(owner) {
        var _this = _super.call(this, owner) || this;
        _this.owner = owner;
        _this.dataType = undefined;
        return _this;
    }
    ArrayData.create = function (parent, input) {
        if (!Array.isArray(input)) {
            throw new Error("Input is not an array.");
        }
        var result = new ArrayData(parent);
        if (input.length > 0) {
            result.dataType = DataType.create(parent, input[0]);
        }
        return result;
    };
    ArrayData.prototype.getChildFields = function () {
        return this.dataType.getChildFields();
    };
    ArrayData.prototype.qualifyFieldName = function (fieldName, fieldIsLeaf) {
        if (!fieldIsLeaf) {
            return fieldName + "[0]";
        }
        else {
            return _super.prototype.qualifyFieldName.call(this, fieldName, fieldIsLeaf);
        }
    };
    Object.defineProperty(ArrayData.prototype, "isCollection", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayData.prototype, "typeName", {
        get: function () {
            return "Array";
        },
        enumerable: true,
        configurable: true
    });
    return ArrayData;
}(DataType));
exports.ArrayData = ArrayData;
var ObjectData = /** @class */ (function (_super) {
    __extends(ObjectData, _super);
    function ObjectData(owner) {
        var _this = _super.call(this, owner) || this;
        _this.owner = owner;
        _this.fields = [];
        return _this;
    }
    ObjectData.create = function (parent, input) {
        var result = new ObjectData(parent);
        for (var _i = 0, _a = Object.keys(input); _i < _a.length; _i++) {
            var key = _a[_i];
            var field = new FieldDefinition(parent);
            field.dataType = DataType.create(field, input[key]);
            field.name = key;
            result.fields.push(field);
        }
        return result;
    };
    ObjectData.prototype.getChildFields = function () {
        return this.fields;
    };
    Object.defineProperty(ObjectData.prototype, "typeName", {
        get: function () {
            return "Object";
        },
        enumerable: true,
        configurable: true
    });
    return ObjectData;
}(DataType));
exports.ObjectData = ObjectData;
var FieldDefinition = /** @class */ (function () {
    function FieldDefinition(parent) {
        this.parent = parent;
    }
    FieldDefinition.create = function (input) {
        var field = new FieldDefinition(null);
        field.name = "$root";
        field.dataType = DataType.create(field, input);
        return field;
    };
    FieldDefinition.prototype.getPath = function (asLeaf) {
        if (asLeaf === void 0) { asLeaf = true; }
        var result = this.qualifiedName(asLeaf);
        var currentField = this.parent;
        while (currentField) {
            result = currentField.qualifiedName(false) + "." + result;
            currentField = currentField.parent;
        }
        return result;
    };
    FieldDefinition.prototype.qualifiedName = function (asLeaf) {
        return this.dataType.qualifyFieldName(this.name, asLeaf);
    };
    Object.defineProperty(FieldDefinition.prototype, "children", {
        get: function () {
            return this.dataType.getChildFields();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldDefinition.prototype, "isCollection", {
        get: function () {
            return this.dataType.isCollection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldDefinition.prototype, "typeName", {
        get: function () {
            return this.dataType.typeName;
        },
        enumerable: true,
        configurable: true
    });
    return FieldDefinition;
}());
exports.FieldDefinition = FieldDefinition;


/***/ }),

/***/ "./src/designer-peer-treeitem.ts":
/*!***************************************!*\
  !*** ./src/designer-peer-treeitem.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var base_tree_item_1 = __webpack_require__(/*! ./base-tree-item */ "./src/base-tree-item.ts");
var DesignerPeerTreeItem = /** @class */ (function (_super) {
    __extends(DesignerPeerTreeItem, _super);
    function DesignerPeerTreeItem(owner) {
        var _this = _super.call(this) || this;
        _this.owner = owner;
        _this.owner.onParentChanged = function (sender) {
            _this.computeLevel();
        };
        _this.computeLevel();
        return _this;
    }
    DesignerPeerTreeItem.prototype.computeLevel = function () {
        this._level = 0;
        var peer = this.owner;
        while (peer) {
            this._level++;
            peer = peer.parent;
        }
        for (var i = 0; i < this.getChildCount(); i++) {
            this.getChildAt(i).computeLevel();
        }
    };
    DesignerPeerTreeItem.prototype.getIconClass = function () {
        return this.owner.registration.iconClass;
    };
    DesignerPeerTreeItem.prototype.getLabelText = function () {
        return this.owner.getCardObject().getJsonTypeName();
    };
    DesignerPeerTreeItem.prototype.getAdditionalText = function () {
        return this.owner.getTreeItemText();
    };
    DesignerPeerTreeItem.prototype.selected = function () {
        this.owner.isSelected = true;
    };
    DesignerPeerTreeItem.prototype.getChildCount = function () {
        return this.owner.getChildCount();
    };
    DesignerPeerTreeItem.prototype.getChildAt = function (index) {
        return this.owner.getChildAt(index).treeItem;
    };
    DesignerPeerTreeItem.prototype.updateLayout = function () {
        _super.prototype.updateLayout.call(this);
        this.isSelected = this.owner.isSelected;
    };
    return DesignerPeerTreeItem;
}(base_tree_item_1.BaseTreeItem));
exports.DesignerPeerTreeItem = DesignerPeerTreeItem;


/***/ }),

/***/ "./src/designer-peers.ts":
/*!*******************************!*\
  !*** ./src/designer-peers.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var Controls = __webpack_require__(/*! adaptivecards-controls */ "../adaptivecards-controls/lib/adaptivecards-controls.js");
var draggable_element_1 = __webpack_require__(/*! ./draggable-element */ "./src/draggable-element.ts");
var peer_command_1 = __webpack_require__(/*! ./peer-command */ "./src/peer-command.ts");
var card_designer_surface_1 = __webpack_require__(/*! ./card-designer-surface */ "./src/card-designer-surface.ts");
var designer_peer_treeitem_1 = __webpack_require__(/*! ./designer-peer-treeitem */ "./src/designer-peer-treeitem.ts");
var miscellaneous_1 = __webpack_require__(/*! ./miscellaneous */ "./src/miscellaneous.ts");
var shared_1 = __webpack_require__(/*! ./shared */ "./src/shared.ts");
var DesignerPeerInplaceEditor = /** @class */ (function () {
    function DesignerPeerInplaceEditor() {
    }
    return DesignerPeerInplaceEditor;
}());
exports.DesignerPeerInplaceEditor = DesignerPeerInplaceEditor;
var CardElementPeerInplaceEditor = /** @class */ (function (_super) {
    __extends(CardElementPeerInplaceEditor, _super);
    function CardElementPeerInplaceEditor(cardElement) {
        var _this = _super.call(this) || this;
        _this.cardElement = cardElement;
        return _this;
    }
    return CardElementPeerInplaceEditor;
}(DesignerPeerInplaceEditor));
exports.CardElementPeerInplaceEditor = CardElementPeerInplaceEditor;
var DesignerPeerRegistrationBase = /** @class */ (function () {
    function DesignerPeerRegistrationBase(category, iconClass) {
        if (iconClass === void 0) { iconClass = null; }
        this.category = category;
        this.iconClass = iconClass;
    }
    return DesignerPeerRegistrationBase;
}());
exports.DesignerPeerRegistrationBase = DesignerPeerRegistrationBase;
var DesignerPeerRegistration = /** @class */ (function (_super) {
    __extends(DesignerPeerRegistration, _super);
    function DesignerPeerRegistration(sourceType, peerType, category, iconClass) {
        if (iconClass === void 0) { iconClass = null; }
        var _this = _super.call(this, category, iconClass) || this;
        _this.sourceType = sourceType;
        _this.peerType = peerType;
        return _this;
    }
    return DesignerPeerRegistration;
}(DesignerPeerRegistrationBase));
exports.DesignerPeerRegistration = DesignerPeerRegistration;
var PropertySheetCategory = /** @class */ (function () {
    function PropertySheetCategory(name) {
        this.name = name;
        this._entries = [];
    }
    PropertySheetCategory.prototype.render = function (container, context, displayCategoryName) {
        var entriesToRender = [];
        for (var _i = 0, _a = this._entries; _i < _a.length; _i++) {
            var entry = _a[_i];
            if (shared_1.isVersionLessOrEqual(entry.targetVersion, context.targetVersion)) {
                entriesToRender.push(entry);
            }
        }
        if (entriesToRender.length > 0) {
            if (displayCategoryName) {
                var header = new Adaptive.TextBlock();
                header.separator = true;
                header.text = "**" + (this.name === PropertySheetCategory.DefaultCategory ? context.peer.getCardObject().getJsonTypeName() : this.name) + "**";
                container.addItem(header);
            }
            for (var _b = 0, entriesToRender_1 = entriesToRender; _b < entriesToRender_1.length; _b++) {
                var entry = entriesToRender_1[_b];
                if (shared_1.isVersionLessOrEqual(entry.targetVersion, context.targetVersion)) {
                    container.addItem(entry.render(context));
                }
            }
        }
    };
    PropertySheetCategory.prototype.add = function () {
        var entries = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            entries[_i] = arguments[_i];
        }
        this._entries = this._entries.concat(entries);
    };
    PropertySheetCategory.prototype.remove = function () {
        var entries = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            entries[_i] = arguments[_i];
        }
        for (var _a = 0, entries_1 = entries; _a < entries_1.length; _a++) {
            var entry = entries_1[_a];
            var index = void 0;
            do {
                var index_1 = this._entries.indexOf(entry);
                if (index_1 >= 0) {
                    this._entries.splice(index_1, 1);
                }
            } while (index >= 0);
        }
    };
    PropertySheetCategory.prototype.getEntryAt = function (index) {
        return this._entries[index];
    };
    Object.defineProperty(PropertySheetCategory.prototype, "length", {
        get: function () {
            return this._entries.length;
        },
        enumerable: true,
        configurable: true
    });
    PropertySheetCategory.DefaultCategory = "__defaultCategory";
    PropertySheetCategory.LayoutCategory = "Layout";
    PropertySheetCategory.StyleCategory = "Style";
    PropertySheetCategory.SelectionAction = "Selection action";
    PropertySheetCategory.InlineAction = "Inline action";
    return PropertySheetCategory;
}());
exports.PropertySheetCategory = PropertySheetCategory;
var PropertySheet = /** @class */ (function () {
    function PropertySheet(displayCategoryNames) {
        if (displayCategoryNames === void 0) { displayCategoryNames = true; }
        this.displayCategoryNames = displayCategoryNames;
        this._categories = {};
        this._categories[PropertySheetCategory.DefaultCategory] = new PropertySheetCategory(PropertySheetCategory.DefaultCategory);
        this._categories[PropertySheetCategory.LayoutCategory] = new PropertySheetCategory(PropertySheetCategory.LayoutCategory);
        this._categories[PropertySheetCategory.StyleCategory] = new PropertySheetCategory(PropertySheetCategory.StyleCategory);
    }
    PropertySheet.prototype.add = function (categoryName) {
        var entries = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            entries[_i - 1] = arguments[_i];
        }
        var category = this._categories[categoryName];
        if (!category) {
            category = new PropertySheetCategory(categoryName);
            this._categories[categoryName] = category;
        }
        category.add.apply(category, entries);
    };
    PropertySheet.prototype.remove = function () {
        var _a;
        var entries = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            entries[_i] = arguments[_i];
        }
        for (var _b = 0, _c = Object.keys(this._categories); _b < _c.length; _b++) {
            var categoryName = _c[_b];
            (_a = this._categories[categoryName]).remove.apply(_a, entries);
        }
    };
    PropertySheet.prototype.render = function (container, context) {
        for (var _i = 0, _a = Object.keys(this._categories); _i < _a.length; _i++) {
            var categoryName = _a[_i];
            this._categories[categoryName].render(container, context, this.displayCategoryNames);
        }
    };
    return PropertySheet;
}());
exports.PropertySheet = PropertySheet;
var DesignerPeer = /** @class */ (function (_super) {
    __extends(DesignerPeer, _super);
    function DesignerPeer(parent, designerSurface, registration) {
        var _this = _super.call(this) || this;
        _this._children = [];
        _this._isSelected = false;
        _this._inplaceEditor = null;
        _this._parent = parent;
        if (!registration) {
            alert(_this.constructor.name);
        }
        _this.registration = registration;
        _this.designerSurface = designerSurface;
        _this.treeItem = new designer_peer_treeitem_1.DesignerPeerTreeItem(_this);
        return _this;
    }
    DesignerPeer.prototype.closeInplaceEditor = function (applyChanges) {
        if (this._inplaceEditor) {
            if (applyChanges) {
                this._inplaceEditor.applyChanges();
                this.changed(true);
            }
            this._inplaceEditor = null;
            this._inplaceEditorOverlay.remove();
        }
    };
    DesignerPeer.prototype.tryOpenInplaceEditor = function () {
        var _this = this;
        this._inplaceEditor = this.createInplaceEditor();
        if (this._inplaceEditor) {
            this._inplaceEditor.onClose = function (applyChanges) {
                _this.closeInplaceEditor(applyChanges);
            };
            this._inplaceEditorOverlay = document.createElement("div");
            this._inplaceEditorOverlay.tabIndex = 0;
            this._inplaceEditorOverlay.style.zIndex = "600";
            this._inplaceEditorOverlay.style.backgroundColor = "transparent";
            this._inplaceEditorOverlay.style.position = "absolute";
            this._inplaceEditorOverlay.style.left = "0";
            this._inplaceEditorOverlay.style.top = "0";
            this._inplaceEditorOverlay.style.width = document.documentElement.scrollWidth + "px";
            this._inplaceEditorOverlay.style.height = document.documentElement.scrollHeight + "px";
            this._inplaceEditorOverlay.onfocus = function (e) { _this.closeInplaceEditor(true); };
            var boundingRect = this.getCardObjectBoundingRect();
            var inplaceEditorHost = document.createElement("div");
            inplaceEditorHost.className = "acd-inplace-editor-host";
            inplaceEditorHost.style.left = Math.floor(boundingRect.left + pageXOffset) + "px";
            inplaceEditorHost.style.top = Math.floor(boundingRect.top + pageYOffset) + "px";
            inplaceEditorHost.style.width = Math.ceil(boundingRect.width) + "px";
            inplaceEditorHost.style.height = Math.ceil(boundingRect.height) + "px";
            var renderedInplaceEditor = this._inplaceEditor.render();
            renderedInplaceEditor.classList.add("acd-inplace-editor");
            renderedInplaceEditor.tabIndex = 0;
            renderedInplaceEditor.onblur = function (e) { _this.closeInplaceEditor(true); };
            inplaceEditorHost.appendChild(renderedInplaceEditor);
            this._inplaceEditorOverlay.appendChild(inplaceEditorHost);
            document.body.appendChild(this._inplaceEditorOverlay);
            this._inplaceEditor.initialize();
            return true;
        }
        return false;
    };
    DesignerPeer.prototype.click = function (e) {
        _super.prototype.click.call(this, e);
        this.isSelected = true;
    };
    DesignerPeer.prototype.doubleClick = function (e) {
        _super.prototype.doubleClick.call(this, e);
        this.tryOpenInplaceEditor();
    };
    DesignerPeer.prototype.isContainer = function () {
        return false;
    };
    DesignerPeer.prototype.getToolTip = function () {
        return null;
    };
    DesignerPeer.prototype.internalAddCommands = function (commands) {
        // Do nothing in base implementation
    };
    DesignerPeer.prototype.internalRender = function () {
        var element = document.createElement("div");
        element.classList.add("acd-peer");
        var toolTip = this.getToolTip();
        if (toolTip) {
            element.title = toolTip;
        }
        if (this.isContainer()) {
            element.classList.add("container");
        }
        element.style.position = "absolute";
        return element;
    };
    DesignerPeer.prototype.internalUpdateCssStyles = function () {
        if (this.isSelected) {
            this.renderedElement.classList.add("selected");
        }
        else {
            this.renderedElement.classList.remove("selected");
        }
        if (this.dragging) {
            this.renderedElement.classList.add("dragging");
        }
        else {
            this.renderedElement.classList.remove("dragging");
        }
    };
    DesignerPeer.prototype.peerAdded = function (newPeer) {
        this.changed(false);
        if (this.onPeerAdded) {
            this.onPeerAdded(this, newPeer);
        }
    };
    DesignerPeer.prototype.peerRemoved = function (peer) {
        if (this.onPeerRemoved) {
            this.onPeerRemoved(peer);
        }
    };
    DesignerPeer.prototype.internalUpdateLayout = function () {
        if (this.renderedElement) {
            var clientRect = this.getBoundingRect();
            this.renderedElement.style.width = clientRect.width + "px";
            this.renderedElement.style.height = clientRect.height + "px";
            this.renderedElement.style.left = clientRect.left + "px";
            this.renderedElement.style.top = clientRect.top + "px";
        }
    };
    DesignerPeer.prototype.createInplaceEditor = function () {
        return null;
    };
    DesignerPeer.prototype.internalGetTreeItemText = function () {
        return null;
    };
    DesignerPeer.prototype.changed = function (updatePropertySheet) {
        if (this.onChanged) {
            this.onChanged(this, updatePropertySheet);
        }
    };
    DesignerPeer.prototype.getTreeItemText = function () {
        return this.internalGetTreeItemText();
    };
    DesignerPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        // Do nothing in base implementation
    };
    DesignerPeer.prototype.canDrop = function (peer) {
        return false;
    };
    DesignerPeer.prototype.canBeRemoved = function () {
        return true;
    };
    DesignerPeer.prototype.tryDrop = function (peer, insertionPoint) {
        return false;
    };
    DesignerPeer.prototype.insertChild = function (peer, index) {
        if (index === void 0) { index = -1; }
        if (index == -1) {
            this._children.push(peer);
        }
        else {
            this._children.splice(index, 0, peer);
        }
        peer.parent = this;
        this.peerAdded(peer);
    };
    DesignerPeer.prototype.removeChild = function (peer) {
        var index = this._children.indexOf(peer);
        if (index >= 0) {
            peer.parent = null;
            this._children.splice(index, 1);
        }
    };
    DesignerPeer.prototype.getChildCount = function () {
        return this._children.length;
    };
    DesignerPeer.prototype.getChildAt = function (index) {
        return this._children[index];
    };
    DesignerPeer.prototype.getCommands = function (promoteParentCommands) {
        if (promoteParentCommands === void 0) { promoteParentCommands = false; }
        var result = [];
        this.internalAddCommands(result);
        if (promoteParentCommands && this.parent) {
            var parentCommands = this.parent.getCommands();
            for (var _i = 0, parentCommands_1 = parentCommands; _i < parentCommands_1.length; _i++) {
                var command = parentCommands_1[_i];
                if (command.isPromotable) {
                    result.push(command);
                }
            }
        }
        return result;
    };
    DesignerPeer.prototype.remove = function (onlyFromCard, removeChildren) {
        if (removeChildren) {
            while (this._children.length > 0) {
                this._children[0].remove(onlyFromCard, removeChildren);
            }
        }
        var result = this.internalRemove();
        if (result && !onlyFromCard) {
            if (this.parent) {
                this.parent.removeChild(this);
            }
            this.removeElementsFromDesignerSurface();
            this.peerRemoved(this);
        }
        return result;
    };
    DesignerPeer.prototype.addElementsToDesignerSurface = function (designerSurface, processChildren) {
        if (processChildren === void 0) { processChildren = false; }
        designerSurface.appendChild(this.renderedElement);
        if (processChildren) {
            for (var i = 0; i < this.getChildCount(); i++) {
                this.getChildAt(i).addElementsToDesignerSurface(designerSurface, processChildren);
            }
        }
    };
    DesignerPeer.prototype.removeElementsFromDesignerSurface = function (processChildren) {
        if (processChildren === void 0) { processChildren = false; }
        this.renderedElement.remove();
        if (processChildren) {
            for (var i = 0; i < this.getChildCount(); i++) {
                this.getChildAt(i).removeElementsFromDesignerSurface(processChildren);
            }
        }
    };
    DesignerPeer.prototype.buildPropertySheetCard = function (targetVersion) {
        var card = new Adaptive.AdaptiveCard();
        card.padding = new Adaptive.PaddingDefinition(Adaptive.Spacing.Small, Adaptive.Spacing.Small, Adaptive.Spacing.Small, Adaptive.Spacing.Small);
        var propertySheet = new PropertySheet();
        this.populatePropertySheet(propertySheet);
        propertySheet.render(card, new PropertySheetContext(targetVersion, this));
        var actionSet = new Adaptive.ActionSet();
        var commands = this.getCommands(true);
        var _loop_1 = function (command) {
            var action = new Adaptive.SubmitAction();
            action.title = command.name;
            action.onExecute = function (sender) {
                command.execute(command, action.renderedElement);
            };
            actionSet.addAction(action);
        };
        for (var _i = 0, commands_1 = commands; _i < commands_1.length; _i++) {
            var command = commands_1[_i];
            _loop_1(command);
        }
        actionSet.separator = true;
        card.addItem(actionSet);
        return card;
    };
    DesignerPeer.prototype.scrollIntoView = function () {
        if (this.renderedElement) {
            this.renderedElement.scrollIntoView();
        }
        if (this.treeItem && this.treeItem.renderedElement) {
            this.treeItem.renderedElement.scrollIntoView();
        }
    };
    Object.defineProperty(DesignerPeer.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        set: function (value) {
            this._parent = value;
            if (this.onParentChanged) {
                this.onParentChanged(this);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DesignerPeer.prototype, "isSelected", {
        get: function () {
            return this._isSelected;
        },
        set: function (value) {
            if (value != this._isSelected) {
                this._isSelected = value;
                this.updateLayout();
                this.treeItem.updateLayout();
                if (this.onSelectedChanged) {
                    this.onSelectedChanged(this);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    return DesignerPeer;
}(draggable_element_1.DraggableElement));
exports.DesignerPeer = DesignerPeer;
var PropertySheetContext = /** @class */ (function () {
    function PropertySheetContext(targetVersion, peer, target) {
        if (target === void 0) { target = undefined; }
        this.targetVersion = targetVersion;
        this.peer = peer;
        this._target = undefined;
        this._target = target;
    }
    Object.defineProperty(PropertySheetContext.prototype, "target", {
        get: function () {
            return this._target != undefined ? this._target : this.peer.getCardObject();
        },
        enumerable: true,
        configurable: true
    });
    return PropertySheetContext;
}());
exports.PropertySheetContext = PropertySheetContext;
var PropertySheetEntry = /** @class */ (function () {
    function PropertySheetEntry(targetVersion) {
        this.targetVersion = targetVersion;
    }
    return PropertySheetEntry;
}());
exports.PropertySheetEntry = PropertySheetEntry;
var SubPropertySheetEntry = /** @class */ (function () {
    function SubPropertySheetEntry(targetVersion, target, propertySheet) {
        this.targetVersion = targetVersion;
        this.target = target;
        this.propertySheet = propertySheet;
    }
    SubPropertySheetEntry.prototype.render = function (context) {
        var container = new Adaptive.Container();
        container.spacing = Adaptive.Spacing.Small;
        this.propertySheet.render(container, new PropertySheetContext(context.targetVersion, context.peer, this.target));
        return container;
    };
    return SubPropertySheetEntry;
}());
exports.SubPropertySheetEntry = SubPropertySheetEntry;
var CustomPropertySheetEntry = /** @class */ (function (_super) {
    __extends(CustomPropertySheetEntry, _super);
    function CustomPropertySheetEntry(targetVersion, onRender) {
        var _this = _super.call(this, targetVersion) || this;
        _this.targetVersion = targetVersion;
        _this.onRender = onRender;
        return _this;
    }
    CustomPropertySheetEntry.prototype.render = function (context) {
        if (this.onRender) {
            return this.onRender(context);
        }
    };
    return CustomPropertySheetEntry;
}(PropertySheetEntry));
exports.CustomPropertySheetEntry = CustomPropertySheetEntry;
var SingleInputPropertyEditor = /** @class */ (function (_super) {
    __extends(SingleInputPropertyEditor, _super);
    function SingleInputPropertyEditor(targetVersion, propertyName, label, causesPropertySheetRefresh) {
        if (causesPropertySheetRefresh === void 0) { causesPropertySheetRefresh = false; }
        var _this = _super.call(this, targetVersion) || this;
        _this.targetVersion = targetVersion;
        _this.propertyName = propertyName;
        _this.label = label;
        _this.causesPropertySheetRefresh = causesPropertySheetRefresh;
        return _this;
    }
    SingleInputPropertyEditor.prototype.getPropertyValue = function (context) {
        return context.target[this.propertyName];
    };
    SingleInputPropertyEditor.prototype.setPropertyValue = function (context, value) {
        context.target[this.propertyName] = value;
    };
    SingleInputPropertyEditor.prototype.render = function (context) {
        var _this = this;
        var leftColumn = new Adaptive.Column();
        leftColumn.width = new Adaptive.SizeAndUnit(100, Adaptive.SizeUnit.Pixel);
        leftColumn.verticalContentAlignment = Adaptive.VerticalAlignment.Center;
        var rightColumn = new Adaptive.Column();
        rightColumn.width = "stretch";
        rightColumn.verticalContentAlignment = Adaptive.VerticalAlignment.Center;
        var columnSet = new Adaptive.ColumnSet();
        columnSet.spacing = Adaptive.Spacing.Small;
        columnSet.addColumn(leftColumn);
        columnSet.addColumn(rightColumn);
        var label = new Adaptive.TextBlock();
        label.horizontalAlignment = Adaptive.HorizontalAlignment.Right;
        label.wrap = true;
        label.text = this.label;
        var input = this.createInput(context);
        input.defaultValue = this.getPropertyValue(context);
        input.onValueChanged = function () {
            _this.setPropertyValue(context, input.value);
            context.peer.changed(_this.causesPropertySheetRefresh);
        };
        leftColumn.addItem(label);
        rightColumn.addItem(input);
        return columnSet;
    };
    return SingleInputPropertyEditor;
}(PropertySheetEntry));
exports.SingleInputPropertyEditor = SingleInputPropertyEditor;
var StringPropertyEditor = /** @class */ (function (_super) {
    __extends(StringPropertyEditor, _super);
    function StringPropertyEditor(targetVersion, propertyName, label, isMultiline, causesPropertySheetRefresh) {
        if (isMultiline === void 0) { isMultiline = false; }
        if (causesPropertySheetRefresh === void 0) { causesPropertySheetRefresh = false; }
        var _this = _super.call(this, targetVersion, propertyName, label, causesPropertySheetRefresh) || this;
        _this.targetVersion = targetVersion;
        _this.propertyName = propertyName;
        _this.label = label;
        _this.isMultiline = isMultiline;
        _this.causesPropertySheetRefresh = causesPropertySheetRefresh;
        return _this;
    }
    StringPropertyEditor.prototype.createInput = function (context) {
        var input = new Adaptive.TextInput();
        input.placeholder = "(not set)";
        input.isMultiline = this.isMultiline;
        return input;
    };
    return StringPropertyEditor;
}(SingleInputPropertyEditor));
exports.StringPropertyEditor = StringPropertyEditor;
var NumberPropertyEditor = /** @class */ (function (_super) {
    __extends(NumberPropertyEditor, _super);
    function NumberPropertyEditor(targetVersion, propertyName, label, defaultValue, causesPropertySheetRefresh) {
        if (defaultValue === void 0) { defaultValue = undefined; }
        if (causesPropertySheetRefresh === void 0) { causesPropertySheetRefresh = false; }
        var _this = _super.call(this, targetVersion, propertyName, label, causesPropertySheetRefresh) || this;
        _this.targetVersion = targetVersion;
        _this.propertyName = propertyName;
        _this.label = label;
        _this.defaultValue = defaultValue;
        _this.causesPropertySheetRefresh = causesPropertySheetRefresh;
        return _this;
    }
    NumberPropertyEditor.prototype.setPropertyValue = function (context, value) {
        try {
            context.target[this.propertyName] = parseFloat(value);
        }
        catch (_a) {
            context.target[this.propertyName] = this.defaultValue;
        }
    };
    NumberPropertyEditor.prototype.createInput = function (context) {
        var input = new Adaptive.NumberInput();
        input.placeholder = "(not set)";
        return input;
    };
    return NumberPropertyEditor;
}(SingleInputPropertyEditor));
exports.NumberPropertyEditor = NumberPropertyEditor;
var ObjectPropertyEditor = /** @class */ (function (_super) {
    __extends(ObjectPropertyEditor, _super);
    function ObjectPropertyEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ObjectPropertyEditor.prototype.getPropertyValue = function (context) {
        return JSON.stringify(context.target[this.propertyName]);
    };
    ObjectPropertyEditor.prototype.setPropertyValue = function (context, value) {
        context.target[this.propertyName] = JSON.parse(value);
    };
    return ObjectPropertyEditor;
}(StringPropertyEditor));
exports.ObjectPropertyEditor = ObjectPropertyEditor;
var CustomCardObjectPropertyEditor = /** @class */ (function (_super) {
    __extends(CustomCardObjectPropertyEditor, _super);
    function CustomCardObjectPropertyEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomCardObjectPropertyEditor.prototype.getPropertyValue = function (context) {
        return context.peer.getCardObject().getCustomProperty(this.propertyName);
    };
    CustomCardObjectPropertyEditor.prototype.setPropertyValue = function (context, value) {
        context.peer.getCardObject().setCustomProperty(this.propertyName, value);
    };
    return CustomCardObjectPropertyEditor;
}(StringPropertyEditor));
exports.CustomCardObjectPropertyEditor = CustomCardObjectPropertyEditor;
var BooleanPropertyEditor = /** @class */ (function (_super) {
    __extends(BooleanPropertyEditor, _super);
    function BooleanPropertyEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BooleanPropertyEditor.prototype.getPropertyValue = function (context) {
        var v = context.target[this.propertyName];
        return typeof v === "boolean" ? v.toString() : "false";
    };
    BooleanPropertyEditor.prototype.setPropertyValue = function (context, value) {
        context.target[this.propertyName] = value == "true";
    };
    BooleanPropertyEditor.prototype.createInput = function (context) {
        return new Adaptive.ToggleInput();
    };
    return BooleanPropertyEditor;
}(SingleInputPropertyEditor));
exports.BooleanPropertyEditor = BooleanPropertyEditor;
var ChoicePropertyEditor = /** @class */ (function (_super) {
    __extends(ChoicePropertyEditor, _super);
    function ChoicePropertyEditor(targetVersion, propertyName, label, choices, causesPropertySheetRefresh) {
        if (causesPropertySheetRefresh === void 0) { causesPropertySheetRefresh = false; }
        var _this = _super.call(this, targetVersion, propertyName, label, causesPropertySheetRefresh) || this;
        _this.targetVersion = targetVersion;
        _this.propertyName = propertyName;
        _this.label = label;
        _this.choices = choices;
        _this.causesPropertySheetRefresh = causesPropertySheetRefresh;
        return _this;
    }
    ChoicePropertyEditor.prototype.createInput = function (context) {
        var input = new Adaptive.ChoiceSetInput();
        input.isCompact = true;
        input.placeholder = "(not set)";
        for (var _i = 0, _a = this.choices; _i < _a.length; _i++) {
            var choice = _a[_i];
            if (shared_1.isVersionLessOrEqual(choice.targetVersion, context.targetVersion)) {
                input.choices.push(new Adaptive.Choice(choice.name, choice.value));
            }
        }
        return input;
    };
    return ChoicePropertyEditor;
}(SingleInputPropertyEditor));
exports.ChoicePropertyEditor = ChoicePropertyEditor;
var ContainerStylePropertyEditor = /** @class */ (function (_super) {
    __extends(ContainerStylePropertyEditor, _super);
    function ContainerStylePropertyEditor(targetVersion, propertyName, label) {
        var _this = _super.call(this, targetVersion, propertyName, label, [
            { targetVersion: shared_1.Versions.v1_0, name: "(not set)", value: "not_set" },
            { targetVersion: shared_1.Versions.v1_0, name: "Default", value: "default" },
            { targetVersion: shared_1.Versions.v1_0, name: "Emphasis", value: "emphasis" },
            { targetVersion: shared_1.Versions.v1_2, name: "Accent", value: "accent" },
            { targetVersion: shared_1.Versions.v1_2, name: "Good", value: "good" },
            { targetVersion: shared_1.Versions.v1_2, name: "Attention", value: "attention" },
            { targetVersion: shared_1.Versions.v1_2, name: "Warning", value: "warning" }
        ]) || this;
        _this.targetVersion = targetVersion;
        _this.propertyName = propertyName;
        _this.label = label;
        return _this;
    }
    ContainerStylePropertyEditor.prototype.getPropertyValue = function (context) {
        var currentStyle = context.target[this.propertyName];
        return currentStyle ? currentStyle.toString() : "not_set";
    };
    ContainerStylePropertyEditor.prototype.setPropertyValue = function (context, value) {
        if (value == "not_set") {
            context.target[this.propertyName] = null;
        }
        else {
            context.target[this.propertyName] = value;
        }
    };
    return ContainerStylePropertyEditor;
}(ChoicePropertyEditor));
exports.ContainerStylePropertyEditor = ContainerStylePropertyEditor;
var ColumnWidthPropertyEditor = /** @class */ (function (_super) {
    __extends(ColumnWidthPropertyEditor, _super);
    function ColumnWidthPropertyEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnWidthPropertyEditor.prototype.getPropertyValue = function (context) {
        if (context.target[this.propertyName] instanceof Adaptive.SizeAndUnit) {
            if (context.target[this.propertyName].unit == Adaptive.SizeUnit.Pixel) {
                return "pixels";
            }
            else {
                return "weighted";
            }
        }
        else {
            return context.target[this.propertyName].toString();
        }
    };
    ColumnWidthPropertyEditor.prototype.setPropertyValue = function (context, value) {
        switch (value) {
            case "auto":
                context.target[this.propertyName] = "auto";
                break;
            case "pixels":
                context.target[this.propertyName] = new Adaptive.SizeAndUnit(50, Adaptive.SizeUnit.Pixel);
                break;
            case "weighted":
                context.target[this.propertyName] = new Adaptive.SizeAndUnit(50, Adaptive.SizeUnit.Weight);
                break;
            case "stretch":
            default:
                context.target[this.propertyName] = "stretch";
                break;
        }
    };
    return ColumnWidthPropertyEditor;
}(ChoicePropertyEditor));
exports.ColumnWidthPropertyEditor = ColumnWidthPropertyEditor;
var HeightPropertyEditor = /** @class */ (function (_super) {
    __extends(HeightPropertyEditor, _super);
    function HeightPropertyEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeightPropertyEditor.prototype.setPropertyValue = function (context, value) {
        var processedValue;
        switch (value) {
            case "auto":
            case "stretch":
                processedValue = value;
                break;
            default:
                processedValue = "auto";
                break;
        }
        context.target[this.propertyName] = processedValue;
    };
    return HeightPropertyEditor;
}(ChoicePropertyEditor));
exports.HeightPropertyEditor = HeightPropertyEditor;
var SizeAndUnitPropertyEditor = /** @class */ (function (_super) {
    __extends(SizeAndUnitPropertyEditor, _super);
    function SizeAndUnitPropertyEditor(targetVersion, propertyName, label, sizeUnit, defaultValue, causesPropertySheetRefresh) {
        if (defaultValue === void 0) { defaultValue = undefined; }
        if (causesPropertySheetRefresh === void 0) { causesPropertySheetRefresh = false; }
        var _this = _super.call(this, targetVersion, propertyName, label, defaultValue, causesPropertySheetRefresh) || this;
        _this.targetVersion = targetVersion;
        _this.propertyName = propertyName;
        _this.label = label;
        _this.sizeUnit = sizeUnit;
        _this.defaultValue = defaultValue;
        _this.causesPropertySheetRefresh = causesPropertySheetRefresh;
        return _this;
    }
    SizeAndUnitPropertyEditor.prototype.getPropertyValue = function (context) {
        return context.target[this.propertyName].physicalSize.toString();
    };
    SizeAndUnitPropertyEditor.prototype.setPropertyValue = function (context, value) {
        context.target[this.propertyName] = new Adaptive.SizeAndUnit(parseFloat(value), this.sizeUnit);
    };
    return SizeAndUnitPropertyEditor;
}(NumberPropertyEditor));
exports.SizeAndUnitPropertyEditor = SizeAndUnitPropertyEditor;
var ActionPropertyEditor = /** @class */ (function (_super) {
    __extends(ActionPropertyEditor, _super);
    function ActionPropertyEditor(targetVersion, propertyName, label, forbiddenActionTypes, causesPropertySheetRefresh) {
        if (forbiddenActionTypes === void 0) { forbiddenActionTypes = []; }
        if (causesPropertySheetRefresh === void 0) { causesPropertySheetRefresh = false; }
        var _this = _super.call(this, targetVersion, propertyName, label, causesPropertySheetRefresh) || this;
        _this.targetVersion = targetVersion;
        _this.propertyName = propertyName;
        _this.label = label;
        _this.forbiddenActionTypes = forbiddenActionTypes;
        _this.causesPropertySheetRefresh = causesPropertySheetRefresh;
        return _this;
    }
    ActionPropertyEditor.prototype.getPropertyValue = function (context) {
        var action = context.target[this.propertyName];
        return action ? action.getJsonTypeName() : "none";
    };
    ActionPropertyEditor.prototype.setPropertyValue = function (context, value) {
        context.target[this.propertyName] = parseInt(value, 10);
        if (value == "none") {
            context.target[this.propertyName] = null;
        }
        else {
            context.target[this.propertyName] = Adaptive.AdaptiveCard.actionTypeRegistry.createInstance(value);
        }
    };
    ActionPropertyEditor.prototype.createInput = function (context) {
        var input = new Adaptive.ChoiceSetInput();
        input.isCompact = true;
        input.placeholder = "(not set)";
        input.choices.push(new Adaptive.Choice("(not set)", "none"));
        for (var i = 0; i < Adaptive.AdaptiveCard.actionTypeRegistry.getItemCount(); i++) {
            var actionType = Adaptive.AdaptiveCard.actionTypeRegistry.getItemAt(i).typeName;
            var doAddActionType = this.forbiddenActionTypes ? this.forbiddenActionTypes.indexOf(actionType) < 0 : true;
            if (doAddActionType) {
                var choice = new Adaptive.Choice(actionType, actionType);
                input.choices.push(choice);
            }
        }
        return input;
    };
    return ActionPropertyEditor;
}(SingleInputPropertyEditor));
exports.ActionPropertyEditor = ActionPropertyEditor;
var CompoundPropertyEditor = /** @class */ (function (_super) {
    __extends(CompoundPropertyEditor, _super);
    function CompoundPropertyEditor(targetVersion, propertyName, entries) {
        if (entries === void 0) { entries = []; }
        var _this = _super.call(this, targetVersion) || this;
        _this.targetVersion = targetVersion;
        _this.propertyName = propertyName;
        _this.entries = entries;
        return _this;
    }
    CompoundPropertyEditor.prototype.render = function (context) {
        var container = new Adaptive.Container();
        for (var _i = 0, _a = this.entries; _i < _a.length; _i++) {
            var entry = _a[_i];
            if (shared_1.isVersionLessOrEqual(entry.targetVersion, context.targetVersion)) {
                container.addItem(entry.render(new PropertySheetContext(context.targetVersion, context.peer, context.target[this.propertyName])));
            }
        }
        return container;
    };
    return CompoundPropertyEditor;
}(PropertySheetEntry));
exports.CompoundPropertyEditor = CompoundPropertyEditor;
var EnumPropertyEditor = /** @class */ (function (_super) {
    __extends(EnumPropertyEditor, _super);
    function EnumPropertyEditor(targetVersion, propertyName, label, enumType, causesPropertySheetRefresh) {
        if (causesPropertySheetRefresh === void 0) { causesPropertySheetRefresh = false; }
        var _this = _super.call(this, targetVersion, propertyName, label, causesPropertySheetRefresh) || this;
        _this.targetVersion = targetVersion;
        _this.propertyName = propertyName;
        _this.label = label;
        _this.enumType = enumType;
        _this.causesPropertySheetRefresh = causesPropertySheetRefresh;
        return _this;
    }
    EnumPropertyEditor.prototype.setPropertyValue = function (context, value) {
        context.target[this.propertyName] = parseInt(value, 10);
    };
    EnumPropertyEditor.prototype.createInput = function (context) {
        var input = new Adaptive.ChoiceSetInput();
        input.isCompact = true;
        input.placeholder = "(not set)";
        for (var key in this.enumType) {
            var v = parseInt(key, 10);
            if (!isNaN(v)) {
                input.choices.push(new Adaptive.Choice(this.enumType[key], key));
            }
        }
        return input;
    };
    return EnumPropertyEditor;
}(SingleInputPropertyEditor));
exports.EnumPropertyEditor = EnumPropertyEditor;
var NameValuePairPropertyEditor = /** @class */ (function (_super) {
    __extends(NameValuePairPropertyEditor, _super);
    function NameValuePairPropertyEditor(targetVersion, collectionPropertyName, namePropertyName, valuePropertyName, createCollectionItem, namePropertyLabel, valuePropertyLabel, addButtonTitle, messageIfEmpty) {
        if (namePropertyLabel === void 0) { namePropertyLabel = "Name"; }
        if (valuePropertyLabel === void 0) { valuePropertyLabel = "Value"; }
        if (addButtonTitle === void 0) { addButtonTitle = "Add"; }
        if (messageIfEmpty === void 0) { messageIfEmpty = "This collection is empty"; }
        var _this = _super.call(this, targetVersion) || this;
        _this.targetVersion = targetVersion;
        _this.collectionPropertyName = collectionPropertyName;
        _this.namePropertyName = namePropertyName;
        _this.valuePropertyName = valuePropertyName;
        _this.createCollectionItem = createCollectionItem;
        _this.namePropertyLabel = namePropertyLabel;
        _this.valuePropertyLabel = valuePropertyLabel;
        _this.addButtonTitle = addButtonTitle;
        _this.messageIfEmpty = messageIfEmpty;
        return _this;
    }
    NameValuePairPropertyEditor.prototype.collectionChanged = function (context, nameValuePairs, refreshPropertySheet) {
        context.target[this.collectionPropertyName] = [];
        for (var _i = 0, nameValuePairs_1 = nameValuePairs; _i < nameValuePairs_1.length; _i++) {
            var nameValuePair = nameValuePairs_1[_i];
            var item = this.createCollectionItem(nameValuePair.name, nameValuePair.value);
            context.target[this.collectionPropertyName].push(item);
        }
        context.peer.changed(refreshPropertySheet);
    };
    NameValuePairPropertyEditor.prototype.render = function (context) {
        var _this = this;
        var result = new Adaptive.Container();
        var collection = context.target[this.collectionPropertyName];
        if (!Array.isArray(collection)) {
            throw new Error("The " + this.collectionPropertyName + " property on " + context.peer.getCardObject().getJsonTypeName() + " either doesn't exist or isn't an array.");
        }
        var nameValuePairs = [];
        for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {
            var pair = collection_1[_i];
            nameValuePairs.push({
                name: pair[this.namePropertyName],
                value: pair[this.valuePropertyName]
            });
        }
        if (nameValuePairs.length == 0) {
            var messageTextBlock = new Adaptive.TextBlock();
            messageTextBlock.spacing = Adaptive.Spacing.Small;
            messageTextBlock.text = this.messageIfEmpty;
            result.addItem(messageTextBlock);
        }
        else {
            var _loop_2 = function (i) {
                var textInput = new Adaptive.TextInput();
                textInput.placeholder = this_1.namePropertyLabel;
                textInput.defaultValue = nameValuePairs[i].name;
                textInput.onValueChanged = function (sender) {
                    nameValuePairs[i].name = sender.value;
                    _this.collectionChanged(context, nameValuePairs, false);
                };
                var nameColumn = new Adaptive.Column("stretch");
                nameColumn.addItem(textInput);
                textInput = new Adaptive.TextInput();
                textInput.placeholder = this_1.valuePropertyLabel;
                textInput.defaultValue = nameValuePairs[i].value;
                textInput.onValueChanged = function (sender) {
                    nameValuePairs[i].value = sender.value;
                    _this.collectionChanged(context, nameValuePairs, false);
                };
                var valueColumn = new Adaptive.Column("stretch");
                valueColumn.spacing = Adaptive.Spacing.Small;
                valueColumn.addItem(textInput);
                var removeAction = new Adaptive.SubmitAction();
                removeAction.title = "X";
                removeAction.onExecute = function (sender) {
                    nameValuePairs.splice(i, 1);
                    _this.collectionChanged(context, nameValuePairs, true);
                };
                var actionSet_1 = new Adaptive.ActionSet();
                actionSet_1.addAction(removeAction);
                var removeColumn = new Adaptive.Column("auto");
                removeColumn.spacing = Adaptive.Spacing.Small;
                removeColumn.addItem(actionSet_1);
                var columnSet = new Adaptive.ColumnSet();
                columnSet.spacing = Adaptive.Spacing.Small;
                columnSet.addColumn(nameColumn);
                columnSet.addColumn(valueColumn);
                columnSet.addColumn(removeColumn);
                result.addItem(columnSet);
            };
            var this_1 = this;
            for (var i = 0; i < nameValuePairs.length; i++) {
                _loop_2(i);
            }
        }
        var addAction = new Adaptive.SubmitAction();
        addAction.title = this.addButtonTitle;
        addAction.onExecute = function (sender) {
            nameValuePairs.push({ name: "", value: "" });
            _this.collectionChanged(context, nameValuePairs, true);
        };
        var actionSet = new Adaptive.ActionSet();
        actionSet.spacing = Adaptive.Spacing.Small;
        actionSet.addAction(addAction);
        result.addItem(actionSet);
        return result;
    };
    return NameValuePairPropertyEditor;
}(PropertySheetEntry));
var CardObjectPeer = /** @class */ (function (_super) {
    __extends(CardObjectPeer, _super);
    function CardObjectPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardObjectPeer.idProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "id", "Id");
    return CardObjectPeer;
}(DesignerPeer));
exports.CardObjectPeer = CardObjectPeer;
var ActionPeer = /** @class */ (function (_super) {
    __extends(ActionPeer, _super);
    function ActionPeer(parent, designerSurface, registration, action) {
        var _this = _super.call(this, parent, designerSurface, registration) || this;
        _this._action = action;
        return _this;
    }
    ActionPeer.prototype.doubleClick = function (e) {
        _super.prototype.doubleClick.call(this, e);
        this.action.renderedElement.click();
    };
    ActionPeer.prototype.internalRemove = function () {
        return this.action.remove();
    };
    ActionPeer.prototype.internalGetTreeItemText = function () {
        if (this.action.title && this.action.title != "") {
            return this.action.title;
        }
        else {
            return _super.prototype.internalGetTreeItemText.call(this);
        }
    };
    ActionPeer.prototype.getCardObject = function () {
        return this.action;
    };
    ActionPeer.prototype.isDraggable = function () {
        return false;
    };
    ActionPeer.prototype.getBoundingRect = function () {
        var designSurfaceOffset = this.designerSurface.getDesignerSurfaceOffset();
        var actionBoundingRect = this.action.renderedElement.getBoundingClientRect();
        return new miscellaneous_1.Rect(actionBoundingRect.top - designSurfaceOffset.y, actionBoundingRect.right - designSurfaceOffset.x, actionBoundingRect.bottom - designSurfaceOffset.y, actionBoundingRect.left - designSurfaceOffset.x);
    };
    ActionPeer.prototype.getCardObjectBoundingRect = function () {
        var actionBoundingRect = this.action.renderedElement.getBoundingClientRect();
        return new miscellaneous_1.Rect(actionBoundingRect.top, actionBoundingRect.right, actionBoundingRect.bottom, actionBoundingRect.left);
    };
    ActionPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, ActionPeer.idProperty, ActionPeer.titleProperty, ActionPeer.styleProperty, ActionPeer.iconUrlProperty);
    };
    Object.defineProperty(ActionPeer.prototype, "action", {
        get: function () {
            return this._action;
        },
        enumerable: true,
        configurable: true
    });
    ActionPeer.titleProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "title", "Title");
    ActionPeer.styleProperty = new ChoicePropertyEditor(shared_1.Versions.v1_2, "style", "Style", [
        { targetVersion: shared_1.Versions.v1_2, name: "Default", value: Adaptive.ActionStyle.Default },
        { targetVersion: shared_1.Versions.v1_2, name: "Positive", value: Adaptive.ActionStyle.Positive },
        { targetVersion: shared_1.Versions.v1_2, name: "Destructive", value: Adaptive.ActionStyle.Destructive }
    ]);
    ActionPeer.iconUrlProperty = new StringPropertyEditor(shared_1.Versions.v1_1, "iconUrl", "Icon URL");
    return ActionPeer;
}(CardObjectPeer));
exports.ActionPeer = ActionPeer;
var TypedActionPeer = /** @class */ (function (_super) {
    __extends(TypedActionPeer, _super);
    function TypedActionPeer(parent, designerSurface, registration, action) {
        return _super.call(this, parent, designerSurface, registration, action) || this;
    }
    Object.defineProperty(TypedActionPeer.prototype, "action", {
        get: function () {
            return this._action;
        },
        enumerable: true,
        configurable: true
    });
    return TypedActionPeer;
}(ActionPeer));
exports.TypedActionPeer = TypedActionPeer;
var HttpActionPeer = /** @class */ (function (_super) {
    __extends(HttpActionPeer, _super);
    function HttpActionPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HttpActionPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        if (Adaptive.AdaptiveCard.useBuiltInInputValidation) {
            propertySheet.add(PropertySheetCategory.DefaultCategory, HttpActionPeer.ignoreInputValidationProperty);
        }
        propertySheet.add(defaultCategory, HttpActionPeer.methodProperty, HttpActionPeer.urlProperty);
        if (this.action.method == "POST") {
            propertySheet.add(defaultCategory, HttpActionPeer.bodyProperty);
        }
        propertySheet.add("HTTP headers", HttpActionPeer.headersProperty);
    };
    HttpActionPeer.ignoreInputValidationProperty = new BooleanPropertyEditor(shared_1.Versions.vNext, "ignoreInputValidation", "Ignore input validation");
    HttpActionPeer.methodProperty = new ChoicePropertyEditor(shared_1.Versions.v1_0, "method", "Method", [
        { targetVersion: shared_1.Versions.v1_0, name: "GET", value: "GET" },
        { targetVersion: shared_1.Versions.v1_0, name: "POST", value: "POST" }
    ], true);
    HttpActionPeer.urlProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "url", "Url");
    HttpActionPeer.bodyProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "body", "Body", true);
    HttpActionPeer.headersProperty = new NameValuePairPropertyEditor(shared_1.Versions.v1_0, "headers", "name", "value", function (name, value) { return new Adaptive.HttpHeader(name, value); }, "Name", "Value", "Add a new header", "This action has no header.");
    return HttpActionPeer;
}(TypedActionPeer));
exports.HttpActionPeer = HttpActionPeer;
var SubmitActionPeer = /** @class */ (function (_super) {
    __extends(SubmitActionPeer, _super);
    function SubmitActionPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SubmitActionPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, SubmitActionPeer.ignoreInputValidationProperty, SubmitActionPeer.dataProperty);
    };
    SubmitActionPeer.ignoreInputValidationProperty = new BooleanPropertyEditor(shared_1.Versions.vNext, "ignoreInputValidation", "Ignore input validation");
    SubmitActionPeer.dataProperty = new ObjectPropertyEditor(shared_1.Versions.v1_0, "data", "Data");
    return SubmitActionPeer;
}(TypedActionPeer));
exports.SubmitActionPeer = SubmitActionPeer;
var OpenUrlActionPeer = /** @class */ (function (_super) {
    __extends(OpenUrlActionPeer, _super);
    function OpenUrlActionPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OpenUrlActionPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, OpenUrlActionPeer.urlProperty);
    };
    OpenUrlActionPeer.urlProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "url", "Url");
    return OpenUrlActionPeer;
}(TypedActionPeer));
exports.OpenUrlActionPeer = OpenUrlActionPeer;
var ShowCardActionPeer = /** @class */ (function (_super) {
    __extends(ShowCardActionPeer, _super);
    function ShowCardActionPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowCardActionPeer.prototype.getToolTip = function () {
        return "Double click to open/close";
    };
    return ShowCardActionPeer;
}(TypedActionPeer));
exports.ShowCardActionPeer = ShowCardActionPeer;
var ToggleVisibilityActionPeer = /** @class */ (function (_super) {
    __extends(ToggleVisibilityActionPeer, _super);
    function ToggleVisibilityActionPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ToggleVisibilityActionPeer;
}(TypedActionPeer));
exports.ToggleVisibilityActionPeer = ToggleVisibilityActionPeer;
var CardElementPeer = /** @class */ (function (_super) {
    __extends(CardElementPeer, _super);
    function CardElementPeer(parent, designerSurface, registration, cardElement) {
        var _this = _super.call(this, parent, designerSurface, registration) || this;
        _this._cardElement = cardElement;
        if (cardElement instanceof Adaptive.CardElementContainer) {
            for (var i = 0; i < cardElement.getItemCount(); i++) {
                _this.insertChild(card_designer_surface_1.CardDesignerSurface.cardElementPeerRegistry.createPeerInstance(_this.designerSurface, _this, cardElement.getItemAt(i)));
            }
        }
        for (var i = 0; i < _this.cardElement.getActionCount(); i++) {
            _this.insertChild(card_designer_surface_1.CardDesignerSurface.actionPeerRegistry.createPeerInstance(_this.designerSurface, _this, cardElement.getActionAt(i)));
        }
        return _this;
    }
    CardElementPeer.prototype.insertElementAfter = function (newElement) {
        if (this.cardElement.parent instanceof Adaptive.Container) {
            this.cardElement.parent.insertItemAfter(newElement, this.cardElement);
            var newPeer = card_designer_surface_1.CardDesignerSurface.cardElementPeerRegistry.createPeerInstance(this.designerSurface, this, newElement);
            this.peerAdded(newPeer);
        }
    };
    CardElementPeer.prototype.internalRemove = function () {
        return this.cardElement.remove();
    };
    CardElementPeer.prototype.internalUpdateCssStyles = function () {
        _super.prototype.internalUpdateCssStyles.call(this);
        if (this.cardElement.isVisible) {
            this.renderedElement.classList.remove("invisible");
        }
        else {
            this.renderedElement.classList.add("invisible");
        }
    };
    CardElementPeer.prototype.getTreeItemText = function () {
        var text = _super.prototype.getTreeItemText.call(this);
        if (this.cardElement.isVisible) {
            return text;
        }
        else {
            var result = "Hidden";
            if (text) {
                result += " - " + text;
            }
            return result;
        }
    };
    CardElementPeer.prototype.getCardObject = function () {
        return this.cardElement;
    };
    CardElementPeer.prototype.initializeCardElement = function () {
        // Do nothing in base implementation
    };
    CardElementPeer.prototype.canDrop = function (peer) {
        return this.cardElement instanceof Adaptive.Container && peer instanceof CardElementPeer;
    };
    CardElementPeer.prototype.tryDrop = function (peer, insertionPoint) {
        if (this.cardElement instanceof Adaptive.Container && peer instanceof CardElementPeer) {
            var targetChild = null;
            var insertAfter = void 0;
            for (var i = 0; i < this.getChildCount(); i++) {
                var rect = this.getChildAt(i).getBoundingRect();
                if (rect.isInside(insertionPoint)) {
                    targetChild = this.getChildAt(i);
                    insertAfter = (insertionPoint.y - rect.top) >= (rect.height / 2);
                    break;
                }
            }
            if (targetChild != peer) {
                if (peer.cardElement.parent) {
                    if (!peer.remove(true, false)) {
                        return false;
                    }
                    peer.parent.removeChild(peer);
                }
                if (!targetChild) {
                    var rect = this.getBoundingRect();
                    insertAfter = (insertionPoint.y - rect.top) >= (rect.height / 2);
                    if (this.cardElement.getItemCount() > 0 && insertAfter) {
                        this.cardElement.insertItemAfter(peer.cardElement, this.cardElement.getItemAt(this.cardElement.getItemCount() - 1));
                    }
                    else {
                        this.cardElement.insertItemAfter(peer.cardElement, null);
                    }
                }
                else {
                    if (insertAfter) {
                        this.cardElement.insertItemAfter(peer.cardElement, targetChild.cardElement);
                    }
                    else {
                        this.cardElement.insertItemBefore(peer.cardElement, targetChild.cardElement);
                    }
                }
                this.insertChild(peer, peer.cardElement.index);
                this.changed(false);
                return true;
            }
        }
        return false;
    };
    CardElementPeer.prototype.getBoundingRect = function () {
        var designSurfaceOffset = this.designerSurface.getDesignerSurfaceOffset();
        var cardElementBoundingRect = this.cardElement.renderedElement.getBoundingClientRect();
        if (this.cardElement.hasVisibleSeparator) {
            var separatorBoundingRect = this.cardElement.separatorElement.getBoundingClientRect();
            return new miscellaneous_1.Rect(Math.min(separatorBoundingRect.top, cardElementBoundingRect.top) - designSurfaceOffset.y, Math.max(separatorBoundingRect.right, cardElementBoundingRect.right) - designSurfaceOffset.x, Math.max(separatorBoundingRect.bottom, cardElementBoundingRect.bottom) - designSurfaceOffset.y, Math.min(separatorBoundingRect.left, cardElementBoundingRect.left) - designSurfaceOffset.x);
        }
        else {
            return new miscellaneous_1.Rect(cardElementBoundingRect.top - designSurfaceOffset.y, cardElementBoundingRect.right - designSurfaceOffset.x, cardElementBoundingRect.bottom - designSurfaceOffset.y, cardElementBoundingRect.left - designSurfaceOffset.x);
        }
    };
    CardElementPeer.prototype.getCardObjectBoundingRect = function () {
        var cardElementBoundingRect = this.cardElement.renderedElement.getBoundingClientRect();
        return new miscellaneous_1.Rect(cardElementBoundingRect.top, cardElementBoundingRect.right, cardElementBoundingRect.bottom, cardElementBoundingRect.left);
    };
    CardElementPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        if (shared_1.GlobalSettings.enableDataBindingSupport) {
            propertySheet.add(defaultCategory, CardElementPeer.dataContextProperty, CardElementPeer.whenProperty);
        }
        propertySheet.add(defaultCategory, CardElementPeer.idProperty, CardElementPeer.isVisibleProperty);
        propertySheet.add(PropertySheetCategory.LayoutCategory, CardElementPeer.spacingProperty, CardElementPeer.separatorProperty, CardElementPeer.horizontalAlignmentProperty, CardElementPeer.heightProperty);
    };
    Object.defineProperty(CardElementPeer.prototype, "cardElement", {
        get: function () {
            return this._cardElement;
        },
        enumerable: true,
        configurable: true
    });
    CardElementPeer.dataContextProperty = new CustomCardObjectPropertyEditor("*", "$data", "Data context");
    CardElementPeer.whenProperty = new CustomCardObjectPropertyEditor("*", "$when", "Only show when");
    CardElementPeer.idProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "id", "Id");
    CardElementPeer.isVisibleProperty = new BooleanPropertyEditor(shared_1.Versions.v1_2, "isVisible", "Initially visible");
    CardElementPeer.spacingProperty = new EnumPropertyEditor(shared_1.Versions.v1_0, "spacing", "Spacing", Adaptive.Spacing);
    CardElementPeer.separatorProperty = new BooleanPropertyEditor(shared_1.Versions.v1_0, "separator", "Separator");
    CardElementPeer.horizontalAlignmentProperty = new EnumPropertyEditor(shared_1.Versions.v1_0, "horizontalAlignment", "Horizontal alignment", Adaptive.HorizontalAlignment);
    CardElementPeer.heightProperty = new HeightPropertyEditor(shared_1.Versions.v1_1, "height", "Height", [
        { targetVersion: shared_1.Versions.v1_1, name: "Automatic", value: "auto" },
        { targetVersion: shared_1.Versions.v1_1, name: "Stretch", value: "stretch" }
    ]);
    return CardElementPeer;
}(CardObjectPeer));
exports.CardElementPeer = CardElementPeer;
var TypedCardElementPeer = /** @class */ (function (_super) {
    __extends(TypedCardElementPeer, _super);
    function TypedCardElementPeer(parent, designerSurface, registration, cardElement) {
        return _super.call(this, parent, designerSurface, registration, cardElement) || this;
    }
    Object.defineProperty(TypedCardElementPeer.prototype, "cardElement", {
        get: function () {
            return this._cardElement;
        },
        enumerable: true,
        configurable: true
    });
    return TypedCardElementPeer;
}(CardElementPeer));
exports.TypedCardElementPeer = TypedCardElementPeer;
var AdaptiveCardPeer = /** @class */ (function (_super) {
    __extends(AdaptiveCardPeer, _super);
    function AdaptiveCardPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AdaptiveCardPeer.prototype.addAction = function (action) {
        this.cardElement.addAction(action);
        this.insertChild(card_designer_surface_1.CardDesignerSurface.actionPeerRegistry.createPeerInstance(this.designerSurface, this, action));
    };
    AdaptiveCardPeer.prototype.internalRemove = function () {
        return true;
    };
    AdaptiveCardPeer.prototype.internalAddCommands = function (commands) {
        var _this = this;
        _super.prototype.internalAddCommands.call(this, commands);
        commands.push(new peer_command_1.PeerCommand({
            name: "Add an action",
            iconClass: "acd-icon-bolt",
            execute: function (command, clickedElement) {
                var popupMenu = new Controls.PopupMenu();
                for (var i = 0; i < Adaptive.AdaptiveCard.actionTypeRegistry.getItemCount(); i++) {
                    var menuItem = new Controls.DropDownItem(i.toString(), Adaptive.AdaptiveCard.actionTypeRegistry.getItemAt(i).typeName);
                    menuItem.onClick = function (clickedItem) {
                        var registryItem = Adaptive.AdaptiveCard.actionTypeRegistry.getItemAt(Number.parseInt(clickedItem.key));
                        var action = registryItem.createInstance();
                        action.title = registryItem.typeName;
                        _this.addAction(action);
                        popupMenu.closePopup();
                    };
                    popupMenu.items.add(menuItem);
                }
                popupMenu.popup(clickedElement);
            }
        }));
    };
    AdaptiveCardPeer.prototype.isDraggable = function () {
        return false;
    };
    AdaptiveCardPeer.prototype.canBeRemoved = function () {
        return false;
    };
    AdaptiveCardPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        var _this = this;
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.remove(CardObjectPeer.idProperty, CardElementPeer.isVisibleProperty, CardElementPeer.horizontalAlignmentProperty, CardElementPeer.separatorProperty, CardElementPeer.heightProperty, CardElementPeer.spacingProperty);
        propertySheet.add(defaultCategory, AdaptiveCardPeer.langProperty, AdaptiveCardPeer.fallbackTextProperty, AdaptiveCardPeer.speakProperty);
        propertySheet.add(PropertySheetCategory.LayoutCategory, ContainerPeer.minHeightProperty, ContainerPeer.verticalContentAlignmentProperty);
        propertySheet.add("Background image", ContainerPeer.backgroundImageProperty);
        propertySheet.add(PropertySheetCategory.SelectionAction, ContainerPeer.selectActionProperty);
        if (this.cardElement.selectAction) {
            var selectActionPeer = card_designer_surface_1.CardDesignerSurface.actionPeerRegistry.createPeerInstance(this.designerSurface, null, this.cardElement.selectAction);
            selectActionPeer.onChanged = function (sender, updatePropertySheet) { _this.changed(updatePropertySheet); };
            var subPropertySheet = new PropertySheet(false);
            selectActionPeer.populatePropertySheet(subPropertySheet, PropertySheetCategory.SelectionAction);
            subPropertySheet.remove(ActionPeer.iconUrlProperty, ActionPeer.styleProperty);
            propertySheet.add(PropertySheetCategory.SelectionAction, new SubPropertySheetEntry(shared_1.Versions.v1_2, this.cardElement.selectAction, subPropertySheet));
        }
    };
    AdaptiveCardPeer.langProperty = new StringPropertyEditor(shared_1.Versions.v1_1, "lang", "Language");
    AdaptiveCardPeer.fallbackTextProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "fallbackText", "Fallback text", true);
    AdaptiveCardPeer.speakProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "speak", "Speak");
    return AdaptiveCardPeer;
}(TypedCardElementPeer));
exports.AdaptiveCardPeer = AdaptiveCardPeer;
var ColumnPeer = /** @class */ (function (_super) {
    __extends(ColumnPeer, _super);
    function ColumnPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnPeer.prototype.isContainer = function () {
        return true;
    };
    ColumnPeer.prototype.internalGetTreeItemText = function () {
        if (this.cardElement.width instanceof Adaptive.SizeAndUnit) {
            switch (this.cardElement.width.unit) {
                case Adaptive.SizeUnit.Weight:
                    return "Weight: " + this.cardElement.width.physicalSize;
                default:
                    return this.cardElement.width.physicalSize + " pixels";
            }
        }
        else {
            switch (this.cardElement.width) {
                case "stretch":
                    return "Stretch";
                case "auto":
                    return "Automatic";
                default:
                    return "";
            }
        }
    };
    ColumnPeer.prototype.isDraggable = function () {
        return false;
    };
    ColumnPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        var _this = this;
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, ColumnPeer.widthProperty);
        if (this.cardElement.width instanceof Adaptive.SizeAndUnit) {
            if (this.cardElement.width.unit == Adaptive.SizeUnit.Pixel) {
                propertySheet.add(PropertySheetCategory.DefaultCategory, ColumnPeer.pixelWidthProperty);
            }
            else {
                propertySheet.add(PropertySheetCategory.DefaultCategory, ColumnPeer.weightProperty);
            }
        }
        propertySheet.add(PropertySheetCategory.LayoutCategory, ContainerPeer.minHeightProperty, ContainerPeer.verticalContentAlignmentProperty);
        propertySheet.add(PropertySheetCategory.StyleCategory, ContainerPeer.styleProperty, ContainerPeer.bleedProperty);
        propertySheet.add("Background image", ContainerPeer.backgroundImageProperty);
        propertySheet.add(PropertySheetCategory.SelectionAction, ContainerPeer.selectActionProperty);
        if (this.cardElement.selectAction) {
            var selectActionPeer = card_designer_surface_1.CardDesignerSurface.actionPeerRegistry.createPeerInstance(this.designerSurface, null, this.cardElement.selectAction);
            selectActionPeer.onChanged = function (sender, updatePropertySheet) { _this.changed(updatePropertySheet); };
            var subPropertySheet = new PropertySheet(false);
            selectActionPeer.populatePropertySheet(subPropertySheet, PropertySheetCategory.SelectionAction);
            subPropertySheet.remove(ActionPeer.iconUrlProperty, ActionPeer.styleProperty);
            propertySheet.add(PropertySheetCategory.SelectionAction, new SubPropertySheetEntry(shared_1.Versions.v1_2, this.cardElement.selectAction, subPropertySheet));
        }
    };
    ColumnPeer.pixelWidthProperty = new SizeAndUnitPropertyEditor(shared_1.Versions.v1_1, "width", "Width in pixels", Adaptive.SizeUnit.Pixel);
    ColumnPeer.weightProperty = new SizeAndUnitPropertyEditor(shared_1.Versions.v1_0, "width", "Weight", Adaptive.SizeUnit.Weight);
    ColumnPeer.widthProperty = new ColumnWidthPropertyEditor(shared_1.Versions.v1_0, "width", "Width", [
        { targetVersion: shared_1.Versions.v1_0, name: "Automatic", value: "auto" },
        { targetVersion: shared_1.Versions.v1_0, name: "Stretch", value: "stretch" },
        { targetVersion: shared_1.Versions.v1_0, name: "Weighted", value: "weighted" },
        { targetVersion: shared_1.Versions.v1_1, name: "Pixels", value: "pixels" }
    ], true);
    return ColumnPeer;
}(TypedCardElementPeer));
exports.ColumnPeer = ColumnPeer;
var ColumnSetPeer = /** @class */ (function (_super) {
    __extends(ColumnSetPeer, _super);
    function ColumnSetPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnSetPeer.prototype.isContainer = function () {
        return true;
    };
    ColumnSetPeer.prototype.internalAddCommands = function (commands) {
        var _this = this;
        _super.prototype.internalAddCommands.call(this, commands);
        commands.push(new peer_command_1.PeerCommand({
            name: "Add a column",
            iconClass: "acd-icon-addColumn",
            isPromotable: true,
            execute: function (command, clickedElement) {
                var column = new Adaptive.Column();
                column.width = "stretch";
                _this.cardElement.addColumn(column);
                _this.insertChild(card_designer_surface_1.CardDesignerSurface.cardElementPeerRegistry.createPeerInstance(_this.designerSurface, _this, column));
            }
        }));
    };
    ColumnSetPeer.prototype.internalGetTreeItemText = function () {
        var columnCount = this.cardElement.getCount();
        switch (columnCount) {
            case 0:
                return "No column";
            case 1:
                return "1 column";
            default:
                return columnCount + " columns";
        }
    };
    ColumnSetPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        var _this = this;
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, ContainerPeer.minHeightProperty, ContainerPeer.styleProperty, ContainerPeer.bleedProperty);
        propertySheet.add(PropertySheetCategory.SelectionAction, ContainerPeer.selectActionProperty);
        if (this.cardElement.selectAction) {
            var selectActionPeer = card_designer_surface_1.CardDesignerSurface.actionPeerRegistry.createPeerInstance(this.designerSurface, null, this.cardElement.selectAction);
            selectActionPeer.onChanged = function (sender, updatePropertySheet) { _this.changed(updatePropertySheet); };
            var subPropertySheet = new PropertySheet(false);
            selectActionPeer.populatePropertySheet(subPropertySheet, PropertySheetCategory.SelectionAction);
            subPropertySheet.remove(ActionPeer.iconUrlProperty, ActionPeer.styleProperty);
            propertySheet.add(PropertySheetCategory.SelectionAction, new SubPropertySheetEntry(shared_1.Versions.v1_2, this.cardElement.selectAction, subPropertySheet));
        }
    };
    ColumnSetPeer.prototype.canDrop = function (peer) {
        return true;
    };
    return ColumnSetPeer;
}(TypedCardElementPeer));
exports.ColumnSetPeer = ColumnSetPeer;
var ContainerPeer = /** @class */ (function (_super) {
    __extends(ContainerPeer, _super);
    function ContainerPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContainerPeer.prototype.isContainer = function () {
        return true;
    };
    ContainerPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        var _this = this;
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(PropertySheetCategory.LayoutCategory, ContainerPeer.minHeightProperty, ContainerPeer.verticalContentAlignmentProperty);
        propertySheet.add(PropertySheetCategory.StyleCategory, ContainerPeer.styleProperty, ContainerPeer.bleedProperty);
        propertySheet.add("Background image", ContainerPeer.backgroundImageProperty);
        propertySheet.add(PropertySheetCategory.SelectionAction, ContainerPeer.selectActionProperty);
        if (this.cardElement.selectAction) {
            var selectActionPeer = card_designer_surface_1.CardDesignerSurface.actionPeerRegistry.createPeerInstance(this.designerSurface, null, this.cardElement.selectAction);
            selectActionPeer.onChanged = function (sender, updatePropertySheet) { _this.changed(updatePropertySheet); };
            var subPropertySheet = new PropertySheet(false);
            selectActionPeer.populatePropertySheet(subPropertySheet, PropertySheetCategory.SelectionAction);
            subPropertySheet.remove(ActionPeer.iconUrlProperty, ActionPeer.styleProperty);
            propertySheet.add(PropertySheetCategory.SelectionAction, new SubPropertySheetEntry(shared_1.Versions.v1_2, this.cardElement.selectAction, subPropertySheet));
        }
    };
    ContainerPeer.selectActionProperty = new ActionPropertyEditor(shared_1.Versions.v1_0, "selectAction", "Action type", [Adaptive.ShowCardAction.JsonTypeName], true);
    ContainerPeer.minHeightProperty = new NumberPropertyEditor(shared_1.Versions.v1_2, "minPixelHeight", "Minimum height in pixels");
    ContainerPeer.verticalContentAlignmentProperty = new EnumPropertyEditor(shared_1.Versions.v1_1, "verticalContentAlignment", "Vertical content alignment", Adaptive.VerticalAlignment);
    ContainerPeer.styleProperty = new ContainerStylePropertyEditor(shared_1.Versions.v1_0, "style", "Style");
    ContainerPeer.bleedProperty = new BooleanPropertyEditor(shared_1.Versions.v1_2, "bleed", "Bleed");
    ContainerPeer.backgroundImageProperty = new CompoundPropertyEditor(shared_1.Versions.v1_0, "backgroundImage", [
        new StringPropertyEditor(shared_1.Versions.v1_0, "url", "URL"),
        new EnumPropertyEditor(shared_1.Versions.v1_2, "fillMode", "Fill mode", Adaptive.FillMode),
        new EnumPropertyEditor(shared_1.Versions.v1_2, "horizontalAlignment", "Horizontal alignment", Adaptive.HorizontalAlignment),
        new EnumPropertyEditor(shared_1.Versions.v1_2, "verticalAlignment", "Vertical alignment", Adaptive.VerticalAlignment)
    ]);
    return ContainerPeer;
}(TypedCardElementPeer));
exports.ContainerPeer = ContainerPeer;
var ActionSetPeer = /** @class */ (function (_super) {
    __extends(ActionSetPeer, _super);
    function ActionSetPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ActionSetPeer.prototype.addAction = function (action) {
        this.cardElement.addAction(action);
        this.insertChild(card_designer_surface_1.CardDesignerSurface.actionPeerRegistry.createPeerInstance(this.designerSurface, this, action));
    };
    ActionSetPeer.prototype.internalAddCommands = function (commands) {
        var _this = this;
        _super.prototype.internalAddCommands.call(this, commands);
        commands.push(new peer_command_1.PeerCommand({
            name: "Add an action",
            iconClass: "acd-icon-bolt",
            execute: function (command, clickedElement) {
                var popupMenu = new Controls.PopupMenu();
                for (var i = 0; i < Adaptive.AdaptiveCard.actionTypeRegistry.getItemCount(); i++) {
                    var menuItem = new Controls.DropDownItem(i.toString(), Adaptive.AdaptiveCard.actionTypeRegistry.getItemAt(i).typeName);
                    menuItem.onClick = function (clickedItem) {
                        var registryItem = Adaptive.AdaptiveCard.actionTypeRegistry.getItemAt(Number.parseInt(clickedItem.key));
                        var action = registryItem.createInstance();
                        action.title = registryItem.typeName;
                        _this.addAction(action);
                        popupMenu.closePopup();
                    };
                    popupMenu.items.add(menuItem);
                }
                popupMenu.popup(clickedElement);
            }
        }));
    };
    return ActionSetPeer;
}(TypedCardElementPeer));
exports.ActionSetPeer = ActionSetPeer;
var ImageSetPeer = /** @class */ (function (_super) {
    __extends(ImageSetPeer, _super);
    function ImageSetPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImageSetPeer.prototype.internalAddCommands = function (commands) {
        var _this = this;
        _super.prototype.internalAddCommands.call(this, commands);
        commands.push(new peer_command_1.PeerCommand({
            name: "Add an image",
            iconClass: "acd-icon-image",
            isPromotable: true,
            execute: function (command, clickedElement) {
                var newImage = new Adaptive.Image();
                _this.cardElement.addImage(newImage);
                _this.insertChild(card_designer_surface_1.CardDesignerSurface.cardElementPeerRegistry.createPeerInstance(_this.designerSurface, _this, newImage));
            }
        }));
    };
    ImageSetPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, ImageSetPeer.ImageSizeProperty);
    };
    ImageSetPeer.ImageSizeProperty = new EnumPropertyEditor(shared_1.Versions.v1_0, "imageSize", "Image size", Adaptive.Size);
    return ImageSetPeer;
}(TypedCardElementPeer));
exports.ImageSetPeer = ImageSetPeer;
var ImagePeer = /** @class */ (function (_super) {
    __extends(ImagePeer, _super);
    function ImagePeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ImagePeer.prototype, "isParentImageSet", {
        get: function () {
            return this.parent && this.parent instanceof ImageSetPeer;
        },
        enumerable: true,
        configurable: true
    });
    ImagePeer.prototype.isDraggable = function () {
        return !this.isParentImageSet;
    };
    ImagePeer.prototype.getBoundingRect = function () {
        if (this.isParentImageSet) {
            var designSurfaceOffset = this.designerSurface.getDesignerSurfaceOffset();
            var actionBoundingRect = this.cardElement.renderedElement.getBoundingClientRect();
            return new miscellaneous_1.Rect(actionBoundingRect.top - designSurfaceOffset.y, actionBoundingRect.right - designSurfaceOffset.x, actionBoundingRect.bottom - designSurfaceOffset.y, actionBoundingRect.left - designSurfaceOffset.x);
        }
        else {
            return _super.prototype.getBoundingRect.call(this);
        }
    };
    ImagePeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        var _this = this;
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, ImagePeer.urlProperty, ImagePeer.altTextProperty);
        if (!this.isParentImageSet) {
            propertySheet.add(PropertySheetCategory.LayoutCategory, ImagePeer.sizeProperty, ImagePeer.pixelWidthProperty, ImagePeer.pixelHeightProperty);
            propertySheet.add(PropertySheetCategory.StyleCategory, ImagePeer.styleProperty, ImagePeer.backgroundColorProperty);
            propertySheet.add(PropertySheetCategory.SelectionAction, ContainerPeer.selectActionProperty);
            if (this.cardElement.selectAction) {
                var selectActionPeer = card_designer_surface_1.CardDesignerSurface.actionPeerRegistry.createPeerInstance(this.designerSurface, null, this.cardElement.selectAction);
                selectActionPeer.onChanged = function (sender, updatePropertySheet) { _this.changed(updatePropertySheet); };
                var subPropertySheet = new PropertySheet(false);
                selectActionPeer.populatePropertySheet(subPropertySheet, PropertySheetCategory.SelectionAction);
                subPropertySheet.remove(ActionPeer.iconUrlProperty, ActionPeer.styleProperty);
                propertySheet.add(PropertySheetCategory.SelectionAction, new SubPropertySheetEntry(shared_1.Versions.v1_2, this.cardElement.selectAction, subPropertySheet));
            }
        }
    };
    ImagePeer.urlProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "url", "Url");
    ImagePeer.altTextProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "altText", "Alternate text");
    ImagePeer.sizeProperty = new EnumPropertyEditor(shared_1.Versions.v1_0, "size", "Size", Adaptive.Size);
    ImagePeer.pixelWidthProperty = new NumberPropertyEditor(shared_1.Versions.v1_1, "pixelWidth", "Width in pixels");
    ImagePeer.pixelHeightProperty = new NumberPropertyEditor(shared_1.Versions.v1_1, "pixelHeight", "Height in pixels");
    ImagePeer.styleProperty = new EnumPropertyEditor(shared_1.Versions.v1_0, "style", "Style", Adaptive.ImageStyle);
    ImagePeer.backgroundColorProperty = new StringPropertyEditor(shared_1.Versions.v1_1, "backgroundColor", "Background color");
    return ImagePeer;
}(TypedCardElementPeer));
exports.ImagePeer = ImagePeer;
var MediaPeer = /** @class */ (function (_super) {
    __extends(MediaPeer, _super);
    function MediaPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MediaPeer.prototype.internalGetTreeItemText = function () {
        if (this.cardElement.selectedMediaType == "audio") {
            return "audio";
        }
        else if (this.cardElement.selectedMediaType == "video") {
            return "video";
        }
        else {
            return _super.prototype.internalGetTreeItemText.call(this);
        }
    };
    MediaPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, MediaPeer.altTextProperty, MediaPeer.posterUrlProperty);
        propertySheet.add("Sources", MediaPeer.sourcesProperty);
    };
    MediaPeer.altTextProperty = new StringPropertyEditor(shared_1.Versions.v1_1, "altText", "Alternate text");
    MediaPeer.posterUrlProperty = new StringPropertyEditor(shared_1.Versions.v1_1, "posterUrl", "Poster URL");
    MediaPeer.sourcesProperty = new NameValuePairPropertyEditor(shared_1.Versions.v1_1, "sources", "url", "mimeType", function (name, value) { return new Adaptive.MediaSource(name, value); }, "URL", "MIME type", "Add a new source", "No source has been defined.");
    return MediaPeer;
}(TypedCardElementPeer));
exports.MediaPeer = MediaPeer;
var FactSetPeer = /** @class */ (function (_super) {
    __extends(FactSetPeer, _super);
    function FactSetPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FactSetPeer.prototype.internalGetTreeItemText = function () {
        if (this.cardElement.facts.length == 0) {
            return "No fact";
        }
        var allNames = this.cardElement.facts.map(function (value, index, array) {
            return value.name;
        });
        return allNames.join(", ");
    };
    FactSetPeer.prototype.initializeCardElement = function () {
        _super.prototype.initializeCardElement.call(this);
        this.cardElement.facts.push(new Adaptive.Fact("Fact 1", "Value 1"), new Adaptive.Fact("Fact 2", "Value 2"));
    };
    FactSetPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add("Facts", FactSetPeer.factsProperty);
        propertySheet.remove(CardElementPeer.horizontalAlignmentProperty);
    };
    FactSetPeer.factsProperty = new NameValuePairPropertyEditor(shared_1.Versions.v1_0, "facts", "name", "value", function (name, value) { return new Adaptive.Fact(name, value); }, "Name", "Value", "Add a new fact", "This FactSet is empty.");
    return FactSetPeer;
}(TypedCardElementPeer));
exports.FactSetPeer = FactSetPeer;
var InputPeer = /** @class */ (function (_super) {
    __extends(InputPeer, _super);
    function InputPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InputPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add("Validation", InputPeer.validationProperty);
        propertySheet.remove(CardElementPeer.horizontalAlignmentProperty, CardElementPeer.heightProperty);
    };
    InputPeer.defaultValueProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "defaultValue", "Default value");
    InputPeer.validationProperty = new CompoundPropertyEditor(shared_1.Versions.vNext, "validation", [
        new EnumPropertyEditor(shared_1.Versions.vNext, "necessity", "Necessity", Adaptive.InputValidationNecessity),
        new StringPropertyEditor(shared_1.Versions.vNext, "errorMessage", "Error message")
    ]);
    return InputPeer;
}(TypedCardElementPeer));
exports.InputPeer = InputPeer;
var TextInputPeer = /** @class */ (function (_super) {
    __extends(TextInputPeer, _super);
    function TextInputPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextInputPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        var _this = this;
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, TextInputPeer.placeholderProperty, TextInputPeer.isMultilineProperty);
        if (!this.cardElement.isMultiline) {
            propertySheet.add(PropertySheetCategory.DefaultCategory, TextInputPeer.styleProperty);
        }
        propertySheet.add(PropertySheetCategory.InlineAction, TextInputPeer.inlineActionProperty);
        if (this.cardElement.inlineAction) {
            var inlineActionPeer = card_designer_surface_1.CardDesignerSurface.actionPeerRegistry.createPeerInstance(this.designerSurface, null, this.cardElement.inlineAction);
            inlineActionPeer.onChanged = function (sender, updatePropertySheet) { _this.changed(updatePropertySheet); };
            var subPropertySheet = new PropertySheet(false);
            inlineActionPeer.populatePropertySheet(subPropertySheet, PropertySheetCategory.InlineAction);
            subPropertySheet.remove(ActionPeer.styleProperty);
            propertySheet.add(PropertySheetCategory.InlineAction, new SubPropertySheetEntry(shared_1.Versions.v1_2, this.cardElement.inlineAction, subPropertySheet));
        }
        propertySheet.add(defaultCategory, TextInputPeer.maxLengthProperty, TextInputPeer.defaultValueProperty);
    };
    TextInputPeer.prototype.initializeCardElement = function () {
        _super.prototype.initializeCardElement.call(this);
        this.cardElement.placeholder = "Placeholder text";
    };
    TextInputPeer.placeholderProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "placeholder", "Placeholder");
    TextInputPeer.isMultilineProperty = new BooleanPropertyEditor(shared_1.Versions.v1_0, "isMultiline", "Multi-line", true);
    TextInputPeer.styleProperty = new EnumPropertyEditor(shared_1.Versions.v1_0, "style", "Style", Adaptive.InputTextStyle);
    TextInputPeer.maxLengthProperty = new NumberPropertyEditor(shared_1.Versions.v1_0, "maxLength", "Maximum length");
    TextInputPeer.inlineActionProperty = new ActionPropertyEditor(shared_1.Versions.v1_2, "inlineAction", "Action type", [Adaptive.ShowCardAction.JsonTypeName], true);
    return TextInputPeer;
}(InputPeer));
exports.TextInputPeer = TextInputPeer;
var NumberInputPeer = /** @class */ (function (_super) {
    __extends(NumberInputPeer, _super);
    function NumberInputPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberInputPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, NumberInputPeer.placeholderProperty, NumberInputPeer.defaultValueProperty, NumberInputPeer.minProperty, NumberInputPeer.maxProperty);
    };
    NumberInputPeer.prototype.initializeCardElement = function () {
        _super.prototype.initializeCardElement.call(this);
        this.cardElement.placeholder = "Placeholder text";
    };
    NumberInputPeer.placeholderProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "placeholder", "Placeholder");
    NumberInputPeer.minProperty = new NumberPropertyEditor(shared_1.Versions.v1_0, "min", "Minimum value");
    NumberInputPeer.maxProperty = new NumberPropertyEditor(shared_1.Versions.v1_0, "max", "Maximum value");
    return NumberInputPeer;
}(InputPeer));
exports.NumberInputPeer = NumberInputPeer;
var DateInputPeer = /** @class */ (function (_super) {
    __extends(DateInputPeer, _super);
    function DateInputPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DateInputPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, DateInputPeer.defaultValueProperty, DateInputPeer.minProperty, DateInputPeer.maxProperty);
    };
    DateInputPeer.minProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "min", "Minimum value");
    DateInputPeer.maxProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "max", "Maximum value");
    return DateInputPeer;
}(InputPeer));
exports.DateInputPeer = DateInputPeer;
var TimeInputPeer = /** @class */ (function (_super) {
    __extends(TimeInputPeer, _super);
    function TimeInputPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TimeInputPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, TimeInputPeer.defaultValueProperty, TimeInputPeer.minProperty, TimeInputPeer.maxProperty);
    };
    TimeInputPeer.minProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "min", "Minimum value");
    TimeInputPeer.maxProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "max", "Maximum value");
    return TimeInputPeer;
}(InputPeer));
exports.TimeInputPeer = TimeInputPeer;
var ToggleInputPeer = /** @class */ (function (_super) {
    __extends(ToggleInputPeer, _super);
    function ToggleInputPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleInputPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, ToggleInputPeer.titleProperty, ToggleInputPeer.valueOnProperty, ToggleInputPeer.valueOffProperty, ToggleInputPeer.defaultValueProperty);
        propertySheet.add(PropertySheetCategory.LayoutCategory, ToggleInputPeer.wrapProperty);
    };
    ToggleInputPeer.prototype.initializeCardElement = function () {
        this.cardElement.title = "New Input.Toggle";
    };
    ToggleInputPeer.titleProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "title", "Title");
    ToggleInputPeer.valueOnProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "valueOn", "Value when on");
    ToggleInputPeer.valueOffProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "valueOff", "Value when off");
    ToggleInputPeer.wrapProperty = new BooleanPropertyEditor(shared_1.Versions.v1_2, "wrap", "Wrap");
    return ToggleInputPeer;
}(InputPeer));
exports.ToggleInputPeer = ToggleInputPeer;
var ChoiceSetInputPeer = /** @class */ (function (_super) {
    __extends(ChoiceSetInputPeer, _super);
    function ChoiceSetInputPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChoiceSetInputPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, ChoiceSetInputPeer.placeholderProperty, ChoiceSetInputPeer.isMultiselectProperty, ChoiceSetInputPeer.isCompactProperty, ChoiceSetInputPeer.defaultValueProperty);
        propertySheet.add(PropertySheetCategory.LayoutCategory, ToggleInputPeer.wrapProperty);
        propertySheet.add("Choices", ChoiceSetInputPeer.choicesProperty);
    };
    ChoiceSetInputPeer.prototype.initializeCardElement = function () {
        this.cardElement.placeholder = "Placeholder text";
        this.cardElement.choices.push(new Adaptive.Choice("Choice 1", "Choice 1"), new Adaptive.Choice("Choice 2", "Choice 2"));
    };
    ChoiceSetInputPeer.placeholderProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "placeholder", "Placeholder");
    ChoiceSetInputPeer.isMultiselectProperty = new BooleanPropertyEditor(shared_1.Versions.v1_0, "isMultiSelect", "Allow multi selection");
    ChoiceSetInputPeer.isCompactProperty = new BooleanPropertyEditor(shared_1.Versions.v1_0, "isCompact", "Compact style");
    ChoiceSetInputPeer.wrapProperty = new BooleanPropertyEditor(shared_1.Versions.v1_2, "wrap", "Wrap");
    ChoiceSetInputPeer.choicesProperty = new NameValuePairPropertyEditor(shared_1.Versions.v1_0, "choices", "title", "value", function (name, value) { return new Adaptive.Choice(name, value); }, "Title", "Value", "Add a new choice", "This ChoiceSet is empty");
    return ChoiceSetInputPeer;
}(InputPeer));
exports.ChoiceSetInputPeer = ChoiceSetInputPeer;
var TextBlockPeerInplaceEditor = /** @class */ (function (_super) {
    __extends(TextBlockPeerInplaceEditor, _super);
    function TextBlockPeerInplaceEditor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextBlockPeerInplaceEditor.prototype.close = function (applyChanges) {
        if (this.onClose) {
            this.onClose(applyChanges);
        }
    };
    TextBlockPeerInplaceEditor.prototype.initialize = function () {
        this._renderedElement.select();
    };
    TextBlockPeerInplaceEditor.prototype.applyChanges = function () {
        this.cardElement.text = this._renderedElement.value;
    };
    TextBlockPeerInplaceEditor.prototype.render = function () {
        var _this = this;
        this._renderedElement = document.createElement("textarea");
        this._renderedElement.className = "acd-textBlock-inplace-editor";
        this._renderedElement.value = this.cardElement.text;
        this._renderedElement.onkeydown = function (e) {
            switch (e.keyCode) {
                case Controls.KEY_ESCAPE:
                    _this.close(false);
                    e.preventDefault();
                    e.cancelBubble = true;
                    break;
                case Controls.KEY_ENTER:
                    _this.close(true);
                    e.preventDefault();
                    e.cancelBubble = true;
                    break;
            }
            return !e.cancelBubble;
        };
        this.cardElement.applyStylesTo(this._renderedElement);
        return this._renderedElement;
    };
    return TextBlockPeerInplaceEditor;
}(CardElementPeerInplaceEditor));
var TextBlockPeer = /** @class */ (function (_super) {
    __extends(TextBlockPeer, _super);
    function TextBlockPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextBlockPeer.prototype.createInplaceEditor = function () {
        return new TextBlockPeerInplaceEditor(this.cardElement);
    };
    TextBlockPeer.prototype.internalGetTreeItemText = function () {
        return this.cardElement.text;
    };
    TextBlockPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, TextBlockPeer.textProperty);
        propertySheet.add(PropertySheetCategory.LayoutCategory, TextBlockPeer.wrapProperty, TextBlockPeer.maxLinesProperty);
        propertySheet.add(PropertySheetCategory.StyleCategory, TextBlockPeer.fontTypeProperty, TextBlockPeer.sizeProperty, TextBlockPeer.weightProperty, TextBlockPeer.colorProperty, TextBlockPeer.subtleProperty);
    };
    TextBlockPeer.prototype.getToolTip = function () {
        return "Double click to edit";
    };
    TextBlockPeer.prototype.initializeCardElement = function () {
        if (!this.cardElement.text || this.cardElement.text == "") {
            this.cardElement.text = "New TextBlock";
        }
    };
    TextBlockPeer.textProperty = new StringPropertyEditor(shared_1.Versions.v1_0, "text", "Text", true);
    TextBlockPeer.wrapProperty = new BooleanPropertyEditor(shared_1.Versions.v1_0, "wrap", "Wrap");
    TextBlockPeer.maxLinesProperty = new NumberPropertyEditor(shared_1.Versions.v1_0, "maxLines", "Maximum lines", 0);
    TextBlockPeer.fontTypeProperty = new EnumPropertyEditor(shared_1.Versions.v1_2, "fontType", "Font type", Adaptive.FontType);
    TextBlockPeer.sizeProperty = new EnumPropertyEditor(shared_1.Versions.v1_0, "size", "Size", Adaptive.TextSize);
    TextBlockPeer.weightProperty = new EnumPropertyEditor(shared_1.Versions.v1_0, "weight", "Weight", Adaptive.TextWeight);
    TextBlockPeer.colorProperty = new EnumPropertyEditor(shared_1.Versions.v1_0, "color", "Color", Adaptive.TextColor);
    TextBlockPeer.subtleProperty = new BooleanPropertyEditor(shared_1.Versions.v1_0, "subtle", "Subtle");
    return TextBlockPeer;
}(TypedCardElementPeer));
exports.TextBlockPeer = TextBlockPeer;
var RichTextBlockPeer = /** @class */ (function (_super) {
    __extends(RichTextBlockPeer, _super);
    function RichTextBlockPeer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RichTextBlockPeer.prototype.internalGetTreeItemText = function () {
        return this.cardElement.asString();
    };
    RichTextBlockPeer.prototype.populatePropertySheet = function (propertySheet, defaultCategory) {
        if (defaultCategory === void 0) { defaultCategory = PropertySheetCategory.DefaultCategory; }
        _super.prototype.populatePropertySheet.call(this, propertySheet, defaultCategory);
        propertySheet.add(defaultCategory, new CustomPropertySheetEntry("*", function (context) {
            var infoTextBlock = new Adaptive.TextBlock();
            infoTextBlock.text = "Use the **Card Payload Editor** to edit the text of this RichTextBlock element.";
            infoTextBlock.wrap = true;
            infoTextBlock.spacing = Adaptive.Spacing.Large;
            infoTextBlock.separator = true;
            infoTextBlock.horizontalAlignment = Adaptive.HorizontalAlignment.Center;
            return infoTextBlock;
        }));
    };
    RichTextBlockPeer.prototype.initializeCardElement = function () {
        var textRun = new Adaptive.TextRun();
        textRun.text = "New RichTextBlock";
        this.cardElement.addInline(textRun);
    };
    return RichTextBlockPeer;
}(TypedCardElementPeer));
exports.RichTextBlockPeer = RichTextBlockPeer;


/***/ }),

/***/ "./src/dialog.ts":
/*!***********************!*\
  !*** ./src/dialog.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Dialog = /** @class */ (function () {
    function Dialog() {
        this._isOpen = false;
        this.onClose = null;
    }
    Dialog.prototype.open = function () {
        if (!this._isOpen) {
            this._overlayElement = document.createElement("div");
            this._overlayElement.className = "acd-dialog-overlay";
            var dialogFrameElement = document.createElement("div");
            dialogFrameElement.className = "acd-dialog-frame";
            dialogFrameElement.style.width = this.width;
            dialogFrameElement.style.height = this.height;
            var content = this.renderContent();
            content.style.flex = "1 1 auto";
            dialogFrameElement.appendChild(content);
            this._overlayElement.appendChild(dialogFrameElement);
            document.body.appendChild(this._overlayElement);
            this._isOpen = true;
        }
    };
    Dialog.prototype.close = function () {
        if (this._isOpen) {
            document.body.removeChild(this._overlayElement);
            this._isOpen = false;
            if (this.onClose) {
                this.onClose(this);
            }
        }
    };
    return Dialog;
}());
exports.Dialog = Dialog;


/***/ }),

/***/ "./src/downloader.ts":
/*!***************************!*\
  !*** ./src/downloader.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Downloader = /** @class */ (function () {
    function Downloader(url) {
        this.url = url;
        this.onError = null;
        this.onSuccess = null;
    }
    Downloader.prototype.error = function () {
        if (this.onError) {
            this.onError(this);
        }
    };
    Downloader.prototype.success = function () {
        if (this.onSuccess) {
            this.onSuccess(this);
        }
    };
    Downloader.prototype.download = function () {
        var _this = this;
        var request = new XMLHttpRequest();
        request.onerror = function () {
            _this.error();
        };
        request.onload = function () {
            _this._data = request.responseText;
            _this.success();
        };
        try {
            request.open("GET", this.url, true);
            request.send();
        }
        catch (e) {
            this.error();
        }
    };
    Object.defineProperty(Downloader.prototype, "data", {
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    return Downloader;
}());
exports.Downloader = Downloader;


/***/ }),

/***/ "./src/draggable-element.ts":
/*!**********************************!*\
  !*** ./src/draggable-element.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.DRAG_THRESHOLD = 10;
var DraggableElement = /** @class */ (function () {
    function DraggableElement() {
    }
    DraggableElement.prototype.releasePointerCapture = function (pointerId) {
        this.getDragSourceElement().releasePointerCapture(pointerId);
        this._isPointerDown = false;
    };
    Object.defineProperty(DraggableElement.prototype, "isPointerOver", {
        get: function () {
            return this._isPointerOver;
        },
        set: function (value) {
            if (value != this._isPointerOver) {
                this._isPointerOver = value;
                this.updateLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    DraggableElement.prototype.startDrag = function () {
        if (this.isDraggable() && !this.dragging) {
            this.dragging = true;
            if (this.onStartDrag) {
                this.onStartDrag(this);
            }
        }
    };
    DraggableElement.prototype.pointerDown = function (e) {
        if (!this._isPointerDown) {
            this._isPointerDown = true;
            this._lastClickedPoint = { x: e.offsetX, y: e.offsetY };
            this.getDragSourceElement().setPointerCapture(e.pointerId);
        }
    };
    DraggableElement.prototype.pointerUp = function (e) {
        if (this._isPointerDown) {
            this.releasePointerCapture(e.pointerId);
            this.endDrag();
        }
    };
    DraggableElement.prototype.pointerMove = function (e) {
        if (this._isPointerDown) {
            if (Math.abs(e.offsetX - this._lastClickedPoint.x) >= exports.DRAG_THRESHOLD || Math.abs(e.offsetY - this._lastClickedPoint.y) >= exports.DRAG_THRESHOLD) {
                this.releasePointerCapture(e.pointerId);
                this.startDrag();
            }
        }
    };
    DraggableElement.prototype.click = function (e) {
        if (this.onClick) {
            this.onDoubleClick(this);
        }
    };
    DraggableElement.prototype.doubleClick = function (e) {
        if (this.onDoubleClick) {
            this.onDoubleClick(this);
        }
    };
    DraggableElement.prototype.internalUpdateCssStyles = function () {
        // Do nothing in base implementation
    };
    DraggableElement.prototype.internalUpdateLayout = function () {
        // Do nothing in base implementation
    };
    DraggableElement.prototype.getDragSourceElement = function () {
        return this._renderedElement;
    };
    DraggableElement.prototype.isDraggable = function () {
        return true;
    };
    DraggableElement.prototype.endDrag = function () {
        if (this.dragging) {
            this.dragging = false;
            if (this.onEndDrag) {
                this.onEndDrag(this);
            }
        }
    };
    DraggableElement.prototype.updateLayout = function () {
        this.internalUpdateCssStyles();
        this.internalUpdateLayout();
    };
    DraggableElement.prototype.render = function () {
        var _this = this;
        this._renderedElement = this.internalRender();
        var dragSourceElement = this.getDragSourceElement();
        dragSourceElement.onclick = function (e) { _this.click(e); };
        dragSourceElement.ondblclick = function (e) { _this.doubleClick(e); };
        if (this.isDraggable()) {
            dragSourceElement.onmousedown = function (e) { e.preventDefault(); };
            dragSourceElement.onpointerenter = function () { _this.isPointerOver = true; };
            dragSourceElement.onpointerleave = function () { _this.isPointerOver = false; };
            dragSourceElement.onpointerdown = function (e) { _this.pointerDown(e); };
            dragSourceElement.onpointerup = function (e) { _this.pointerUp(e); };
            dragSourceElement.onpointermove = function (e) { _this.pointerMove(e); };
        }
        return this._renderedElement;
    };
    Object.defineProperty(DraggableElement.prototype, "renderedElement", {
        get: function () {
            return this._renderedElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DraggableElement.prototype, "dragging", {
        get: function () {
            return this._dragging;
        },
        set: function (value) {
            this._dragging = value;
            this.internalUpdateCssStyles();
        },
        enumerable: true,
        configurable: true
    });
    return DraggableElement;
}());
exports.DraggableElement = DraggableElement;


/***/ }),

/***/ "./src/fullscreen-handler.ts":
/*!***********************************!*\
  !*** ./src/fullscreen-handler.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var FullScreenHandler = /** @class */ (function () {
    function FullScreenHandler() {
        var _this = this;
        var untypedBody = document.body;
        if (typeof untypedBody.onfullscreenchange !== "undefined") {
            untypedBody.onfullscreenchange = function () { return _this.fullScrerenChanged(); };
        }
        else if (typeof untypedBody.onwebkitfullscreenchange !== "undefined") {
            untypedBody.onwebkitfullscreenchange = function () { return _this.fullScrerenChanged(); };
        }
        else if (typeof untypedBody.onwebkitfullscreenchange !== "undefined") {
            untypedBody.onmozfullscreenchange = function () { return _this.fullScrerenChanged(); };
        }
        else if (typeof untypedBody.onwebkitfullscreenchange !== "undefined") {
            untypedBody.MSFullscreenChange = function () { return _this.fullScrerenChanged(); };
        }
    }
    FullScreenHandler.prototype.fullScrerenChanged = function () {
        if (this.onFullScreenChanged) {
            this.onFullScreenChanged(this.isFullScreen);
        }
    };
    FullScreenHandler.prototype.enterFullScreen = function () {
        if (!this.isFullScreen) {
            var untypedBody = document.body;
            if (untypedBody.requestFullscreen) {
                untypedBody.requestFullscreen();
            }
            else if (untypedBody.webkitRequestFullscreen) {
                untypedBody.webkitRequestFullscreen();
            }
            else if (untypedBody.mozRequestFullScreen) {
                untypedBody.mozRequestFullScreen();
            }
            else if (untypedBody.msRequestFullscreen) {
                untypedBody.msRequestFullscreen();
            }
            else {
                alert("Your browser doesn't support fullscreen.");
            }
        }
    };
    FullScreenHandler.prototype.exitFullScreen = function () {
        if (this.isFullScreen) {
            var untypedDocument = document;
            if (untypedDocument.exitFullscreen) {
                untypedDocument.exitFullscreen();
            }
            else if (untypedDocument.webkitExitFullscreen) {
                untypedDocument.webkitExitFullscreen();
            }
            else if (untypedDocument.mozCancelFullScreen) {
                untypedDocument.mozCancelFullScreen();
            }
            else if (untypedDocument.msExitFullscreen) {
                untypedDocument.msExitFullscreen();
            }
        }
    };
    FullScreenHandler.prototype.toggleFullScreen = function () {
        if (this.isFullScreen) {
            this.exitFullScreen();
        }
        else {
            this.enterFullScreen();
        }
    };
    Object.defineProperty(FullScreenHandler.prototype, "isFullScreen", {
        get: function () {
            var untypedDocument = document;
            return untypedDocument.fullscreen || untypedDocument.webkitIsFullScreen || untypedDocument.mozFullScreen;
        },
        enumerable: true,
        configurable: true
    });
    return FullScreenHandler;
}());
exports.FullScreenHandler = FullScreenHandler;


/***/ }),

/***/ "./src/hostConfigs/cortana-skills-classic.json":
/*!*****************************************************!*\
  !*** ./src/hostConfigs/cortana-skills-classic.json ***!
  \*****************************************************/
/*! exports provided: spacing, separator, supportsInteractivity, fontTypes, containerStyles, imageSizes, actions, adaptiveCard, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"spacing\":{\"small\":3,\"default\":8,\"medium\":20,\"large\":30,\"extraLarge\":40,\"padding\":10},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#FF999999\"},\"supportsInteractivity\":true,\"fontTypes\":{\"default\":{\"fontFamily\":\"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\"fontSizes\":{\"small\":13,\"default\":15,\"medium\":18,\"large\":20,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}},\"monospace\":{\"fontFamily\":\"'Courier New', Courier, monospace\",\"fontSizes\":{\"small\":13,\"default\":15,\"medium\":18,\"large\":20,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}}},\"containerStyles\":{\"default\":{\"backgroundColor\":\"#000000\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#CC2E89FC\"},\"dark\":{\"default\":\"#FF999999\",\"subtle\":\"#99999999\"},\"light\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"attention\":{\"default\":\"#CCFF0000\",\"subtle\":\"#99FF0000\"},\"good\":{\"default\":\"#CC00FF00\",\"subtle\":\"#9900FF00\"},\"warning\":{\"default\":\"#CCFF9800\",\"subtle\":\"#99FF9800\"}}},\"emphasis\":{\"backgroundColor\":\"#33FFFFFF\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#CC2E89FC\"},\"dark\":{\"default\":\"#FF999999\",\"subtle\":\"#99999999\"},\"light\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"attention\":{\"default\":\"#CCFF0000\",\"subtle\":\"#99FF0000\"},\"good\":{\"default\":\"#CC00FF00\",\"subtle\":\"#9900FF00\"},\"warning\":{\"default\":\"#CCFF9800\",\"subtle\":\"#99FF9800\"}}},\"accent\":{\"backgroundColor\":\"#C7DEF9\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#CC2E89FC\"},\"dark\":{\"default\":\"#FF999999\",\"subtle\":\"#99999999\"},\"light\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"attention\":{\"default\":\"#CCFF0000\",\"subtle\":\"#99FF0000\"},\"good\":{\"default\":\"#CC00FF00\",\"subtle\":\"#9900FF00\"},\"warning\":{\"default\":\"#CCFF9800\",\"subtle\":\"#99FF9800\"}}},\"good\":{\"backgroundColor\":\"#CCFFCC\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#CC2E89FC\"},\"dark\":{\"default\":\"#FF999999\",\"subtle\":\"#99999999\"},\"light\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"attention\":{\"default\":\"#CCFF0000\",\"subtle\":\"#99FF0000\"},\"good\":{\"default\":\"#CC00FF00\",\"subtle\":\"#9900FF00\"},\"warning\":{\"default\":\"#CCFF9800\",\"subtle\":\"#99FF9800\"}}},\"attention\":{\"backgroundColor\":\"#FFC5B2\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#CC2E89FC\"},\"dark\":{\"default\":\"#FF999999\",\"subtle\":\"#99999999\"},\"light\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"attention\":{\"default\":\"#CCFF0000\",\"subtle\":\"#99FF0000\"},\"good\":{\"default\":\"#CC00FF00\",\"subtle\":\"#9900FF00\"},\"warning\":{\"default\":\"#CCFF9800\",\"subtle\":\"#99FF9800\"}}},\"warning\":{\"backgroundColor\":\"#FFE2B2\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#CC2E89FC\"},\"dark\":{\"default\":\"#FF999999\",\"subtle\":\"#99999999\"},\"light\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#99FFFFFF\"},\"attention\":{\"default\":\"#CCFF0000\",\"subtle\":\"#99FF0000\"},\"good\":{\"default\":\"#CC00FF00\",\"subtle\":\"#9900FF00\"},\"warning\":{\"default\":\"#CCFF9800\",\"subtle\":\"#99FF9800\"}}}},\"imageSizes\":{\"small\":40,\"medium\":68,\"large\":320},\"actions\":{\"maxActions\":5,\"spacing\":\"default\",\"buttonSpacing\":5,\"showCard\":{\"actionMode\":\"inline\",\"inlineTopMargin\":20},\"actionsOrientation\":\"horizontal\",\"actionAlignment\":\"stretch\"},\"adaptiveCard\":{\"allowCustomStyle\":false},\"imageSet\":{\"imageSize\":\"small\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"bolder\",\"wrap\":true},\"value\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"default\",\"wrap\":true},\"spacing\":12}}");

/***/ }),

/***/ "./src/hostConfigs/cortana-skills-dark.json":
/*!**************************************************!*\
  !*** ./src/hostConfigs/cortana-skills-dark.json ***!
  \**************************************************/
/*! exports provided: spacing, separator, fontTypes, fontSizes, fontWeights, imageSizes, containerStyles, actions, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"spacing\":{\"small\":4,\"default\":8,\"medium\":12,\"padding\":16,\"large\":20,\"extraLarge\":32},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#505050\"},\"fontTypes\":{\"default\":{\"fontFamily\":\"Segoe UI, Tahoma, Geneva, Verdana, sans-serif\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":16,\"large\":18,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}},\"monospace\":{\"fontFamily\":\"Courier New, Courier, monospace\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":16,\"large\":18,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}}},\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":16,\"large\":18,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600},\"imageSizes\":{\"small\":32,\"medium\":48,\"large\":96},\"containerStyles\":{\"default\":{\"foregroundColors\":{\"default\":{\"default\":\"#ffffffff\",\"subtle\":\"#b3ffffff\"},\"dark\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"light\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"accent\":{\"default\":\"#69afe5\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#ff92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#fff8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#ffd74654\",\"subtle\":\"#e5d74654\"}},\"backgroundColor\":\"#1f1f1f\"},\"emphasis\":{\"foregroundColors\":{\"default\":{\"default\":\"#ffffffff\",\"subtle\":\"#b3ffffff\"},\"dark\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"light\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"accent\":{\"default\":\"#69afe5\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#ff92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#fff8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#ffd74654\",\"subtle\":\"#e5d74654\"}},\"backgroundColor\":\"#737373\"},\"accent\":{\"backgroundColor\":\"#c7def9\",\"foregroundColors\":{\"default\":{\"default\":\"#1f1f1f\",\"subtle\":\"#b31f1f1f\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"accent\":{\"default\":\"#0078d4\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}},\"good\":{\"backgroundColor\":\"#ccffcc\",\"foregroundColors\":{\"default\":{\"default\":\"#1f1f1f\",\"subtle\":\"#b31f1f1f\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"accent\":{\"default\":\"#0078d4\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}},\"attention\":{\"backgroundColor\":\"#ffc5b2\",\"foregroundColors\":{\"default\":{\"default\":\"#1f1f1f\",\"subtle\":\"#b31f1f1f\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"accent\":{\"default\":\"#0078d4\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}},\"warning\":{\"backgroundColor\":\"#ffe2b2\",\"foregroundColors\":{\"default\":{\"default\":\"#1f1f1f\",\"subtle\":\"#b31f1f1f\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"accent\":{\"default\":\"#0078d4\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}}},\"actions\":{\"maxActions\":5,\"spacing\":\"Default\",\"buttonSpacing\":12,\"showCard\":{\"actionMode\":\"Inline\",\"inlineTopMargin\":16,\"style\":\"Emphasis\"},\"preExpandSingleShowCardAction\":false,\"actionsOrientation\":\"Horizontal\",\"actionAlignment\":\"Stretch\",\"iconSize\":20,\"iconPlacement\":\"leftOfTitle\"},\"imageSet\":{\"imageSize\":\"Medium\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"size\":\"Default\",\"color\":\"Default\",\"isSubtle\":false,\"weight\":\"Bolder\",\"warp\":true,\"maxWidth\":150},\"value\":{\"size\":\"Default\",\"color\":\"Default\",\"isSubtle\":false,\"weight\":\"Default\",\"warp\":true},\"spacing\":12}}");

/***/ }),

/***/ "./src/hostConfigs/cortana-skills-light.json":
/*!***************************************************!*\
  !*** ./src/hostConfigs/cortana-skills-light.json ***!
  \***************************************************/
/*! exports provided: spacing, separator, imageSizes, fontTypes, fontSizes, fontWeights, containerStyles, actions, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"spacing\":{\"small\":4,\"default\":8,\"medium\":12,\"padding\":16,\"large\":20,\"extraLarge\":32},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#E6E6E6\"},\"imageSizes\":{\"small\":32,\"medium\":48,\"large\":96},\"fontTypes\":{\"default\":{\"fontFamily\":\"Segoe UI, Tahoma, Geneva, Verdana, sans-serif\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":16,\"large\":18,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}},\"monospace\":{\"fontFamily\":\"Courier New, Courier, monospace\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":16,\"large\":18,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}}},\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":16,\"large\":18,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600},\"containerStyles\":{\"default\":{\"foregroundColors\":{\"default\":{\"default\":\"#1f1f1f\",\"subtle\":\"#b31f1f1f\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"accent\":{\"default\":\"#0078d4\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}},\"backgroundColor\":\"#ffffff\"},\"emphasis\":{\"foregroundColors\":{\"default\":{\"default\":\"#1f1f1f\",\"subtle\":\"#b31f1f1f\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"accent\":{\"default\":\"#0078d4\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}},\"backgroundColor\":\"#D2D2D2\"},\"accent\":{\"backgroundColor\":\"#C7DEF9\",\"foregroundColors\":{\"default\":{\"default\":\"#1f1f1f\",\"subtle\":\"#b31f1f1f\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"accent\":{\"default\":\"#0078d4\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}},\"good\":{\"backgroundColor\":\"#CCFFCC\",\"foregroundColors\":{\"default\":{\"default\":\"#1f1f1f\",\"subtle\":\"#b31f1f1f\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"accent\":{\"default\":\"#0078d4\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}},\"attention\":{\"backgroundColor\":\"#FFC5B2\",\"foregroundColors\":{\"default\":{\"default\":\"#1f1f1f\",\"subtle\":\"#b31f1f1f\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"accent\":{\"default\":\"#0078d4\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}},\"warning\":{\"backgroundColor\":\"#FFE2B2\",\"foregroundColors\":{\"default\":{\"default\":\"#1f1f1f\",\"subtle\":\"#b31f1f1f\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#3e000000\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#3fffffff\"},\"accent\":{\"default\":\"#0078d4\",\"subtle\":\"#3e00aeef\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}}},\"actions\":{\"maxActions\":5,\"spacing\":\"Default\",\"buttonSpacing\":12,\"showCard\":{\"actionMode\":\"Inline\",\"inlineTopMargin\":16,\"style\":\"Emphasis\"},\"preExpandSingleShowCardAction\":false,\"actionsOrientation\":\"Horizontal\",\"actionAlignment\":\"Stretch\",\"iconSize\":20,\"iconPlacement\":\"leftOfTitle\"},\"imageSet\":{\"imageSize\":\"Medium\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"size\":\"Default\",\"color\":\"Default\",\"isSubtle\":false,\"weight\":\"Bolder\",\"wrap\":true,\"maxWidth\":150},\"value\":{\"size\":\"Default\",\"color\":\"Default\",\"isSubtle\":false,\"weight\":\"Default\",\"warp\":true},\"spacing\":12}}");

/***/ }),

/***/ "./src/hostConfigs/microsoft-teams-dark.json":
/*!***************************************************!*\
  !*** ./src/hostConfigs/microsoft-teams-dark.json ***!
  \***************************************************/
/*! exports provided: choiceSetInputValueSeparator, supportsInteractivity, spacing, separator, fontTypes, imageSizes, containerStyles, actions, adaptiveCard, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"choiceSetInputValueSeparator\":\",\",\"supportsInteractivity\":true,\"spacing\":{\"small\":8,\"default\":12,\"medium\":16,\"large\":20,\"extraLarge\":24,\"padding\":16},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#EEEEEE\"},\"fontTypes\":{\"default\":{\"fontFamily\":\"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":14,\"large\":18,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}},\"monospace\":{\"fontFamily\":\"'Courier New', Courier, monospace\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":14,\"large\":18,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}}},\"imageSizes\":{\"small\":32,\"medium\":52,\"large\":100},\"containerStyles\":{\"default\":{\"foregroundColors\":{\"default\":{\"default\":\"#ffffffff\",\"subtle\":\"#bfffffff\"},\"dark\":{\"default\":\"#ff201f1f\",\"subtle\":\"#ff2d2c2c\"},\"light\":{\"default\":\"#ffffffff\",\"subtle\":\"#bfffffff\"},\"accent\":{\"default\":\"#ffa6a7dc\",\"subtle\":\"#ff8b8cc7\"},\"good\":{\"default\":\"#ff92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#fff8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#ffd74654\",\"subtle\":\"#e5d74654\"}},\"backgroundColor\":\"#ff2d2c2c\"},\"emphasis\":{\"foregroundColors\":{\"default\":{\"default\":\"#ffffffff\",\"subtle\":\"#bfffffff\"},\"dark\":{\"default\":\"#ff201f1f\",\"subtle\":\"#ff2d2c2c\"},\"light\":{\"default\":\"#ffffffff\",\"subtle\":\"#bfffffff\"},\"accent\":{\"default\":\"#ffa6a7dc\",\"subtle\":\"#ff8b8cc7\"},\"good\":{\"default\":\"#ff92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#fff8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#ffd74654\",\"subtle\":\"#e5d74654\"}},\"backgroundColor\":\"#ff292828\"},\"accent\":{\"backgroundColor\":\"#C7DEF9\",\"foregroundColors\":{\"default\":{\"default\":\"#ff201f1f\",\"subtle\":\"#ff2d2c2c\"},\"dark\":{\"default\":\"#ff201f1f\",\"subtle\":\"#ff2d2c2c\"},\"light\":{\"default\":\"#ffffffff\",\"subtle\":\"#bfffffff\"},\"accent\":{\"default\":\"#ffa6a7dc\",\"subtle\":\"#ff8b8cc7\"},\"good\":{\"default\":\"#ff92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#fff8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#ffd74654\",\"subtle\":\"#e5d74654\"}}},\"good\":{\"backgroundColor\":\"#CCFFCC\",\"foregroundColors\":{\"default\":{\"default\":\"#ff201f1f\",\"subtle\":\"#ff2d2c2c\"},\"dark\":{\"default\":\"#ff201f1f\",\"subtle\":\"#ff2d2c2c\"},\"light\":{\"default\":\"#ffffffff\",\"subtle\":\"#bfffffff\"},\"accent\":{\"default\":\"#ffa6a7dc\",\"subtle\":\"#ff8b8cc7\"},\"good\":{\"default\":\"#ff92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#fff8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#ffd74654\",\"subtle\":\"#e5d74654\"}}},\"attention\":{\"backgroundColor\":\"#FFC5B2\",\"foregroundColors\":{\"default\":{\"default\":\"#ff201f1f\",\"subtle\":\"#ff2d2c2c\"},\"dark\":{\"default\":\"#ff201f1f\",\"subtle\":\"#ff2d2c2c\"},\"light\":{\"default\":\"#ffffffff\",\"subtle\":\"#bfffffff\"},\"accent\":{\"default\":\"#ffa6a7dc\",\"subtle\":\"#ff8b8cc7\"},\"good\":{\"default\":\"#ff92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#fff8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#ffd74654\",\"subtle\":\"#e5d74654\"}}},\"warning\":{\"backgroundColor\":\"#FFE2B2\",\"foregroundColors\":{\"default\":{\"default\":\"#ff201f1f\",\"subtle\":\"#ff2d2c2c\"},\"dark\":{\"default\":\"#ff201f1f\",\"subtle\":\"#ff2d2c2c\"},\"light\":{\"default\":\"#ffffffff\",\"subtle\":\"#bfffffff\"},\"accent\":{\"default\":\"#ffa6a7dc\",\"subtle\":\"#ff8b8cc7\"},\"good\":{\"default\":\"#ff92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#fff8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#ffd74654\",\"subtle\":\"#e5d74654\"}}}},\"actions\":{\"maxActions\":6,\"spacing\":\"Default\",\"buttonSpacing\":8,\"showCard\":{\"actionMode\":\"Inline\",\"inlineTopMargin\":16,\"style\":\"emphasis\"},\"preExpandSingleShowCardAction\":false,\"actionsOrientation\":\"Horizontal\",\"actionAlignment\":\"Left\"},\"adaptiveCard\":{\"allowCustomStyle\":false},\"imageSet\":{\"imageSize\":\"Medium\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"size\":\"Default\",\"color\":\"Default\",\"isSubtle\":false,\"weight\":\"Bolder\",\"warp\":true},\"value\":{\"size\":\"Default\",\"color\":\"Default\",\"isSubtle\":false,\"weight\":\"Default\",\"warp\":true},\"spacing\":16}}");

/***/ }),

/***/ "./src/hostConfigs/microsoft-teams-light.json":
/*!****************************************************!*\
  !*** ./src/hostConfigs/microsoft-teams-light.json ***!
  \****************************************************/
/*! exports provided: choiceSetInputValueSeparator, supportsInteractivity, spacing, separator, imageSizes, fontTypes, containerStyles, actions, adaptiveCard, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"choiceSetInputValueSeparator\":\",\",\"supportsInteractivity\":true,\"spacing\":{\"small\":8,\"default\":12,\"medium\":16,\"large\":20,\"extraLarge\":24,\"padding\":16},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#EEEEEE\"},\"imageSizes\":{\"small\":32,\"medium\":52,\"large\":100},\"fontTypes\":{\"default\":{\"fontFamily\":\"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":14,\"large\":18,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}},\"monospace\":{\"fontFamily\":\"'Courier New', Courier, monospace\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":14,\"large\":18,\"extraLarge\":24},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}}},\"containerStyles\":{\"default\":{\"foregroundColors\":{\"default\":{\"default\":\"#ff252424\",\"subtle\":\"#bf252424\"},\"dark\":{\"default\":\"#252424\",\"subtle\":\"#bf252424\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#fff3f2f1\"},\"accent\":{\"default\":\"#6264a7\",\"subtle\":\"#8b8cc7\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}},\"backgroundColor\":\"#ffffff\"},\"emphasis\":{\"foregroundColors\":{\"default\":{\"default\":\"#ff252424\",\"subtle\":\"#bf252424\"},\"dark\":{\"default\":\"#252424\",\"subtle\":\"#bf252424\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#fff3f2f1\"},\"accent\":{\"default\":\"#6264a7\",\"subtle\":\"#8b8cc7\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}},\"backgroundColor\":\"#fff9f8f7\"},\"accent\":{\"backgroundColor\":\"#C7DEF9\",\"foregroundColors\":{\"default\":{\"default\":\"#ff252424\",\"subtle\":\"#bf252424\"},\"dark\":{\"default\":\"#252424\",\"subtle\":\"#bf252424\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#fff3f2f1\"},\"accent\":{\"default\":\"#6264a7\",\"subtle\":\"#8b8cc7\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}},\"good\":{\"backgroundColor\":\"#CCFFCC\",\"foregroundColors\":{\"default\":{\"default\":\"#ff252424\",\"subtle\":\"#bf252424\"},\"dark\":{\"default\":\"#252424\",\"subtle\":\"#bf252424\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#fff3f2f1\"},\"accent\":{\"default\":\"#6264a7\",\"subtle\":\"#8b8cc7\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}},\"attention\":{\"backgroundColor\":\"#FFC5B2\",\"foregroundColors\":{\"default\":{\"default\":\"#ff252424\",\"subtle\":\"#bf252424\"},\"dark\":{\"default\":\"#252424\",\"subtle\":\"#bf252424\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#fff3f2f1\"},\"accent\":{\"default\":\"#6264a7\",\"subtle\":\"#8b8cc7\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}},\"warning\":{\"backgroundColor\":\"#FFE2B2\",\"foregroundColors\":{\"default\":{\"default\":\"#ff252424\",\"subtle\":\"#bf252424\"},\"dark\":{\"default\":\"#252424\",\"subtle\":\"#bf252424\"},\"light\":{\"default\":\"#ffffff\",\"subtle\":\"#fff3f2f1\"},\"accent\":{\"default\":\"#6264a7\",\"subtle\":\"#8b8cc7\"},\"good\":{\"default\":\"#92c353\",\"subtle\":\"#e592c353\"},\"warning\":{\"default\":\"#f8d22a\",\"subtle\":\"#e5f8d22a\"},\"attention\":{\"default\":\"#c4314b\",\"subtle\":\"#e5c4314b\"}}}},\"actions\":{\"maxActions\":6,\"spacing\":\"Default\",\"buttonSpacing\":8,\"showCard\":{\"actionMode\":\"Inline\",\"inlineTopMargin\":16,\"style\":\"emphasis\"},\"preExpandSingleShowCardAction\":false,\"actionsOrientation\":\"Horizontal\",\"actionAlignment\":\"Left\"},\"adaptiveCard\":{\"allowCustomStyle\":false},\"imageSet\":{\"imageSize\":\"Medium\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"size\":\"Default\",\"color\":\"Default\",\"isSubtle\":false,\"weight\":\"Bolder\",\"warp\":true},\"value\":{\"size\":\"Default\",\"color\":\"Default\",\"isSubtle\":false,\"weight\":\"Default\",\"warp\":true},\"spacing\":16}}");

/***/ }),

/***/ "./src/hostConfigs/outlook-desktop.json":
/*!**********************************************!*\
  !*** ./src/hostConfigs/outlook-desktop.json ***!
  \**********************************************/
/*! exports provided: preExpandSingleShowCardAction, supportsInteractivity, spacing, separator, imageSizes, fontTypes, containerStyles, actions, adaptiveCard, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"preExpandSingleShowCardAction\":true,\"supportsInteractivity\":true,\"spacing\":{\"small\":10,\"default\":20,\"medium\":30,\"large\":40,\"extraLarge\":50,\"padding\":20},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#EEEEEE\"},\"imageSizes\":{\"small\":40,\"medium\":80,\"large\":160},\"fontTypes\":{\"default\":{\"fontFamily\":\"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}},\"monospace\":{\"fontFamily\":\"'Courier New', Courier, monospace\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}}},\"containerStyles\":{\"default\":{\"backgroundColor\":\"#FFFFFF\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"emphasis\":{\"backgroundColor\":\"#08000000\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"accent\":{\"backgroundColor\":\"#C7DEF9\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"good\":{\"backgroundColor\":\"#CCFFCC\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"attention\":{\"backgroundColor\":\"#FFC5B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"warning\":{\"backgroundColor\":\"#FFE2B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}}},\"actions\":{\"maxActions\":5,\"spacing\":\"default\",\"buttonSpacing\":10,\"showCard\":{\"actionMode\":\"inline\",\"inlineTopMargin\":16},\"actionsOrientation\":\"horizontal\",\"actionAlignment\":\"left\"},\"adaptiveCard\":{\"allowCustomStyle\":true},\"imageSet\":{\"imageSize\":\"medium\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"bolder\",\"wrap\":true,\"maxWidth\":150},\"value\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"default\",\"wrap\":true},\"spacing\":10}}");

/***/ }),

/***/ "./src/hostConfigs/render-to-image.json":
/*!**********************************************!*\
  !*** ./src/hostConfigs/render-to-image.json ***!
  \**********************************************/
/*! exports provided: spacing, separator, supportsInteractivity, fontTypes, containerStyles, imageSizes, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"spacing\":{\"small\":3,\"default\":8,\"medium\":20,\"large\":30,\"extraLarge\":40,\"padding\":10},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#EEEEEE\"},\"supportsInteractivity\":false,\"fontTypes\":{\"default\":{\"fontFamily\":\"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}},\"monospace\":{\"fontFamily\":\"'Courier New', Courier, monospace\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}}},\"containerStyles\":{\"default\":{\"backgroundColor\":\"#FFFFFF\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#c3ab23\",\"subtle\":\"#DDc3ab23\"}}},\"emphasis\":{\"backgroundColor\":\"#08000000\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#c3ab23\",\"subtle\":\"#DDc3ab23\"}}},\"accent\":{\"backgroundColor\":\"#C7DEF9\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"good\":{\"backgroundColor\":\"#CCFFCC\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"attention\":{\"backgroundColor\":\"#FFC5B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"warning\":{\"backgroundColor\":\"#FFE2B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}}},\"imageSizes\":{\"small\":40,\"medium\":80,\"large\":160},\"imageSet\":{\"imageSize\":\"medium\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"bolder\",\"wrap\":true,\"maxWidth\":150},\"value\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"default\",\"wrap\":true},\"spacing\":10}}");

/***/ }),

/***/ "./src/hostConfigs/sample.json":
/*!*************************************!*\
  !*** ./src/hostConfigs/sample.json ***!
  \*************************************/
/*! exports provided: spacing, separator, supportsInteractivity, fontTypes, containerStyles, imageSizes, actions, adaptiveCard, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"spacing\":{\"small\":3,\"default\":8,\"medium\":20,\"large\":30,\"extraLarge\":40,\"padding\":10},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#EEEEEE\"},\"supportsInteractivity\":true,\"fontTypes\":{\"default\":{\"fontFamily\":\"'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}},\"monospace\":{\"fontFamily\":\"'Courier New', Courier, monospace\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}}},\"containerStyles\":{\"default\":{\"backgroundColor\":\"#FFFFFF\",\"foregroundColors\":{\"default\":{\"default\":\"#000000\",\"subtle\":\"#767676\"},\"accent\":{\"default\":\"#0063B1\",\"subtle\":\"#0063B1\"},\"attention\":{\"default\":\"#FF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#c3ab23\",\"subtle\":\"#DDc3ab23\"}}},\"emphasis\":{\"backgroundColor\":\"#F0F0F0\",\"foregroundColors\":{\"default\":{\"default\":\"#000000\",\"subtle\":\"#767676\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#c3ab23\",\"subtle\":\"#DDc3ab23\"}}},\"accent\":{\"backgroundColor\":\"#C7DEF9\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"good\":{\"backgroundColor\":\"#CCFFCC\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"attention\":{\"backgroundColor\":\"#FFC5B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"warning\":{\"backgroundColor\":\"#FFE2B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}}},\"imageSizes\":{\"small\":40,\"medium\":80,\"large\":160},\"actions\":{\"maxActions\":5,\"spacing\":\"default\",\"buttonSpacing\":8,\"showCard\":{\"actionMode\":\"inline\",\"inlineTopMargin\":8},\"actionsOrientation\":\"horizontal\",\"actionAlignment\":\"stretch\"},\"adaptiveCard\":{\"allowCustomStyle\":false},\"imageSet\":{\"imageSize\":\"medium\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"bolder\",\"wrap\":true,\"maxWidth\":150},\"value\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"default\",\"wrap\":true},\"spacing\":8}}");

/***/ }),

/***/ "./src/hostConfigs/skype.json":
/*!************************************!*\
  !*** ./src/hostConfigs/skype.json ***!
  \************************************/
/*! exports provided: spacing, separator, supportsInteractivity, fontTypes, containerStyles, imageSizes, actions, adaptiveCard, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"spacing\":{\"small\":3,\"default\":8,\"medium\":20,\"large\":30,\"extraLarge\":40,\"padding\":10},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#EEEEEE\"},\"supportsInteractivity\":true,\"fontTypes\":{\"default\":{\"fontFamily\":\"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}},\"monospace\":{\"fontFamily\":\"'Courier New', Courier, monospace\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}}},\"containerStyles\":{\"default\":{\"backgroundColor\":\"#EAEAEA\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#c3ab23\",\"subtle\":\"#DDc3ab23\"}}},\"emphasis\":{\"backgroundColor\":\"#08000000\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#c3ab23\",\"subtle\":\"#DDc3ab23\"}}},\"accent\":{\"backgroundColor\":\"#C7DEF9\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"good\":{\"backgroundColor\":\"#CCFFCC\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"attention\":{\"backgroundColor\":\"#FFC5B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"warning\":{\"backgroundColor\":\"#FFE2B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}}},\"imageSizes\":{\"small\":40,\"medium\":80,\"large\":160},\"actions\":{\"maxActions\":5,\"spacing\":\"default\",\"buttonSpacing\":10,\"showCard\":{\"actionMode\":\"popup\",\"inlineTopMargin\":16},\"actionsOrientation\":\"vertical\",\"actionAlignment\":\"stretch\"},\"adaptiveCard\":{\"allowCustomStyle\":false},\"imageSet\":{\"imageSize\":\"medium\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"bolder\",\"wrap\":true,\"maxWidth\":150},\"value\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"default\",\"wrap\":true},\"spacing\":5}}");

/***/ }),

/***/ "./src/hostConfigs/webchat.json":
/*!**************************************!*\
  !*** ./src/hostConfigs/webchat.json ***!
  \**************************************/
/*! exports provided: spacing, separator, supportsInteractivity, fontTypes, containerStyles, imageSizes, actions, adaptiveCard, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"spacing\":{\"small\":3,\"default\":8,\"medium\":20,\"large\":30,\"extraLarge\":40,\"padding\":10},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#EEEEEE\"},\"supportsInteractivity\":true,\"fontTypes\":{\"default\":{\"fontFamily\":\"Calibri, sans-serif\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}},\"monospace\":{\"fontFamily\":\"'Courier New', Courier, monospace\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}}},\"containerStyles\":{\"default\":{\"backgroundColor\":\"#FFFFFF\",\"foregroundColors\":{\"default\":{\"default\":\"#000000\",\"subtle\":\"#767676\"},\"accent\":{\"default\":\"#0063B1\",\"subtle\":\"#0063B1\"},\"attention\":{\"default\":\"#FF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#c3ab23\",\"subtle\":\"#DDc3ab23\"}}},\"emphasis\":{\"backgroundColor\":\"#F0F0F0\",\"foregroundColors\":{\"default\":{\"default\":\"#000000\",\"subtle\":\"#767676\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#c3ab23\",\"subtle\":\"#DDc3ab23\"}}},\"accent\":{\"backgroundColor\":\"#C7DEF9\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"good\":{\"backgroundColor\":\"#CCFFCC\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"attention\":{\"backgroundColor\":\"#FFC5B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"warning\":{\"backgroundColor\":\"#FFE2B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}}},\"imageSizes\":{\"small\":40,\"medium\":80,\"large\":160},\"actions\":{\"maxActions\":100,\"spacing\":\"default\",\"buttonSpacing\":8,\"showCard\":{\"actionMode\":\"inline\",\"inlineTopMargin\":8},\"actionsOrientation\":\"vertical\",\"actionAlignment\":\"stretch\"},\"adaptiveCard\":{\"allowCustomStyle\":false},\"imageSet\":{\"imageSize\":\"medium\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"bolder\",\"wrap\":true,\"maxWidth\":150},\"value\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"default\",\"wrap\":true},\"spacing\":8}}");

/***/ }),

/***/ "./src/hostConfigs/windows-notification.json":
/*!***************************************************!*\
  !*** ./src/hostConfigs/windows-notification.json ***!
  \***************************************************/
/*! exports provided: spacing, separator, supportsInteractivity, fontTypes, containerStyles, imageSizes, actions, adaptiveCard, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"spacing\":{\"small\":3,\"default\":8,\"medium\":20,\"large\":30,\"extraLarge\":40,\"padding\":10},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#EEEEEE\"},\"supportsInteractivity\":true,\"fontTypes\":{\"default\":{\"fontFamily\":\"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}},\"monospace\":{\"fontFamily\":\"'Courier New', Courier, monospace\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":17,\"large\":21,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":600}}},\"containerStyles\":{\"default\":{\"backgroundColor\":\"#1F1F1F\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFF\",\"subtle\":\"#88FFFFFF\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#00FF00\",\"subtle\":\"#DD00FF00\"},\"warning\":{\"default\":\"#FFD800\",\"subtle\":\"#DDFFD800\"}}},\"emphasis\":{\"backgroundColor\":\"#19FFFFFF\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFF\",\"subtle\":\"#88FFFFFF\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FFD800\",\"subtle\":\"#DDFFD800\"},\"good\":{\"default\":\"#00FF00\",\"subtle\":\"#DD00FF00\"},\"warning\":{\"default\":\"#FF0000\",\"subtle\":\"#DDFF0000\"}}},\"accent\":{\"backgroundColor\":\"#C7DEF9\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"good\":{\"backgroundColor\":\"#CCFFCC\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"attention\":{\"backgroundColor\":\"#FFC5B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}},\"warning\":{\"backgroundColor\":\"#FFE2B2\",\"foregroundColors\":{\"default\":{\"default\":\"#333333\",\"subtle\":\"#EE333333\"},\"dark\":{\"default\":\"#000000\",\"subtle\":\"#66000000\"},\"light\":{\"default\":\"#FFFFFF\",\"subtle\":\"#33000000\"},\"accent\":{\"default\":\"#2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#cc3300\",\"subtle\":\"#DDcc3300\"},\"good\":{\"default\":\"#54a254\",\"subtle\":\"#DD54a254\"},\"warning\":{\"default\":\"#e69500\",\"subtle\":\"#DDe69500\"}}}},\"imageSizes\":{\"small\":40,\"medium\":80,\"large\":160},\"actions\":{\"maxActions\":5,\"spacing\":\"default\",\"buttonSpacing\":10,\"showCard\":{\"actionMode\":\"inline\",\"inlineTopMargin\":16},\"actionsOrientation\":\"horizontal\",\"actionAlignment\":\"stretch\"},\"adaptiveCard\":{\"allowCustomStyle\":false},\"imageSet\":{\"imageSize\":\"medium\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"bolder\",\"wrap\":true,\"maxWidth\":150},\"value\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"default\",\"wrap\":true},\"spacing\":10}}");

/***/ }),

/***/ "./src/hostConfigs/windows-timeline.json":
/*!***********************************************!*\
  !*** ./src/hostConfigs/windows-timeline.json ***!
  \***********************************************/
/*! exports provided: spacing, separator, supportsInteractivity, fontTypes, containerStyles, imageSizes, imageSet, factSet, default */
/***/ (function(module) {

module.exports = JSON.parse("{\"spacing\":{\"small\":4,\"default\":12,\"medium\":20,\"large\":30,\"extraLarge\":40,\"padding\":15},\"separator\":{\"lineThickness\":1,\"lineColor\":\"#EEEEEE\"},\"supportsInteractivity\":false,\"fontTypes\":{\"default\":{\"fontFamily\":\"Segoe UI, Helvetica Neue, Helvetica, sans-serif\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":20,\"large\":20,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":700}},\"monospace\":{\"fontFamily\":\"Segoe UI Mono\",\"fontSizes\":{\"small\":12,\"default\":14,\"medium\":20,\"large\":20,\"extraLarge\":26},\"fontWeights\":{\"lighter\":200,\"default\":400,\"bolder\":700}}},\"containerStyles\":{\"default\":{\"backgroundColor\":\"#FF535454\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#FF9C9E9F\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FFFF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#FF00FF00\",\"subtle\":\"#DD00FF00\"},\"warning\":{\"default\":\"#FFFFD800\",\"subtle\":\"#DDFFD800\"}}},\"emphasis\":{\"backgroundColor\":\"#33000000\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#FF9C9E9F\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FFFF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#FF00FF00\",\"subtle\":\"#DD00FF00\"},\"warning\":{\"default\":\"#FFFFD800\",\"subtle\":\"#DDFFD800\"}}},\"accent\":{\"backgroundColor\":\"#882E89FC\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#FF9C9E9F\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FFFF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#FF00FF00\",\"subtle\":\"#DD00FF00\"},\"warning\":{\"default\":\"#FFFFD800\",\"subtle\":\"#DDFFD800\"}}},\"attention\":{\"backgroundColor\":\"#DDFF0000\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#FF9C9E9F\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FFFF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#FF00FF00\",\"subtle\":\"#DD00FF00\"},\"warning\":{\"default\":\"#FFFFD800\",\"subtle\":\"#DDFFD800\"}}},\"good\":{\"backgroundColor\":\"#DD00FF00\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#FF9C9E9F\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FFFF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#FF00FF00\",\"subtle\":\"#DD00FF00\"},\"warning\":{\"default\":\"#FFFFD800\",\"subtle\":\"#DDFFD800\"}}},\"warning\":{\"backgroundColor\":\"#DDFFD800\",\"foregroundColors\":{\"default\":{\"default\":\"#FFFFFFFF\",\"subtle\":\"#FF9C9E9F\"},\"accent\":{\"default\":\"#FF2E89FC\",\"subtle\":\"#882E89FC\"},\"attention\":{\"default\":\"#FFFF0000\",\"subtle\":\"#DDFF0000\"},\"good\":{\"default\":\"#FF00FF00\",\"subtle\":\"#DD00FF00\"},\"warning\":{\"default\":\"#FFFFD800\",\"subtle\":\"#DDFFD800\"}}}},\"imageSizes\":{\"small\":40,\"medium\":80,\"large\":120},\"imageSet\":{\"imageSize\":\"medium\",\"maxImageHeight\":100},\"factSet\":{\"title\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"bolder\",\"wrap\":false,\"maxWidth\":150},\"value\":{\"color\":\"default\",\"size\":\"default\",\"isSubtle\":false,\"weight\":\"default\",\"wrap\":true},\"spacing\":10}}");

/***/ }),

/***/ "./src/miscellaneous.ts":
/*!******************************!*\
  !*** ./src/miscellaneous.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var Rect = /** @class */ (function () {
    function Rect(top, right, bottom, left) {
        if (top === void 0) { top = 0; }
        if (right === void 0) { right = 0; }
        if (bottom === void 0) { bottom = 0; }
        if (left === void 0) { left = 0; }
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
    }
    Rect.prototype.union = function (otherRect) {
        this.top = Math.min(this.top, otherRect.top);
        this.left = Math.min(this.left, otherRect.left);
        this.bottom = Math.max(this.bottom, otherRect.bottom);
        this.right = Math.max(this.right, otherRect.right);
    };
    Rect.prototype.isInside = function (point) {
        return point.x >= this.left && point.x <= this.right && point.y >= this.top && point.y <= this.bottom;
    };
    Object.defineProperty(Rect.prototype, "width", {
        get: function () {
            return this.right - this.left;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "height", {
        get: function () {
            return this.bottom - this.top;
        },
        enumerable: true,
        configurable: true
    });
    return Rect;
}());
exports.Rect = Rect;
var Utils = /** @class */ (function () {
    function Utils() {
    }
    Utils.isAbsoluteUrl = function (urlString) {
        return urlString.indexOf('http://') === 0
            || urlString.indexOf('https://') === 0;
    };
    Utils.joinPaths = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return args.map(function (part, i) {
            if (!part) {
                part = "";
            }
            if (i === 0) {
                return part.trim().replace(/[\/]*$/g, '');
            }
            else {
                return part.trim().replace(/(^[\/]*|[\/]*$)/g, '');
            }
        }).filter(function (x) { return x.length; }).join('/');
    };
    return Utils;
}());
exports.Utils = Utils;
exports.defaultHostConfig = new Adaptive.HostConfig({
    preExpandSingleShowCardAction: true,
    supportsInteractivity: true,
    spacing: {
        small: 10,
        default: 20,
        medium: 30,
        large: 40,
        extraLarge: 50,
        padding: 20
    },
    separator: {
        lineThickness: 1,
        lineColor: "#EEEEEE"
    },
    textAlign: {
        right: "right"
    },
    imageSizes: {
        small: 40,
        medium: 80,
        large: 160
    },
    fontStyles: {
        default: {
            fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
            fontSizes: {
                small: 12,
                default: 14,
                medium: 17,
                large: 21,
                extraLarge: 26
            },
            fontWeights: {
                lighter: 200,
                default: 400,
                bolder: 600
            }
        },
        monospace: {
            fontFamily: "'Courier New', Courier, monospace",
            fontSizes: {
                small: 12,
                default: 14,
                medium: 17,
                large: 21,
                extraLarge: 26
            },
            fontWeights: {
                lighter: 200,
                default: 400,
                bolder: 600
            }
        }
    },
    containerStyles: {
        default: {
            backgroundColor: "#f9f9f9",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        emphasis: {
            backgroundColor: "#08000000",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        accent: {
            backgroundColor: "#C7DEF9",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        good: {
            backgroundColor: "#CCFFCC",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        attention: {
            backgroundColor: "#FFC5B2",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        },
        warning: {
            backgroundColor: "#FFE2B2",
            foregroundColors: {
                default: {
                    default: "#333333",
                    subtle: "#EE333333"
                },
                dark: {
                    default: "#000000",
                    subtle: "#66000000"
                },
                light: {
                    default: "#FFFFFF",
                    subtle: "#33000000"
                },
                accent: {
                    default: "#2E89FC",
                    subtle: "#882E89FC"
                },
                attention: {
                    default: "#cc3300",
                    subtle: "#DDcc3300"
                },
                good: {
                    default: "#54a254",
                    subtle: "#DD54a254"
                },
                warning: {
                    default: "#e69500",
                    subtle: "#DDe69500"
                }
            }
        }
    },
    actions: {
        maxActions: 5,
        spacing: Adaptive.Spacing.Default,
        buttonSpacing: 10,
        showCard: {
            actionMode: Adaptive.ShowCardActionMode.Inline,
            inlineTopMargin: 16
        },
        actionsOrientation: Adaptive.Orientation.Horizontal,
        actionAlignment: Adaptive.ActionAlignment.Left
    },
    adaptiveCard: {
        allowCustomStyle: true
    },
    imageSet: {
        imageSize: Adaptive.Size.Medium,
        maxImageHeight: 100
    },
    factSet: {
        title: {
            color: Adaptive.TextColor.Default,
            size: Adaptive.TextSize.Default,
            isSubtle: false,
            weight: Adaptive.TextWeight.Bolder,
            wrap: true,
            maxWidth: 150,
        },
        value: {
            color: Adaptive.TextColor.Default,
            size: Adaptive.TextSize.Default,
            isSubtle: false,
            weight: Adaptive.TextWeight.Default,
            wrap: true,
        },
        spacing: 10
    }
});
exports.defaultHostConfig.cssClassNamePrefix = "default";


/***/ }),

/***/ "./src/peer-command.ts":
/*!*****************************!*\
  !*** ./src/peer-command.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var PeerCommand = /** @class */ (function () {
    function PeerCommand(init) {
        this.isPromotable = false;
        Object.assign(this, init);
    }
    PeerCommand.prototype.internalRender = function () {
        var _this = this;
        var buttonElement = document.createElement("button");
        buttonElement.type = "button";
        buttonElement.title = this.name;
        buttonElement.classList.add("acd-peerButton");
        buttonElement.classList.add(this.iconClass);
        buttonElement.style.display = "flex";
        buttonElement.style.flex = "0 0 auto";
        buttonElement.style.alignItems = "center";
        buttonElement.onclick = function (e) {
            if (_this.execute) {
                _this.execute(_this, buttonElement);
            }
        };
        buttonElement.onpointerdown = function (e) { e.cancelBubble = true; };
        return buttonElement;
    };
    PeerCommand.prototype.render = function () {
        this._renderedElement = this.internalRender();
        return this._renderedElement;
    };
    Object.defineProperty(PeerCommand.prototype, "renderedElement", {
        get: function () {
            return this._renderedElement;
        },
        enumerable: true,
        configurable: true
    });
    return PeerCommand;
}());
exports.PeerCommand = PeerCommand;


/***/ }),

/***/ "./src/sample-picker-dialog.ts":
/*!*************************************!*\
  !*** ./src/sample-picker-dialog.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var catalogue_1 = __webpack_require__(/*! ./catalogue */ "./src/catalogue.ts");
var ACData = __webpack_require__(/*! adaptivecards-templating */ "../adaptivecards-templating/lib/adaptivecards-templating.js");
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var dialog_1 = __webpack_require__(/*! ./dialog */ "./src/dialog.ts");
var miscellaneous_1 = __webpack_require__(/*! ./miscellaneous */ "./src/miscellaneous.ts");
var downloader_1 = __webpack_require__(/*! ./downloader */ "./src/downloader.ts");
var SamplePickerDialog = /** @class */ (function (_super) {
    __extends(SamplePickerDialog, _super);
    function SamplePickerDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SamplePickerDialog.prototype.renderMessage = function (message) {
        var _this = this;
        var templatePayload = {
            type: "AdaptiveCard",
            version: "1.0",
            body: [
                {
                    type: "TextBlock",
                    text: "**{title}**",
                    size: "large"
                },
                {
                    type: "Container",
                    verticalContentAlignment: "center",
                    height: "stretch",
                    items: [
                        {
                            type: "TextBlock",
                            text: "{message}",
                            horizontalAlignment: "center",
                            wrap: true
                        }
                    ]
                },
                {
                    type: "ActionSet",
                    horizontalAlignment: "right",
                    actions: [
                        {
                            type: "Action.Submit",
                            id: "cancel",
                            title: "Cancel"
                        }
                    ]
                }
            ]
        };
        var template = new ACData.Template(templatePayload);
        var context = new ACData.EvaluationContext();
        context.$root = {
            title: this.title,
            message: message
        };
        var expandedCardPayload = template.expand(context);
        var card = new Adaptive.AdaptiveCard();
        card.hostConfig = miscellaneous_1.defaultHostConfig;
        card.onExecuteAction = function (action) {
            if (action.id == "cancel") {
                _this.close();
            }
        };
        card.parse(expandedCardPayload);
        var renderedCard = card.render();
        renderedCard.style.height = "100%";
        this._renderedElement.innerHTML = "";
        this._renderedElement.appendChild(renderedCard);
    };
    SamplePickerDialog.prototype.renderCatalogue = function (catalogue) {
        var _this = this;
        var templatePayload = {
            type: "AdaptiveCard",
            version: "1.0",
            body: [
                {
                    type: "TextBlock",
                    text: "**{title}**",
                    size: "large"
                },
                {
                    type: "Container",
                    height: "stretch",
                    allowVerticalOverflow: true,
                    items: [
                        {
                            type: "Container",
                            $data: "{catalogue}",
                            minHeight: "36px",
                            verticalContentAlignment: "center",
                            selectAction: {
                                type: "Action.Submit",
                                data: {
                                    catalogueIndex: "{$index}"
                                }
                            },
                            spacing: "none",
                            items: [
                                {
                                    type: "TextBlock",
                                    text: "{displayName}",
                                    size: "medium"
                                }
                            ]
                        }
                    ]
                },
                {
                    type: "ActionSet",
                    horizontalAlignment: "right",
                    actions: [
                        {
                            type: "Action.Submit",
                            id: "cancel",
                            title: "Cancel"
                        }
                    ]
                }
            ]
        };
        var template = new ACData.Template(templatePayload);
        var context = new ACData.EvaluationContext();
        context.$root = {
            title: this.title,
            catalogue: catalogue
        };
        var expandedCardPayload = template.expand(context);
        var card = new Adaptive.AdaptiveCard();
        card.hostConfig = miscellaneous_1.defaultHostConfig;
        card.onExecuteAction = function (action) {
            if (action.id == "cancel") {
                _this.close();
            }
            else if (action instanceof Adaptive.SubmitAction) {
                _this._selectedSample = catalogue[action.data["catalogueIndex"]];
                _this.close();
            }
        };
        card.onParseElement = function (element, json, errors) {
            if (element instanceof Adaptive.CardElementContainer) {
                element.allowVerticalOverflow = Adaptive.getBoolValue(json["allowVerticalOverflow"], false);
            }
        };
        card.parse(expandedCardPayload);
        var renderedCard = card.render();
        renderedCard.style.height = "100%";
        this._renderedElement.innerHTML = "";
        this._renderedElement.appendChild(renderedCard);
    };
    SamplePickerDialog.prototype.renderContent = function () {
        var _this = this;
        this._renderedElement = document.createElement("div");
        this._renderedElement.style.overflow = "auto";
        this.renderMessage("Loading sample catalogue...");
        var downloader = new downloader_1.Downloader(this.catalogueUrl);
        downloader.onError = function () { _this.renderMessage("The catalogue couldn't be loaded. Please try again later."); };
        downloader.onSuccess = function () {
            if (!Adaptive.isNullOrEmpty(downloader.data)) {
                try {
                    var catalogue = catalogue_1.parseCatalogue(JSON.parse(downloader.data));
                    _this.renderCatalogue(catalogue);
                }
                catch (e) {
                    _this.renderMessage("The catalogue couldn't be loaded. Please try again later.");
                }
            }
        };
        downloader.download();
        return this._renderedElement;
    };
    Object.defineProperty(SamplePickerDialog.prototype, "selectedSample", {
        get: function () {
            return this._selectedSample;
        },
        enumerable: true,
        configurable: true
    });
    return SamplePickerDialog;
}(dialog_1.Dialog));
exports.SamplePickerDialog = SamplePickerDialog;


/***/ }),

/***/ "./src/settings-manager.ts":
/*!*********************************!*\
  !*** ./src/settings-manager.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SettingsManager = /** @class */ (function () {
    function SettingsManager() {
    }
    SettingsManager.determineIfStorageIsAvailable = function (type) {
        try {
            var storage = window[type];
            var x = '__storage_test__';
            storage.setItem(x, x);
            storage.removeItem(x);
            return true;
        }
        catch (e) {
            return e instanceof DOMException && (
            // everything except Firefox
            e.code === 22 ||
                // Firefox
                e.code === 1014 ||
                // test name field too, because code might not be present
                // everything except Firefox
                e.name === 'QuotaExceededError' ||
                // Firefox
                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&
                // acknowledge QuotaExceededError only if there's something already stored
                storage.length !== 0;
        }
    };
    SettingsManager.trySaveSetting = function (name, value) {
        if (SettingsManager.isLocalStorageAvailable) {
            localStorage.setItem(name, value);
        }
    };
    SettingsManager.tryLoadStringSetting = function (name) {
        if (SettingsManager.isLocalStorageAvailable) {
            var returnValue = localStorage.getItem(name);
            return {
                succeeded: true,
                value: returnValue
            };
        }
        else {
            return { succeeded: false };
        }
    };
    SettingsManager.tryLoadNumberSetting = function (name) {
        if (SettingsManager.isLocalStorageAvailable) {
            var returnValue = localStorage.getItem(name);
            return {
                succeeded: true,
                value: returnValue ? parseFloat(returnValue) : undefined
            };
        }
        else {
            return { succeeded: false };
        }
    };
    SettingsManager.tryLoadBooleanSetting = function (name, defaultValue) {
        if (SettingsManager.isLocalStorageAvailable) {
            var returnValue = localStorage.getItem(name);
            return {
                succeeded: true,
                value: returnValue ? returnValue == "true" : defaultValue
            };
        }
        else {
            return { succeeded: false };
        }
    };
    Object.defineProperty(SettingsManager, "isLocalStorageAvailable", {
        get: function () {
            if (!SettingsManager._isLocalStorageAvailable) {
                SettingsManager._isLocalStorageAvailable = SettingsManager.determineIfStorageIsAvailable("localStorage");
            }
            return SettingsManager._isLocalStorageAvailable;
        },
        enumerable: true,
        configurable: true
    });
    SettingsManager._isLocalStorageAvailable = undefined;
    return SettingsManager;
}());
exports.SettingsManager = SettingsManager;


/***/ }),

/***/ "./src/shared.ts":
/*!***********************!*\
  !*** ./src/shared.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var GlobalSettings = /** @class */ (function () {
    function GlobalSettings() {
    }
    GlobalSettings.enableDataBindingSupport = false;
    GlobalSettings.showDataStructureToolbox = false;
    GlobalSettings.showSampleDataEditorToolbox = false;
    GlobalSettings.showVersionPicker = false;
    return GlobalSettings;
}());
exports.GlobalSettings = GlobalSettings;
var Versions = /** @class */ (function () {
    function Versions() {
    }
    Versions.v1_0 = new Adaptive.Version(1, 0);
    Versions.v1_1 = new Adaptive.Version(1, 1);
    Versions.v1_2 = new Adaptive.Version(1, 2);
    Versions.latest = Versions.v1_2;
    Versions.vNext = new Adaptive.Version(1000, 0, "vNext");
    return Versions;
}());
exports.Versions = Versions;
exports.SupportedTargetVersions = [Versions.v1_0, Versions.v1_1, Versions.v1_2, Versions.vNext];
function isVersionLessOrEqual(version, targetVersion) {
    if (version instanceof Adaptive.Version) {
        if (targetVersion instanceof Adaptive.Version) {
            return targetVersion.compareTo(version) >= 0;
        }
        else {
            // Target version is *
            return true;
        }
    }
    else {
        // Version is *
        return true;
    }
}
exports.isVersionLessOrEqual = isVersionLessOrEqual;


/***/ }),

/***/ "./src/side-panel.ts":
/*!***************************!*\
  !*** ./src/side-panel.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var splitter_1 = __webpack_require__(/*! ./splitter */ "./src/splitter.ts");
var tool_box_1 = __webpack_require__(/*! ./tool-box */ "./src/tool-box.ts");
var settings_manager_1 = __webpack_require__(/*! ./settings-manager */ "./src/settings-manager.ts");
var SidePanelAlignment;
(function (SidePanelAlignment) {
    SidePanelAlignment[SidePanelAlignment["Top"] = 0] = "Top";
    SidePanelAlignment[SidePanelAlignment["Right"] = 1] = "Right";
    SidePanelAlignment[SidePanelAlignment["Bottom"] = 2] = "Bottom";
    SidePanelAlignment[SidePanelAlignment["Left"] = 3] = "Left";
})(SidePanelAlignment = exports.SidePanelAlignment || (exports.SidePanelAlignment = {}));
var ToolboxInfo = /** @class */ (function () {
    function ToolboxInfo(toolbox) {
        var _this = this;
        this.toolbox = toolbox;
        toolbox.onToggled = function (sender) {
            if (sender.isExpanded) {
                _this.showSplitter();
                _this.toolbox.renderedElement.classList.remove("acd-hidden");
            }
            else {
                _this.hideSplitter();
                _this.toolbox.renderedElement.classList.add("acd-hidden");
            }
            if (_this.onToggled) {
                _this.onToggled(_this);
            }
        };
    }
    ToolboxInfo.prototype.resizeEnded = function () {
        if (this.onResizeEnded) {
            this.onResizeEnded(this);
        }
    };
    ToolboxInfo.prototype.resized = function () {
        if (this.onResized) {
            this.onResized(this);
        }
    };
    ToolboxInfo.prototype.showSplitter = function () {
        if (this.splitter) {
            this.splitter.attachedTo.classList.remove("acd-hidden");
        }
    };
    ToolboxInfo.prototype.hideSplitter = function () {
        if (this.splitter) {
            this.splitter.attachedTo.classList.add("acd-hidden");
        }
    };
    Object.defineProperty(ToolboxInfo.prototype, "splitter", {
        get: function () {
            return this._splitter;
        },
        set: function (value) {
            var _this = this;
            this._splitter = value;
            this._splitter.onResizeEnded = function (sender) {
                _this.resizeEnded();
            };
            this._splitter.onResized = function (sender) {
                _this.resized();
            };
        },
        enumerable: true,
        configurable: true
    });
    return ToolboxInfo;
}());
var SidePanel = /** @class */ (function () {
    function SidePanel(id, alignment, collapsedTabContainer) {
        this._toolboxes = [];
        this._isRestoring = false;
        this.isResizable = true;
        this.id = id;
        this._alignment = alignment;
        this._collapsedTabContainer = collapsedTabContainer;
    }
    SidePanel.prototype.updateLayout = function () {
        var expandedToolboxCount = 0;
        for (var _i = 0, _a = this._toolboxes; _i < _a.length; _i++) {
            var toolboxInfo = _a[_i];
            if (toolboxInfo.toolbox.isExpanded) {
                expandedToolboxCount++;
                if (expandedToolboxCount == 1) {
                    toolboxInfo.hideSplitter();
                    toolboxInfo.toolbox.stretch = true;
                }
                else {
                    toolboxInfo.showSplitter();
                    toolboxInfo.toolbox.stretch = false;
                }
            }
        }
        if (expandedToolboxCount > 0) {
            this._attachedTo.classList.remove("acd-hidden");
        }
        else {
            this._attachedTo.classList.add("acd-hidden");
        }
    };
    SidePanel.prototype.computeToolboxSize = function (toolbox) {
        var boundingRect = this._attachedTo.getBoundingClientRect();
        var toolboxBoundingRect = toolbox.renderedElement.getBoundingClientRect();
        if (this.isVertical) {
            toolbox.renderedElement.style.height = (100 / boundingRect.height * toolboxBoundingRect.height) + "%";
        }
        else {
            toolbox.renderedElement.style.width = (100 / boundingRect.width * toolboxBoundingRect.width) + "%";
        }
    };
    SidePanel.prototype.resized = function () {
        if (this.onResized) {
            this.onResized(this);
        }
        this.saveState();
    };
    SidePanel.prototype.toolboxResized = function (toolbox) {
        if (this.onToolboxResized) {
            this.onToolboxResized(this, toolbox);
        }
        this.saveState();
    };
    SidePanel.prototype.toolboxExpandedOrCollapsed = function (toolbox) {
        if (this.onToolboxExpandedOrCollapsed) {
            this.onToolboxExpandedOrCollapsed(this, toolbox);
        }
        this.saveState();
    };
    SidePanel.prototype.getDimensionSettingName = function () {
        return this.id + (this.isVertical ? "Height" : "Width");
    };
    Object.defineProperty(SidePanel.prototype, "isVertical", {
        get: function () {
            return this._alignment == SidePanelAlignment.Right || this._alignment == SidePanelAlignment.Left;
        },
        enumerable: true,
        configurable: true
    });
    SidePanel.prototype.addToolbox = function (toolbox) {
        var _this = this;
        var toolboxInfo = new ToolboxInfo(toolbox);
        toolboxInfo.onToggled = function (sender) {
            _this.updateLayout();
            _this.toolboxExpandedOrCollapsed(toolboxInfo.toolbox);
        };
        toolboxInfo.onResizeEnded = function (sender) {
            _this.computeToolboxSize(sender.toolbox);
            _this.toolboxResized(sender.toolbox);
        };
        toolboxInfo.onResized = function (sender) {
            _this.toolboxResized(sender.toolbox);
        };
        this._toolboxes.push(toolboxInfo);
    };
    SidePanel.prototype.attachTo = function (attachTo) {
        var _this = this;
        this._attachedTo = attachTo;
        this._contentHost = document.createElement("div");
        this._contentHost.style.display = "flex";
        this._contentHost.style.overflow = "hidden";
        this._contentHost.style.flex = "1 1 auto";
        if (this.isVertical) {
            this._contentHost.style.flexDirection = "column";
        }
        else {
            this._contentHost.style.flexDirection = "row";
        }
        for (var i = 0; i < this._toolboxes.length; i++) {
            var toolboxInfo = this._toolboxes[i];
            toolboxInfo.toolbox.render(this.isVertical ? tool_box_1.ToolboxOrientation.Vertical : tool_box_1.ToolboxOrientation.Horizontal, this._collapsedTabContainer);
            if (i > 0) {
                var splitterElement_1 = document.createElement("div");
                if (this.isVertical) {
                    splitterElement_1.className = "acd-horizontal-splitter";
                    toolboxInfo.toolbox.renderedElement.style.height = (100 / this._toolboxes.length) + "%";
                }
                else {
                    splitterElement_1.className = "acd-vertical-splitter";
                    toolboxInfo.toolbox.renderedElement.style.width = (100 / this._toolboxes.length) + "%";
                }
                this._contentHost.appendChild(splitterElement_1);
                toolboxInfo.splitter = new splitter_1.Splitter(splitterElement_1, toolboxInfo.toolbox.renderedElement, !this.isVertical);
            }
            this._contentHost.appendChild(toolboxInfo.toolbox.renderedElement);
        }
        var splitterElement = null;
        if (this.isResizable) {
            splitterElement = document.createElement("div");
            splitterElement.className = this.isVertical ? "acd-vertical-splitter" : "acd-horizontal-splitter";
            var splitter = new splitter_1.Splitter(splitterElement, this._attachedTo, this.isVertical, this._alignment == SidePanelAlignment.Left || this._alignment == SidePanelAlignment.Top);
            splitter.onResized = function (splitter) {
                _this.resized();
            };
        }
        this._attachedTo.innerHTML = "";
        this._attachedTo.style.display = "flex";
        if (this.isVertical) {
            if (this.size) {
                this._attachedTo.style.width = this.size + "px";
            }
            this._attachedTo.style.flexDirection = "row";
            this._attachedTo.style.overflowX = "hidden";
        }
        else {
            if (this.size) {
                this._attachedTo.style.height = this.size + "px";
            }
            this._attachedTo.style.flexDirection = "column";
            this._attachedTo.style.overflowY = "hidden";
        }
        if (this._alignment == SidePanelAlignment.Right || this._alignment == SidePanelAlignment.Bottom) {
            if (splitterElement) {
                this._attachedTo.appendChild(splitterElement);
            }
            this._attachedTo.appendChild(this._contentHost);
        }
        else {
            this._attachedTo.append(this._contentHost);
            if (splitterElement) {
                this._attachedTo.appendChild(splitterElement);
            }
        }
        this.restoreState();
        this.updateLayout();
    };
    SidePanel.prototype.saveState = function () {
        if (!this._isRestoring) {
            settings_manager_1.SettingsManager.trySaveSetting(this.getDimensionSettingName(), this.isVertical ? this._attachedTo.style.width : this._attachedTo.style.height);
            for (var _i = 0, _a = this._toolboxes; _i < _a.length; _i++) {
                var toolboxInfo = _a[_i];
                toolboxInfo.toolbox.saveState();
            }
        }
    };
    SidePanel.prototype.restoreState = function () {
        if (this._attachedTo && !this._isRestoring) {
            this._isRestoring = true;
            try {
                var dimensionSetting = settings_manager_1.SettingsManager.tryLoadStringSetting(this.getDimensionSettingName());
                if (dimensionSetting.succeeded && dimensionSetting.value != undefined && dimensionSetting.value != "") {
                    if (this.isVertical) {
                        this._attachedTo.style.width = dimensionSetting.value;
                    }
                    else {
                        this._attachedTo.style.height = dimensionSetting.value;
                    }
                }
                for (var _i = 0, _a = this._toolboxes; _i < _a.length; _i++) {
                    var toolboxInfo = _a[_i];
                    toolboxInfo.toolbox.restoreState();
                }
                this.updateLayout();
                this.resized();
            }
            finally {
                this._isRestoring = false;
            }
        }
    };
    Object.defineProperty(SidePanel.prototype, "contentHost", {
        get: function () {
            return this._contentHost;
        },
        enumerable: true,
        configurable: true
    });
    return SidePanel;
}());
exports.SidePanel = SidePanel;


/***/ }),

/***/ "./src/splitter.ts":
/*!*************************!*\
  !*** ./src/splitter.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Splitter = /** @class */ (function () {
    function Splitter(attachedTo, sizedElement, isVertical, isAttachedAfter, minimumSize) {
        var _this = this;
        if (isVertical === void 0) { isVertical = false; }
        if (isAttachedAfter === void 0) { isAttachedAfter = false; }
        if (minimumSize === void 0) { minimumSize = 140; }
        this._isVertical = false;
        this._isAttachedAfter = false;
        this.minimum = 50;
        this.attachedTo = attachedTo;
        this._sizedELement = sizedElement;
        this._isVertical = isVertical;
        this._isAttachedAfter = isAttachedAfter;
        this.minimum = minimumSize;
        this.attachedTo.onmousedown = function (e) { e.preventDefault(); };
        this.attachedTo.onpointerdown = function (e) { _this.pointerDown(e); };
        this.attachedTo.onpointermove = function (e) { _this.pointerMove(e); };
        this.attachedTo.onpointerup = function (e) { _this.pointerUp(e); };
    }
    Splitter.prototype.resizeEnded = function () {
        if (this.onResizeEnded) {
            this.onResizeEnded(this);
        }
    };
    Splitter.prototype.pointerDown = function (e) {
        e.preventDefault();
        this.attachedTo.setPointerCapture(e.pointerId);
        this._lastClickedOffset = { x: e.x, y: e.y };
        this._isPointerDown = true;
    };
    Splitter.prototype.pointerMove = function (e) {
        if (this._isPointerDown) {
            e.preventDefault();
            var sizeApplied = false;
            var newSize = void 0;
            if (this._isVertical) {
                if (this._isAttachedAfter) {
                    newSize = this._sizedELement.getBoundingClientRect().width - (this._lastClickedOffset.x - e.x);
                }
                else {
                    newSize = this._sizedELement.getBoundingClientRect().width - (e.x - this._lastClickedOffset.x);
                }
                if (newSize >= this.minimum) {
                    this._sizedELement.style.width = newSize + "px";
                    sizeApplied = true;
                }
            }
            else {
                if (this._isAttachedAfter) {
                    newSize = this._sizedELement.getBoundingClientRect().height - (this._lastClickedOffset.y - e.y);
                }
                else {
                    newSize = this._sizedELement.getBoundingClientRect().height - (e.y - this._lastClickedOffset.y);
                }
                if (newSize >= this.minimum) {
                    this._sizedELement.style.height = newSize + "px";
                    sizeApplied = true;
                }
            }
            if (sizeApplied) {
                if (this.onResized) {
                    this.onResized(this);
                }
                this._lastClickedOffset = { x: e.x, y: e.y };
            }
        }
    };
    Splitter.prototype.pointerUp = function (e) {
        e.preventDefault();
        this.attachedTo.releasePointerCapture(e.pointerId);
        this.resizeEnded();
        this._isPointerDown = false;
    };
    return Splitter;
}());
exports.Splitter = Splitter;


/***/ }),

/***/ "./src/strings.ts":
/*!************************!*\
  !*** ./src/strings.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Strings = /** @class */ (function () {
    function Strings() {
    }
    Strings.toolboxes = {
        toolPalette: {
            title: "Card Elements"
        },
        cardEditor: {
            title: "Card Payload Editor"
        },
        sampleDataEditor: {
            title: "Sample Data Editor"
        },
        propertySheet: {
            title: "Element Properties"
        },
        cardStructure: {
            title: "Card Structure"
        },
        dataStructure: {
            title: "Data Structure"
        }
    };
    Strings.loadingEditor = "Loading editor...";
    return Strings;
}());
exports.Strings = Strings;


/***/ }),

/***/ "./src/tool-box.ts":
/*!*************************!*\
  !*** ./src/tool-box.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var settings_manager_1 = __webpack_require__(/*! ./settings-manager */ "./src/settings-manager.ts");
var ToolboxOrientation;
(function (ToolboxOrientation) {
    ToolboxOrientation[ToolboxOrientation["Horizontal"] = 0] = "Horizontal";
    ToolboxOrientation[ToolboxOrientation["Vertical"] = 1] = "Vertical";
})(ToolboxOrientation = exports.ToolboxOrientation || (exports.ToolboxOrientation = {}));
var Toolbox = /** @class */ (function () {
    function Toolbox(id, title) {
        this._isExpanded = true;
        this._stretch = false;
        this._isRestoring = false;
        this.commands = null;
        this.id = id;
        this.title = title;
    }
    Toolbox.prototype.getDimensionSettingName = function () {
        return "Toolbox" + this.id + (this._orientation == ToolboxOrientation.Vertical ? "Height" : "Width");
    };
    Toolbox.prototype.updateContent = function () {
        if (this._contentHost) {
            this._contentHost.innerHTML = "";
            if (this._content) {
                this._contentHost.appendChild(this._content);
            }
        }
    };
    Toolbox.prototype.toggled = function () {
        if (this.onToggled) {
            this.onToggled(this);
        }
    };
    Toolbox.prototype.render = function (orientation, collapsedTabContainer) {
        var _this = this;
        this._orientation = orientation;
        this._collapsedTabContainer = collapsedTabContainer;
        this._renderedElement = document.createElement("div");
        this._renderedElement.style.overflow = "auto";
        this._renderedElement.style.display = "flex";
        this._renderedElement.style.flexDirection = "column";
        this._headerRootElement = document.createElement("div");
        this._headerRootElement.innerHTML = "";
        this._headerRootElement.className = "acd-toolbox-header";
        var headerContentElement = document.createElement("div");
        headerContentElement.className = "acd-toolbox-header-content";
        var headerTitleElement = document.createElement("span");
        headerTitleElement.className = "acd-toolbox-header-title";
        headerTitleElement.innerText = this.title;
        headerContentElement.appendChild(headerTitleElement);
        var headerCommandsHostElement = document.createElement("span");
        headerCommandsHostElement.className = "acd-toolbox-header-commandsHost";
        this._customCommandsHost = document.createElement("div");
        this._customCommandsHost.style.display = "flex";
        if (this.commands) {
            var _loop_1 = function (command) {
                var commandButtonElement = document.createElement("div");
                commandButtonElement.className = "acd-toolbox-header-commandButton";
                commandButtonElement.title = command.title;
                commandButtonElement.onclick = function (e) {
                    command.execute(command);
                };
                var commandIconElement = document.createElement("div");
                commandIconElement.classList.add("acd-icon", command.iconClass);
                commandButtonElement.appendChild(commandIconElement);
                this_1._customCommandsHost.appendChild(commandButtonElement);
            };
            var this_1 = this;
            for (var _i = 0, _a = this.commands; _i < _a.length; _i++) {
                var command = _a[_i];
                _loop_1(command);
            }
        }
        headerCommandsHostElement.appendChild(this._customCommandsHost);
        this._expandCollapseButtonElement = document.createElement("span");
        this._expandCollapseButtonElement.className = "acd-toolbox-header-commandButton";
        this._expandCollapseButtonElement.title = "Hide";
        this._headerIconElement = document.createElement("span");
        this._headerIconElement.classList.add("acd-icon", "acd-icon-header-expanded");
        this._expandCollapseButtonElement.appendChild(this._headerIconElement);
        this._expandCollapseButtonElement.onmousedown = function (e) {
            e.preventDefault();
            return true;
        };
        this._expandCollapseButtonElement.onclick = function (e) {
            _this.toggle();
            e.preventDefault();
            return true;
        };
        headerCommandsHostElement.appendChild(this._expandCollapseButtonElement);
        headerContentElement.appendChild(headerCommandsHostElement);
        this._headerRootElement.appendChild(headerContentElement);
        this._contentHost = document.createElement("div");
        this._contentHost.style.overflow = "auto";
        this._renderedElement.append(this._headerRootElement, this._contentHost);
        this.updateContent();
    };
    Toolbox.prototype.collapse = function () {
        if (this._isExpanded) {
            this._headerIconElement.classList.add("acd-icon-header-collapsed");
            this._headerIconElement.classList.remove("acd-icon-header-expanded");
            this._customCommandsHost.classList.add("acd-hidden");
            if (this._collapsedTabContainer) {
                this._renderedElement.removeChild(this._headerRootElement);
                this._collapsedTabContainer.appendChild(this._headerRootElement);
            }
            this._expandCollapseButtonElement.title = "Show";
            this._isExpanded = false;
            this.toggled();
        }
    };
    Toolbox.prototype.expand = function () {
        if (!this._isExpanded) {
            this._headerIconElement.classList.add("acd-icon-header-expanded");
            this._headerIconElement.classList.remove("acd-icon-header-collapsed");
            this._customCommandsHost.classList.remove("acd-hidden");
            if (this._collapsedTabContainer) {
                this._collapsedTabContainer.removeChild(this._headerRootElement);
                this._renderedElement.insertBefore(this._headerRootElement, this._renderedElement.firstChild);
            }
            this._expandCollapseButtonElement.title = "Hide";
            this._isExpanded = true;
            this.toggled();
        }
    };
    Toolbox.prototype.toggle = function () {
        if (this.isExpanded) {
            this.collapse();
        }
        else {
            this.expand();
        }
    };
    Toolbox.prototype.getHeaderBoundingRect = function () {
        return this._headerRootElement.getBoundingClientRect();
    };
    Toolbox.prototype.saveState = function () {
        if (!this._isRestoring) {
            settings_manager_1.SettingsManager.trySaveSetting("Toolbox" + this.id + "IsExpanded", this.isExpanded.toString());
            settings_manager_1.SettingsManager.trySaveSetting(this.getDimensionSettingName(), this.orientation == ToolboxOrientation.Vertical ? this.renderedElement.style.height : this.renderedElement.style.width);
        }
    };
    Toolbox.prototype.restoreState = function () {
        if (this.renderedElement && !this._isRestoring) {
            this._isRestoring = true;
            try {
                var dimensionSetting = settings_manager_1.SettingsManager.tryLoadStringSetting(this.getDimensionSettingName());
                if (dimensionSetting.succeeded && dimensionSetting.value != undefined && dimensionSetting.value != "") {
                    if (this.orientation == ToolboxOrientation.Vertical) {
                        this.renderedElement.style.height = dimensionSetting.value;
                    }
                    else {
                        this.renderedElement.style.width = dimensionSetting.value;
                    }
                }
                var isExpandedSetting = settings_manager_1.SettingsManager.tryLoadBooleanSetting("Toolbox" + this.id + "IsExpanded", true);
                if (isExpandedSetting.succeeded) {
                    if (isExpandedSetting.value) {
                        this.expand();
                    }
                    else {
                        this.collapse();
                    }
                }
            }
            finally {
                this._isRestoring = false;
            }
        }
    };
    Object.defineProperty(Toolbox.prototype, "orientation", {
        get: function () {
            return this._orientation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toolbox.prototype, "renderedElement", {
        get: function () {
            return this._renderedElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toolbox.prototype, "content", {
        get: function () {
            return this._content;
        },
        set: function (value) {
            this._content = value;
            this.updateContent();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toolbox.prototype, "isExpanded", {
        get: function () {
            return this._isExpanded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Toolbox.prototype, "stretch", {
        get: function () {
            return this._stretch;
        },
        set: function (value) {
            this._stretch = value;
            if (this._stretch) {
                this.renderedElement.style.flex = "1 1 auto";
            }
            else {
                this.renderedElement.style.flex = "0 0 auto";
            }
        },
        enumerable: true,
        configurable: true
    });
    return Toolbox;
}());
exports.Toolbox = Toolbox;


/***/ }),

/***/ "./src/tool-palette.ts":
/*!*****************************!*\
  !*** ./src/tool-palette.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var DesignerSurface = __webpack_require__(/*! ./card-designer-surface */ "./src/card-designer-surface.ts");
var Adaptive = __webpack_require__(/*! adaptivecards */ "../adaptivecards/lib/adaptivecards.js");
var draggable_element_1 = __webpack_require__(/*! ./draggable-element */ "./src/draggable-element.ts");
var BasePaletteItem = /** @class */ (function (_super) {
    __extends(BasePaletteItem, _super);
    function BasePaletteItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BasePaletteItem.prototype.internalRender = function () {
        var element = document.createElement("div");
        element.className = "acd-palette-item";
        element.style.display = "flex";
        var iconElement = document.createElement("div");
        iconElement.classList.add("acd-icon", "acd-toolPalette-icon", this.getIconClass());
        iconElement.style.flex = "0 0 auto";
        var labelElement = document.createElement("div");
        labelElement.className = "acd-palette-item-label";
        labelElement.style.flex = "1 1 100%";
        labelElement.innerText = this.getText();
        element.appendChild(iconElement);
        element.appendChild(labelElement);
        return element;
    };
    BasePaletteItem.prototype.renderDragVisual = function () {
        return this.internalRender();
    };
    return BasePaletteItem;
}(draggable_element_1.DraggableElement));
exports.BasePaletteItem = BasePaletteItem;
var ElementPaletteItem = /** @class */ (function (_super) {
    __extends(ElementPaletteItem, _super);
    function ElementPaletteItem(typeRegistration, peerRegistration) {
        var _this = _super.call(this) || this;
        _this.typeRegistration = typeRegistration;
        _this.peerRegistration = peerRegistration;
        return _this;
    }
    ElementPaletteItem.prototype.getText = function () {
        return this.typeRegistration.typeName;
    };
    ElementPaletteItem.prototype.getIconClass = function () {
        return this.peerRegistration.iconClass;
    };
    ElementPaletteItem.prototype.createPeer = function (designer) {
        var peer = DesignerSurface.CardDesignerSurface.cardElementPeerRegistry.createPeerInstance(designer, null, this.typeRegistration.createInstance());
        peer.initializeCardElement();
        return peer;
    };
    return ElementPaletteItem;
}(BasePaletteItem));
exports.ElementPaletteItem = ElementPaletteItem;
var DataPaletteItem = /** @class */ (function (_super) {
    __extends(DataPaletteItem, _super);
    function DataPaletteItem(field) {
        var _this = _super.call(this) || this;
        _this.field = field;
        return _this;
    }
    DataPaletteItem.prototype.getText = function () {
        return this.field.name;
    };
    DataPaletteItem.prototype.getIconClass = function () {
        return null;
    };
    DataPaletteItem.prototype.createPeer = function (designer) {
        var element;
        if (this.field.isCollection) {
            element = new Adaptive.Container();
            element.setCustomProperty("$data", "{" + this.field.getPath() + "}");
        }
        else {
            var textBlock = new Adaptive.TextBlock();
            textBlock.text = "{" + this.field.getPath() + "}";
            element = textBlock;
        }
        var peer = DesignerSurface.CardDesignerSurface.cardElementPeerRegistry.createPeerInstance(designer, null, element);
        peer.initializeCardElement();
        return peer;
    };
    return DataPaletteItem;
}(BasePaletteItem));
exports.DataPaletteItem = DataPaletteItem;
var CustomPaletteItem = /** @class */ (function (_super) {
    __extends(CustomPaletteItem, _super);
    function CustomPaletteItem(category) {
        var _this = _super.call(this) || this;
        _this.category = category;
        return _this;
    }
    CustomPaletteItem.prototype.getIconClass = function () {
        return "acd-icon-customPaletteItem";
    };
    return CustomPaletteItem;
}(BasePaletteItem));
exports.CustomPaletteItem = CustomPaletteItem;
var SnippetPaletteItem = /** @class */ (function (_super) {
    __extends(SnippetPaletteItem, _super);
    function SnippetPaletteItem(category, name) {
        var _this = _super.call(this, category) || this;
        _this.name = name;
        return _this;
    }
    SnippetPaletteItem.prototype.getText = function () {
        return this.name;
    };
    SnippetPaletteItem.prototype.createPeer = function (designer) {
        if (this.snippet) {
            var rootElementTypeName = this.snippet["type"];
            if (rootElementTypeName) {
                var adaptiveElement = Adaptive.AdaptiveCard.elementTypeRegistry.createInstance(rootElementTypeName);
                if (adaptiveElement) {
                    adaptiveElement.parse(this.snippet);
                    var peer = DesignerSurface.CardDesignerSurface.cardElementPeerRegistry.createPeerInstance(designer, null, adaptiveElement);
                    peer.initializeCardElement();
                    return peer;
                }
            }
        }
    };
    return SnippetPaletteItem;
}(CustomPaletteItem));
exports.SnippetPaletteItem = SnippetPaletteItem;


/***/ }),

/***/ "./src/toolbar.ts":
/*!************************!*\
  !*** ./src/toolbar.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
var adaptivecards_controls_1 = __webpack_require__(/*! adaptivecards-controls */ "../adaptivecards-controls/lib/adaptivecards-controls.js");
var ToolbarElementAlignment;
(function (ToolbarElementAlignment) {
    ToolbarElementAlignment[ToolbarElementAlignment["Left"] = 0] = "Left";
    ToolbarElementAlignment[ToolbarElementAlignment["Right"] = 1] = "Right";
})(ToolbarElementAlignment = exports.ToolbarElementAlignment || (exports.ToolbarElementAlignment = {}));
var ToolbarElement = /** @class */ (function () {
    function ToolbarElement(id) {
        this._renderedElement = undefined;
        this.isVisible = true;
        this.separator = false;
        this.label = null;
        this.alignment = ToolbarElementAlignment.Left;
        if (!id || id === "") {
            throw new Error("Toolbar elements must have an Id.");
        }
        this.id = id;
    }
    ToolbarElement.prototype.internalUpdateLayout = function () {
        // Do nothing in base implementation
    };
    ToolbarElement.prototype.updateLayout = function () {
        if (this._renderedElement) {
            this.internalUpdateLayout();
        }
    };
    ToolbarElement.prototype.render = function () {
        this._renderedElement = this.internalRender();
        this.updateLayout();
        return this._renderedElement;
    };
    Object.defineProperty(ToolbarElement.prototype, "renderedElement", {
        get: function () {
            return this._renderedElement;
        },
        enumerable: true,
        configurable: true
    });
    return ToolbarElement;
}());
exports.ToolbarElement = ToolbarElement;
var ToolbarButton = /** @class */ (function (_super) {
    __extends(ToolbarButton, _super);
    function ToolbarButton(id, caption, iconClass, onClick) {
        if (onClick === void 0) { onClick = null; }
        var _this = _super.call(this, id) || this;
        _this._displayCaption = true;
        _this._iconClass = undefined;
        _this._toolTip = undefined;
        _this._isEnabled = true;
        _this._allowToggle = false;
        _this._isToggled = false;
        _this.caption = caption;
        _this.iconClass = iconClass;
        _this.onClick = onClick;
        return _this;
    }
    ToolbarButton.prototype.clicked = function () {
        if (this.onClick) {
            this.onClick(this);
        }
    };
    ToolbarButton.prototype.internalUpdateLayout = function () {
        this.renderedElement.className = "acd-toolbar-button";
        this.renderedElement.disabled = !this.isEnabled;
        if (this.isToggled) {
            this.renderedElement.classList.add("acd-toolbar-button-toggled");
        }
        else {
            this.renderedElement.classList.remove("acd-toolbar-button-toggled");
        }
        if (this.iconClass) {
            this.renderedElement.classList.add(this.iconClass);
        }
        if (!this.displayCaption) {
            this.renderedElement.classList.add("acd-toolbar-button-iconOnly");
            this.renderedElement.innerText = "";
        }
        else {
            this.renderedElement.innerText = this.caption;
        }
        this.renderedElement.title = this.toolTip ? this.toolTip : "";
    };
    ToolbarButton.prototype.internalRender = function () {
        var _this = this;
        var element = document.createElement("button");
        element.onclick = function (e) {
            if (_this.allowToggle) {
                _this.isToggled = !_this.isToggled;
            }
            _this.clicked();
        };
        return element;
    };
    Object.defineProperty(ToolbarButton.prototype, "allowToggle", {
        get: function () {
            return this._allowToggle;
        },
        set: function (value) {
            this._allowToggle = value;
            if (!this._allowToggle) {
                this.isToggled = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarButton.prototype, "isToggled", {
        get: function () {
            return this._isToggled;
        },
        set: function (value) {
            this._isToggled = value;
            this.updateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarButton.prototype, "caption", {
        get: function () {
            return this._caption;
        },
        set: function (value) {
            this._caption = value;
            this.updateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarButton.prototype, "displayCaption", {
        get: function () {
            return this._displayCaption;
        },
        set: function (value) {
            this._displayCaption = value;
            this.updateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarButton.prototype, "iconClass", {
        get: function () {
            return this._iconClass;
        },
        set: function (value) {
            this._iconClass = value;
            this.updateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarButton.prototype, "toolTip", {
        get: function () {
            return this._toolTip;
        },
        set: function (value) {
            this._toolTip = value;
            this.updateLayout();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarButton.prototype, "isEnabled", {
        get: function () {
            return this._isEnabled;
        },
        set: function (value) {
            this._isEnabled = value;
            this.updateLayout();
        },
        enumerable: true,
        configurable: true
    });
    return ToolbarButton;
}(ToolbarElement));
exports.ToolbarButton = ToolbarButton;
var ToolbarChoicePicker = /** @class */ (function (_super) {
    __extends(ToolbarChoicePicker, _super);
    function ToolbarChoicePicker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.label = null;
        _this.choices = [];
        _this.width = null;
        return _this;
    }
    ToolbarChoicePicker.prototype.internalRender = function () {
        var _this = this;
        this._dropDown = new adaptivecards_controls_1.DropDown();
        for (var _i = 0, _a = this.choices; _i < _a.length; _i++) {
            var choice = _a[_i];
            var dropDownItem = new adaptivecards_controls_1.DropDownItem(choice.value, choice.name);
            this._dropDown.items.add(dropDownItem);
        }
        this._dropDown.selectedIndex = 0;
        this._dropDown.onValueChanged = function (sender) {
            if (_this.onChanged) {
                _this.onChanged(_this);
            }
        };
        var pickerElement = document.createElement("div");
        if (this.width && this.width > 0) {
            pickerElement.style.width = this.width + "px";
        }
        this._dropDown.attach(pickerElement);
        var pickerContainerElement = document.createElement("div");
        pickerContainerElement.className = "acd-toolbar-choicePicker";
        pickerContainerElement.style.display = "flex";
        pickerContainerElement.style.alignItems = "center";
        if (this.label) {
            var labelElement = document.createElement("span");
            labelElement.className = "acd-toolbar-label";
            labelElement.innerText = this.label;
            pickerContainerElement.appendChild(labelElement);
        }
        pickerContainerElement.appendChild(pickerElement);
        return pickerContainerElement;
    };
    Object.defineProperty(ToolbarChoicePicker.prototype, "value", {
        get: function () {
            return this._dropDown.value.key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarChoicePicker.prototype, "selectedIndex", {
        get: function () {
            return this._dropDown.selectedIndex;
        },
        set: function (value) {
            this._dropDown.selectedIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    return ToolbarChoicePicker;
}(ToolbarElement));
exports.ToolbarChoicePicker = ToolbarChoicePicker;
var Toolbar = /** @class */ (function () {
    function Toolbar() {
        this._elements = [];
    }
    Toolbar.prototype.createSeparatorElement = function () {
        var separatorElement = document.createElement("div");
        separatorElement.className = "acd-toolbar-separator";
        return separatorElement;
    };
    Toolbar.prototype.renderElementsInto = function (container, elements, separatorPosition) {
        for (var i = 0; i < elements.length; i++) {
            if (elements[i].separator && separatorPosition == ToolbarElementAlignment.Left && i > 0) {
                container.appendChild(this.createSeparatorElement());
            }
            container.appendChild(elements[i].render());
            if (elements[i].separator && separatorPosition == ToolbarElementAlignment.Right && i < elements.length - 1) {
                container.appendChild(this.createSeparatorElement());
            }
        }
    };
    Toolbar.prototype.attachTo = function (element) {
        this._attachedTo = element;
        this._attachedTo.className = "acd-toolbar";
        this._attachedTo.style.display = "flex";
        this._attachedTo.style.justifyContent = "space-between";
        this._attachedTo.innerHTML = "";
        var leftElements = [];
        var rightElements = [];
        for (var _i = 0, _a = this._elements; _i < _a.length; _i++) {
            var element_1 = _a[_i];
            if (element_1.isVisible) {
                if (element_1.alignment == ToolbarElementAlignment.Left) {
                    leftElements.push(element_1);
                }
                else {
                    rightElements.push(element_1);
                }
            }
        }
        var leftContainer = document.createElement("div");
        leftContainer.style.display = "flex";
        leftContainer.style.alignItems = "center";
        var rightContainer = document.createElement("div");
        rightContainer.style.display = "flex";
        rightContainer.style.alignItems = "center";
        this.renderElementsInto(leftContainer, leftElements, ToolbarElementAlignment.Left);
        this.renderElementsInto(rightContainer, rightElements, ToolbarElementAlignment.Right);
        this._attachedTo.appendChild(leftContainer);
        this._attachedTo.appendChild(rightContainer);
    };
    Toolbar.prototype.addElement = function (element) {
        this._elements.push(element);
    };
    Toolbar.prototype.getElementById = function (elementId) {
        for (var _i = 0, _a = this._elements; _i < _a.length; _i++) {
            var element = _a[_i];
            if (element.id == elementId) {
                return element;
            }
        }
        return null;
    };
    Toolbar.prototype.insertElementAfter = function (element, afterElementId) {
        for (var i = 0; i < this._elements.length; i++) {
            if (this._elements[i].id == afterElementId) {
                this._elements.splice(i + 1, 0, element);
                return;
            }
        }
        // Add as the last element if no element was found with the
        // specified id
        this._elements.push(element);
    };
    Toolbar.prototype.insertElementBefore = function (element, beforeElementId) {
        for (var i = this._elements.length - 1; i >= 0; i--) {
            if (this._elements[i].id == beforeElementId) {
                this._elements.splice(i, 0, element);
                return;
            }
        }
        // Insert as first element if no element was found with the
        // specified id
        this._elements.splice(0, 0, element);
    };
    return Toolbar;
}());
exports.Toolbar = Toolbar;


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,